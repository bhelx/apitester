{
  "version": 3,
  "sources": ["../src/index-js.ts", "../std/portable/index.js", "../lib/binaryen.js", "../src/glue/binaryen.js", "../src/glue/js/float.js", "../src/glue/js/i64.js", "../src/glue/js/collections.js", "../std/assembly/shared/feature.ts", "../std/assembly/shared/target.ts", "../std/assembly/shared/runtime.ts", "../std/assembly/shared/typeinfo.ts", "../src/common.ts", "../src/diagnosticMessages.generated", "../src/util.ts", "../src/util/binary.ts", "../src/util/collections.ts", "../src/util/math.ts", "../src/util/text.ts", "../src/util/path.ts", "../src/util/terminal.ts", "../src/util/vector.ts", "../src/diagnostics.ts", "../src/ast.ts", "../src/tokenizer.ts", "../src/module.ts", "../src/passes/pass.ts", "../src/passes/findusedlocals.ts", "../src/flow.ts", "../src/resolver.ts", "../src/parser.ts", "../src/program.ts", "../src/types.ts", "../src/builtins.ts", "../src/passes/rtrace.ts", "../src/passes/shadowstack.ts", "../src/bindings/util.ts", "../src/bindings/js.ts", "../src/compiler.ts", "../src/bindings/tsd.ts", "../src/index-wasm.ts", "../src/extra/ast.ts", "../src/index.ts"],
  "sourcesContent": ["import \"./glue/js/index\";\nexport * from \"./index-wasm\";\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./bindings\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./extra/ast\";\nimport * as util from \"./util\";\nexport { util };\n", "/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\nif (typeof globalScope.ASC_TARGET === \"undefined\") {\n\n  globalScope.ASC_TARGET = 0; // Target.JS\n  globalScope.ASC_RUNTIME = 0; // Runtime.Stub\n  globalScope.ASC_NO_ASSERT = false;\n  globalScope.ASC_MEMORY_BASE = 0;\n  globalScope.ASC_OPTIMIZE_LEVEL = 3;\n  globalScope.ASC_SHRINK_LEVEL = 0;\n  globalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\n  globalScope.ASC_FEATURE_SIGN_EXTENSION = false;\n  globalScope.ASC_FEATURE_BULK_MEMORY = false;\n  globalScope.ASC_FEATURE_SIMD = false;\n  globalScope.ASC_FEATURE_THREADS = false;\n\n  var F64 = new Float64Array(1);\n  var U64 = new Uint32Array(F64.buffer);\n\n  Object.defineProperties(\n    globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; },\n    {\n      \"MIN_VALUE\": { value: -128 },\n      \"MAX_VALUE\": { value:  127 }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; },\n    {\n      \"MIN_VALUE\": { value: -32768 },\n      \"MAX_VALUE\": { value:  32767 }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; },\n    {\n      \"MIN_VALUE\": { value: -2147483648 },\n      \"MAX_VALUE\": { value:  2147483647 }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"u8\"] = function u8(value) { return value & 0xff; },\n    {\n      \"MIN_VALUE\": { value:   0 },\n      \"MAX_VALUE\": { value: 255 }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"u16\"] = function u16(value) { return value & 0xffff; },\n    {\n      \"MIN_VALUE\": { value:     0 },\n      \"MAX_VALUE\": { value: 65535 }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; },\n    {\n      \"MIN_VALUE\": { value:          0 },\n      \"MAX_VALUE\": { value: 4294967295 }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"bool\"] = function bool(value) { return !!value; },\n    {\n      \"MIN_VALUE\": { value: false },\n      \"MAX_VALUE\": { value: true }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"f32\"] = function f32(value) { return Math.fround(value); },\n    {\n      \"EPSILON\":   { value: 1.1920928955078125e-07 },\n      \"MIN_VALUE\": { value: 1.401298464324817e-45 },\n      \"MAX_VALUE\": { value: 3.4028234663852886e+38 },\n      \"MIN_NORMAL_VALUE\":  { value:  1.1754943508222875e-38 },\n      \"MIN_SAFE_INTEGER\":  { value: -16777215 },\n      \"MAX_SAFE_INTEGER\":  { value:  16777215 },\n      \"POSITIVE_INFINITY\": { value:  Infinity },\n      \"NEGATIVE_INFINITY\": { value: -Infinity },\n      \"NaN\": { value: NaN }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"f64\"] = function f64(value) { return +value; },\n    {\n      \"EPSILON\":   { value: 2.2204460492503131e-016 },\n      \"MIN_VALUE\": { value:                  5e-324 },\n      \"MAX_VALUE\": { value: 1.7976931348623157e+308 },\n      \"MIN_NORMAL_VALUE\":  { value:  2.2250738585072014e-308 },\n      \"MIN_SAFE_INTEGER\":  { value: -9007199254740991 },\n      \"MAX_SAFE_INTEGER\":  { value:  9007199254740991 },\n      \"POSITIVE_INFINITY\": { value:  Infinity },\n      \"NEGATIVE_INFINITY\": { value: -Infinity },\n      \"NaN\": { value: NaN }\n    }\n  );\n\n  globalScope[\"clz\"] = Math.clz32;\n\n  globalScope[\"ctz\"] = function ctz(value) {\n    return 32 - Math.clz32(~value & (value - 1));\n  };\n\n  globalScope[\"popcnt\"] = function popcnt(value) {\n    value -= value >>> 1 & 0x55555555;\n    value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n    return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n  };\n\n  globalScope[\"rotl\"] = function rotl(value, shift) {\n    shift &= 31;\n    return (value << shift) | (value >>> (32 - shift));\n  };\n\n  globalScope[\"rotr\"] = function rotr(value, shift) {\n    shift &= 31;\n    return (value >>> shift) | (value << (32 - shift));\n  };\n\n  globalScope[\"abs\"] = Math.abs;\n\n  globalScope[\"max\"] = Math.max;\n\n  globalScope[\"min\"] = Math.min;\n\n  globalScope[\"ceil\"] = Math.ceil;\n\n  globalScope[\"floor\"] = Math.floor;\n\n  globalScope[\"nearest\"] = function nearest(value) {\n    const INV_EPS64 = 4503599627370496.0;\n    const y = Math.abs(value);\n    return y < INV_EPS64\n      ? Math.abs(y + INV_EPS64 - INV_EPS64) * Math.sign(value)\n      : value;\n  };\n\n  globalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n    return condition ? ifTrue : ifFalse;\n  };\n\n  globalScope[\"sqrt\"] = Math.sqrt;\n\n  globalScope[\"trunc\"] = Math.trunc;\n\n  globalScope[\"copysign\"] = function copysign(x, y) {\n    return Math.abs(x) * Math.sign(y);\n  };\n\n  globalScope[\"bswap\"] = function bswap(value) {\n    var a = value >> 8 & 0x00FF00FF;\n    var b = (value & 0x00FF00FF) << 8;\n    value = a | b;\n    a = value >> 16 & 0x0000FFFF;\n    b = (value & 0x0000FFFF) << 16;\n    return a | b;\n  };\n\n  function UnreachableError() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, UnreachableError);\n    } else {\n      this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n    }\n  }\n  UnreachableError.prototype = Object.create(Error.prototype);\n  UnreachableError.prototype.name = \"UnreachableError\";\n  UnreachableError.prototype.message = \"unreachable\";\n\n  globalScope[\"unreachable\"] = function unreachable() {\n    throw new UnreachableError();\n  };\n\n  function AssertionError(message) {\n    this.message = message || \"assertion failed\";\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AssertionError);\n    } else {\n      this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n    }\n  }\n  AssertionError.prototype = Object.create(Error.prototype);\n  AssertionError.prototype.name = \"AssertionError\";\n\n  globalScope[\"assert\"] = function assert(isTrueish, message) {\n    if (isTrueish) return isTrueish;\n    throw new AssertionError(message);\n  };\n\n  globalScope[\"changetype\"] = function changetype(value) {\n    return value;\n  };\n\n  String[\"fromCharCodes\"] = function fromCharCodes(arr) {\n    const CHUNKSIZE = 1 << 13;\n    const len = arr.length;\n    if (len <= CHUNKSIZE) {\n      return String.fromCharCode.apply(String, arr);\n    }\n    let index = 0;\n    let parts = '';\n    while (index < len) {\n      parts += String.fromCharCode.apply(\n        String,\n        arr.slice(index, Math.min(index + CHUNKSIZE, len))\n      );\n      index += CHUNKSIZE;\n    }\n    return parts;\n  };\n\n  String[\"fromCodePoints\"] = function fromCodePoints(arr) {\n    const CHUNKSIZE = 1 << 13;\n    const len = arr.length;\n    if (len <= CHUNKSIZE) {\n      return String.fromCodePoint.apply(String, arr);\n    }\n    let index = 0;\n    let parts = '';\n    while (index < len) {\n      parts += String.fromCodePoint.apply(\n        String,\n        arr.slice(index, Math.min(index + CHUNKSIZE, len))\n      );\n      index += CHUNKSIZE;\n    }\n    return parts;\n  };\n\n  if (!String.prototype.at) {\n    Object.defineProperty(String.prototype, \"at\", {\n      value: function at(index) {\n        return this.charAt(index >= 0 ? index : index + this.length);\n      },\n      configurable: true\n    });\n  }\n\n  if (!String.prototype.replaceAll) {\n    Object.defineProperty(String.prototype, \"replaceAll\", {\n      value: function replaceAll(search, replacment) {\n        var res = this.split(search).join(replacment);\n        if (!search.length) res = replacment + res + replacment;\n        return res;\n      },\n      configurable: true\n    });\n  }\n\n  function defaultComparator(a, b) {\n    if (a == b) {\n      if (a != 0) return 0;\n      a = 1 / a, b = 1 / b;\n    } else {\n      var nanA = a != a, nanB = b != b;\n      if (nanA | nanB) return nanA - nanB;\n      if (a == null) a = String(a);\n      if (b == null) b = String(b);\n    }\n    return a > b ? 1 : -1;\n  }\n\n  const arraySort = Array.prototype.sort;\n  Array.prototype.sort = function sort(comparator) {\n    return arraySort.call(this, comparator || defaultComparator);\n  };\n\n  [ Array,\n    Uint8ClampedArray,\n    Uint8Array, Int8Array,\n    Uint16Array, Int16Array,\n    Uint32Array, Int32Array,\n    Float32Array, Float64Array\n  ].forEach(Ctr => {\n    if (!Ctr.prototype.at) {\n      Object.defineProperty(Ctr.prototype, \"at\", {\n        value: function at(index) {\n          return this[index >= 0 ? index : index + this.length];\n        },\n        configurable: true\n      });\n    }\n\n    if (!Ctr.prototype.findLastIndex) {\n      Object.defineProperty(Ctr.prototype, \"findLastIndex\", {\n        value: function findLastIndex(fn) {\n          for (let i = this.length - 1; i >= 0; --i) {\n            if (fn(this[i], i, this)) return i;\n          }\n          return -1;\n        },\n        configurable: true\n      });\n    }\n\n    if (Ctr != Array) {\n      Object.defineProperty(Ctr, \"wrap\", {\n        value: function wrap(buffer, byteOffset, length) {\n          return new Ctr(buffer, byteOffset, length);\n        },\n        configurable: true\n      });\n    }\n  });\n\n  globalScope[\"isInteger\"] = Number.isInteger;\n\n  globalScope[\"isFloat\"] = function isFloat(arg) {\n    return typeof arg === \"number\";\n  };\n\n  globalScope[\"isNullable\"] = function isNullable(arg) {\n    return true;\n  };\n\n  globalScope[\"isReference\"] = function isReference(arg) {\n    return typeof arg === \"object\" || typeof arg === \"string\";\n  };\n\n  globalScope[\"isFunction\"] = function isFunction(arg) {\n    return typeof arg === \"function\";\n  };\n\n  globalScope[\"isString\"] = function isString(arg) {\n    return typeof arg === \"string\" || arg instanceof String;\n  };\n\n  globalScope[\"isArray\"] = Array.isArray;\n  globalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n    return expr\n      && typeof expr === 'object'\n      && typeof expr.length === 'number'\n      && expr.length >= 0\n      && Math.trunc(expr.length) === expr.length;\n  };\n\n  globalScope[\"isDefined\"] = function isDefined(expr) {\n    return typeof expr !== \"undefined\";\n  };\n\n  globalScope[\"isConstant\"] = function isConstant(expr) {\n    return false;\n  };\n\n  globalScope[\"unchecked\"] = function unchecked(expr) {\n    return expr;\n  };\n\n  globalScope[\"fmod\"] = function fmod(x, y) {\n    return x % y;\n  };\n\n  globalScope[\"fmodf\"] = function fmodf(x, y) {\n    return Math.fround(x % y);\n  };\n\n  globalScope[\"JSMath\"] = Math;\n\n  Object.defineProperties(globalScope[\"JSMath\"], {\n    sincos_sin: { value: 0.0, writable: true },\n    sincos_cos: { value: 0.0, writable: true },\n    signbit: {\n      value: function signbit(x) {\n        F64[0] = x; return Boolean(U64[1] >>> 31);\n      }\n    },\n    sincos: {\n      value: function sincos(x) {\n        this.sincos_sin = Math.sin(x);\n        this.sincos_cos = Math.cos(x);\n      }\n    },\n    exp2: {\n      value: function exp2(x) {\n        return Math.pow(2, x);\n      }\n    }\n  });\n\n  globalScope[\"unmanaged\"] = function() { /* nop */ };\n\n  globalScope[\"trace\"] = function(message, n) {\n    if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n    console.error(\"trace: \" + message);\n  };\n} else {\n  console.warn(\"compiler mismatch: std/portable included twice\");\n}\n", "export * from \"binaryen\";\nexport { default } from \"binaryen\";\n", "/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nimport binaryen from \"../../lib/binaryen.js\";\n\nexport const {\n  _BinaryenTypeCreate,\n  _BinaryenTypeArity,\n  _BinaryenTypeExpand,\n  _BinaryenTypeGetHeapType,\n  _BinaryenTypeFromHeapType,\n  _BinaryenTypeIsNullable,\n\n  _BinaryenTypeFuncref,\n  _BinaryenTypeExternref,\n  _BinaryenTypeAnyref,\n  _BinaryenTypeEqref,\n  _BinaryenTypeI31ref,\n  _BinaryenTypeDataref,\n  _BinaryenTypeStringref,\n  _BinaryenTypeStringviewWTF8,\n  _BinaryenTypeStringviewWTF16,\n  _BinaryenTypeStringviewIter,\n\n  _BinaryenHeapTypeFunc,\n  _BinaryenHeapTypeExt,\n  _BinaryenHeapTypeAny,\n  _BinaryenHeapTypeEq,\n  _BinaryenHeapTypeI31,\n  _BinaryenHeapTypeData,\n  _BinaryenHeapTypeString,\n  _BinaryenHeapTypeStringviewWTF8,\n  _BinaryenHeapTypeStringviewWTF16,\n  _BinaryenHeapTypeStringviewIter,\n\n  _BinaryenModuleCreate,\n  _BinaryenModuleDispose,\n\n  _BinaryenSizeofLiteral,\n  _BinaryenLiteralInt32,\n  _BinaryenLiteralInt64,\n  _BinaryenLiteralFloat32,\n  _BinaryenLiteralFloat64,\n  _BinaryenLiteralVec128,\n  _BinaryenLiteralFloat32Bits,\n  _BinaryenLiteralFloat64Bits,\n\n  _BinaryenExpressionGetId,\n  _BinaryenExpressionGetType,\n  _BinaryenExpressionSetType,\n  _BinaryenExpressionPrint,\n  _BinaryenExpressionCopy,\n  _BinaryenExpressionFinalize,\n\n  _BinaryenBlock,\n  _BinaryenBlockGetName,\n  _BinaryenBlockSetName,\n  _BinaryenBlockGetNumChildren,\n  _BinaryenBlockGetChildAt,\n  _BinaryenBlockSetChildAt,\n  _BinaryenBlockAppendChild,\n  _BinaryenBlockInsertChildAt,\n  _BinaryenBlockRemoveChildAt,\n\n  _BinaryenIf,\n  _BinaryenIfGetCondition,\n  _BinaryenIfSetCondition,\n  _BinaryenIfGetIfTrue,\n  _BinaryenIfSetIfTrue,\n  _BinaryenIfGetIfFalse,\n  _BinaryenIfSetIfFalse,\n\n  _BinaryenLoop,\n  _BinaryenLoopGetName,\n  _BinaryenLoopSetName,\n  _BinaryenLoopGetBody,\n  _BinaryenLoopSetBody,\n\n  _BinaryenBreak,\n  _BinaryenBreakGetName,\n  _BinaryenBreakSetName,\n  _BinaryenBreakGetCondition,\n  _BinaryenBreakSetCondition,\n  _BinaryenBreakGetValue,\n  _BinaryenBreakSetValue,\n\n  _BinaryenSwitch,\n  _BinaryenSwitchGetNumNames,\n  _BinaryenSwitchGetNameAt,\n  _BinaryenSwitchSetNameAt,\n  _BinaryenSwitchAppendName,\n  _BinaryenSwitchInsertNameAt,\n  _BinaryenSwitchRemoveNameAt,\n  _BinaryenSwitchGetDefaultName,\n  _BinaryenSwitchSetDefaultName,\n  _BinaryenSwitchGetCondition,\n  _BinaryenSwitchSetCondition,\n  _BinaryenSwitchGetValue,\n  _BinaryenSwitchSetValue,\n\n  _BinaryenCall,\n  _BinaryenCallGetTarget,\n  _BinaryenCallSetTarget,\n  _BinaryenCallGetNumOperands,\n  _BinaryenCallGetOperandAt,\n  _BinaryenCallSetOperandAt,\n  _BinaryenCallAppendOperand,\n  _BinaryenCallInsertOperandAt,\n  _BinaryenCallRemoveOperandAt,\n  _BinaryenCallIsReturn,\n  _BinaryenCallSetReturn,\n  _BinaryenReturnCall,\n\n  _BinaryenCallIndirect,\n  _BinaryenCallIndirectGetTable,\n  _BinaryenCallIndirectSetTable,\n  _BinaryenCallIndirectGetTarget,\n  _BinaryenCallIndirectSetTarget,\n  _BinaryenCallIndirectGetNumOperands,\n  _BinaryenCallIndirectGetOperandAt,\n  _BinaryenCallIndirectSetOperandAt,\n  _BinaryenCallIndirectAppendOperand,\n  _BinaryenCallIndirectInsertOperandAt,\n  _BinaryenCallIndirectRemoveOperandAt,\n  _BinaryenCallIndirectIsReturn,\n  _BinaryenCallIndirectSetReturn,\n  _BinaryenReturnCallIndirect,\n\n  _BinaryenLocalGet,\n  _BinaryenLocalGetGetIndex,\n  _BinaryenLocalGetSetIndex,\n\n  _BinaryenLocalSet,\n  _BinaryenLocalSetIsTee,\n  _BinaryenLocalSetGetIndex,\n  _BinaryenLocalSetSetIndex,\n  _BinaryenLocalSetGetValue,\n  _BinaryenLocalSetSetValue,\n  _BinaryenLocalTee,\n\n  _BinaryenGlobalGet,\n  _BinaryenGlobalGetGetName,\n  _BinaryenGlobalGetSetName,\n\n  _BinaryenGlobalSet,\n  _BinaryenGlobalSetGetName,\n  _BinaryenGlobalSetSetName,\n  _BinaryenGlobalSetGetValue,\n  _BinaryenGlobalSetSetValue,\n\n  _BinaryenMemorySize,\n\n  _BinaryenMemoryGrow,\n  _BinaryenMemoryGrowGetDelta,\n  _BinaryenMemoryGrowSetDelta,\n\n  _BinaryenLoad,\n  _BinaryenLoadIsAtomic,\n  _BinaryenLoadSetAtomic,\n  _BinaryenLoadIsSigned,\n  _BinaryenLoadSetSigned,\n  _BinaryenLoadGetOffset,\n  _BinaryenLoadSetOffset,\n  _BinaryenLoadGetBytes,\n  _BinaryenLoadSetBytes,\n  _BinaryenLoadGetAlign,\n  _BinaryenLoadSetAlign,\n  _BinaryenLoadGetPtr,\n  _BinaryenLoadSetPtr,\n  _BinaryenAtomicLoad,\n\n  _BinaryenStore,\n  _BinaryenStoreIsAtomic,\n  _BinaryenStoreSetAtomic,\n  _BinaryenStoreGetBytes,\n  _BinaryenStoreSetBytes,\n  _BinaryenStoreGetOffset,\n  _BinaryenStoreSetOffset,\n  _BinaryenStoreGetAlign,\n  _BinaryenStoreSetAlign,\n  _BinaryenStoreGetPtr,\n  _BinaryenStoreSetPtr,\n  _BinaryenStoreGetValue,\n  _BinaryenStoreSetValue,\n  _BinaryenStoreGetValueType,\n  _BinaryenStoreSetValueType,\n  _BinaryenAtomicStore,\n\n  _BinaryenConst,\n  _BinaryenConstGetValueI32,\n  _BinaryenConstSetValueI32,\n  _BinaryenConstGetValueI64Low,\n  _BinaryenConstSetValueI64Low,\n  _BinaryenConstGetValueI64High,\n  _BinaryenConstSetValueI64High,\n  _BinaryenConstGetValueF32,\n  _BinaryenConstSetValueF32,\n  _BinaryenConstGetValueF64,\n  _BinaryenConstSetValueF64,\n  _BinaryenConstGetValueV128,\n  _BinaryenConstSetValueV128,\n\n  _BinaryenUnary,\n  _BinaryenUnaryGetOp,\n  _BinaryenUnarySetOp,\n  _BinaryenUnaryGetValue,\n  _BinaryenUnarySetValue,\n\n  _BinaryenBinary,\n  _BinaryenBinaryGetOp,\n  _BinaryenBinarySetOp,\n  _BinaryenBinaryGetLeft,\n  _BinaryenBinarySetLeft,\n  _BinaryenBinaryGetRight,\n  _BinaryenBinarySetRight,\n\n  _BinaryenSelect,\n  _BinaryenSelectGetIfTrue,\n  _BinaryenSelectSetIfTrue,\n  _BinaryenSelectGetIfFalse,\n  _BinaryenSelectSetIfFalse,\n  _BinaryenSelectGetCondition,\n  _BinaryenSelectSetCondition,\n\n  _BinaryenDrop,\n  _BinaryenDropGetValue,\n  _BinaryenDropSetValue,\n\n  _BinaryenReturn,\n  _BinaryenReturnGetValue,\n  _BinaryenReturnSetValue,\n\n  _BinaryenNop,\n\n  _BinaryenUnreachable,\n\n  _BinaryenAtomicRMW,\n  _BinaryenAtomicRMWGetOp,\n  _BinaryenAtomicRMWSetOp,\n  _BinaryenAtomicRMWGetBytes,\n  _BinaryenAtomicRMWSetBytes,\n  _BinaryenAtomicRMWGetOffset,\n  _BinaryenAtomicRMWSetOffset,\n  _BinaryenAtomicRMWGetPtr,\n  _BinaryenAtomicRMWSetPtr,\n  _BinaryenAtomicRMWGetValue,\n  _BinaryenAtomicRMWSetValue,\n\n  _BinaryenAtomicCmpxchg,\n  _BinaryenAtomicCmpxchgGetBytes,\n  _BinaryenAtomicCmpxchgSetBytes,\n  _BinaryenAtomicCmpxchgGetOffset,\n  _BinaryenAtomicCmpxchgSetOffset,\n  _BinaryenAtomicCmpxchgGetPtr,\n  _BinaryenAtomicCmpxchgSetPtr,\n  _BinaryenAtomicCmpxchgGetExpected,\n  _BinaryenAtomicCmpxchgSetExpected,\n  _BinaryenAtomicCmpxchgGetReplacement,\n  _BinaryenAtomicCmpxchgSetReplacement,\n\n  _BinaryenAtomicWait,\n  _BinaryenAtomicWaitGetPtr,\n  _BinaryenAtomicWaitSetPtr,\n  _BinaryenAtomicWaitGetExpected,\n  _BinaryenAtomicWaitSetExpected,\n  _BinaryenAtomicWaitGetTimeout,\n  _BinaryenAtomicWaitSetTimeout,\n  _BinaryenAtomicWaitGetExpectedType,\n  _BinaryenAtomicWaitSetExpectedType,\n\n  _BinaryenAtomicNotify,\n  _BinaryenAtomicNotifyGetPtr,\n  _BinaryenAtomicNotifySetPtr,\n  _BinaryenAtomicNotifyGetNotifyCount,\n  _BinaryenAtomicNotifySetNotifyCount,\n\n  _BinaryenAtomicFence,\n  _BinaryenAtomicFenceGetOrder,\n  _BinaryenAtomicFenceSetOrder,\n\n  _BinaryenSIMDExtract,\n  _BinaryenSIMDExtractGetOp,\n  _BinaryenSIMDExtractSetOp,\n  _BinaryenSIMDExtractGetVec,\n  _BinaryenSIMDExtractSetVec,\n  _BinaryenSIMDExtractGetIndex,\n  _BinaryenSIMDExtractSetIndex,\n\n  _BinaryenSIMDReplace,\n  _BinaryenSIMDReplaceGetOp,\n  _BinaryenSIMDReplaceSetOp,\n  _BinaryenSIMDReplaceGetVec,\n  _BinaryenSIMDReplaceSetVec,\n  _BinaryenSIMDReplaceGetIndex,\n  _BinaryenSIMDReplaceSetIndex,\n  _BinaryenSIMDReplaceGetValue,\n  _BinaryenSIMDReplaceSetValue,\n\n  _BinaryenSIMDShuffle,\n  _BinaryenSIMDShuffleGetLeft,\n  _BinaryenSIMDShuffleSetLeft,\n  _BinaryenSIMDShuffleGetRight,\n  _BinaryenSIMDShuffleSetRight,\n  _BinaryenSIMDShuffleGetMask,\n  _BinaryenSIMDShuffleSetMask,\n\n  _BinaryenSIMDTernary,\n  _BinaryenSIMDTernaryGetOp,\n  _BinaryenSIMDTernarySetOp,\n  _BinaryenSIMDTernaryGetA,\n  _BinaryenSIMDTernarySetA,\n  _BinaryenSIMDTernaryGetB,\n  _BinaryenSIMDTernarySetB,\n  _BinaryenSIMDTernaryGetC,\n  _BinaryenSIMDTernarySetC,\n\n  _BinaryenSIMDShift,\n  _BinaryenSIMDShiftGetOp,\n  _BinaryenSIMDShiftSetOp,\n  _BinaryenSIMDShiftGetVec,\n  _BinaryenSIMDShiftSetVec,\n  _BinaryenSIMDShiftGetShift,\n  _BinaryenSIMDShiftSetShift,\n\n  _BinaryenSIMDLoad,\n  _BinaryenSIMDLoadGetOp,\n  _BinaryenSIMDLoadSetOp,\n  _BinaryenSIMDLoadGetOffset,\n  _BinaryenSIMDLoadSetOffset,\n  _BinaryenSIMDLoadGetAlign,\n  _BinaryenSIMDLoadSetAlign,\n  _BinaryenSIMDLoadGetPtr,\n  _BinaryenSIMDLoadSetPtr,\n\n  _BinaryenSIMDLoadStoreLane,\n  _BinaryenSIMDLoadStoreLaneGetOp,\n  _BinaryenSIMDLoadStoreLaneSetOp,\n  _BinaryenSIMDLoadStoreLaneGetOffset,\n  _BinaryenSIMDLoadStoreLaneSetOffset,\n  _BinaryenSIMDLoadStoreLaneGetAlign,\n  _BinaryenSIMDLoadStoreLaneSetAlign,\n  _BinaryenSIMDLoadStoreLaneGetIndex,\n  _BinaryenSIMDLoadStoreLaneSetIndex,\n  _BinaryenSIMDLoadStoreLaneGetPtr,\n  _BinaryenSIMDLoadStoreLaneSetPtr,\n  _BinaryenSIMDLoadStoreLaneGetVec,\n  _BinaryenSIMDLoadStoreLaneSetVec,\n  _BinaryenSIMDLoadStoreLaneIsStore,\n\n  _BinaryenMemoryInit,\n  _BinaryenMemoryInitGetSegment,\n  _BinaryenMemoryInitSetSegment,\n  _BinaryenMemoryInitGetDest,\n  _BinaryenMemoryInitSetDest,\n  _BinaryenMemoryInitGetOffset,\n  _BinaryenMemoryInitSetOffset,\n  _BinaryenMemoryInitGetSize,\n  _BinaryenMemoryInitSetSize,\n\n  _BinaryenDataDrop,\n  _BinaryenDataDropGetSegment,\n  _BinaryenDataDropSetSegment,\n\n  _BinaryenMemoryCopy,\n  _BinaryenMemoryCopyGetDest,\n  _BinaryenMemoryCopySetDest,\n  _BinaryenMemoryCopyGetSource,\n  _BinaryenMemoryCopySetSource,\n  _BinaryenMemoryCopyGetSize,\n  _BinaryenMemoryCopySetSize,\n\n  _BinaryenMemoryFill,\n  _BinaryenMemoryFillGetDest,\n  _BinaryenMemoryFillSetDest,\n  _BinaryenMemoryFillGetValue,\n  _BinaryenMemoryFillSetValue,\n  _BinaryenMemoryFillGetSize,\n  _BinaryenMemoryFillSetSize,\n\n  _BinaryenRefNull,\n\n  _BinaryenRefIs,\n  _BinaryenRefIsGetOp,\n  _BinaryenRefIsSetOp,\n  _BinaryenRefIsGetValue,\n  _BinaryenRefIsSetValue,\n\n  _BinaryenRefAs,\n  _BinaryenRefAsGetOp,\n  _BinaryenRefAsSetOp,\n  _BinaryenRefAsGetValue,\n  _BinaryenRefAsSetValue,\n\n  _BinaryenRefFunc,\n  _BinaryenRefFuncGetFunc,\n  _BinaryenRefFuncSetFunc,\n\n  _BinaryenRefEq,\n  _BinaryenRefEqGetLeft,\n  _BinaryenRefEqSetLeft,\n  _BinaryenRefEqGetRight,\n  _BinaryenRefEqSetRight,\n\n  _BinaryenTableGet,\n  _BinaryenTableGetGetTable,\n  _BinaryenTableGetSetTable,\n  _BinaryenTableGetGetIndex,\n  _BinaryenTableGetSetIndex,\n\n  _BinaryenTableSet,\n  _BinaryenTableSetGetTable,\n  _BinaryenTableSetSetTable,\n  _BinaryenTableSetGetIndex,\n  _BinaryenTableSetSetIndex,\n  _BinaryenTableSetGetValue,\n  _BinaryenTableSetSetValue,\n\n  _BinaryenTableSize,\n  _BinaryenTableSizeGetTable,\n  _BinaryenTableSizeSetTable,\n\n  _BinaryenTableGrow,\n  _BinaryenTableGrowGetTable,\n  _BinaryenTableGrowSetTable,\n  _BinaryenTableGrowGetValue,\n  _BinaryenTableGrowSetValue,\n  _BinaryenTableGrowGetDelta,\n  _BinaryenTableGrowSetDelta,\n\n  _BinaryenTry,\n  _BinaryenTryGetName,\n  _BinaryenTrySetName,\n  _BinaryenTryGetBody,\n  _BinaryenTrySetBody,\n  _BinaryenTryGetNumCatchTags,\n  _BinaryenTryGetNumCatchBodies,\n  _BinaryenTryGetCatchTagAt,\n  _BinaryenTrySetCatchTagAt,\n  _BinaryenTryAppendCatchTag,\n  _BinaryenTryInsertCatchTagAt,\n  _BinaryenTryRemoveCatchTagAt,\n  _BinaryenTryGetCatchBodyAt,\n  _BinaryenTrySetCatchBodyAt,\n  _BinaryenTryAppendCatchBody,\n  _BinaryenTryInsertCatchBodyAt,\n  _BinaryenTryRemoveCatchBodyAt,\n  _BinaryenTryHasCatchAll,\n  _BinaryenTryGetDelegateTarget,\n  _BinaryenTrySetDelegateTarget,\n  _BinaryenTryIsDelegate,\n\n  _BinaryenThrow,\n  _BinaryenThrowGetTag,\n  _BinaryenThrowSetTag,\n  _BinaryenThrowGetNumOperands,\n  _BinaryenThrowGetOperandAt,\n  _BinaryenThrowSetOperandAt,\n  _BinaryenThrowAppendOperand,\n  _BinaryenThrowInsertOperandAt,\n  _BinaryenThrowRemoveOperandAt,\n\n  _BinaryenRethrow,\n  _BinaryenRethrowGetTarget,\n  _BinaryenRethrowSetDepth,\n\n  _BinaryenTupleMake,\n  _BinaryenTupleMakeGetNumOperands,\n  _BinaryenTupleMakeGetOperandAt,\n  _BinaryenTupleMakeSetOperandAt,\n  _BinaryenTupleMakeAppendOperand,\n  _BinaryenTupleMakeInsertOperandAt,\n  _BinaryenTupleMakeRemoveOperandAt,\n\n  _BinaryenTupleExtract,\n  _BinaryenTupleExtractGetTuple,\n  _BinaryenTupleExtractSetTuple,\n  _BinaryenTupleExtractGetIndex,\n  _BinaryenTupleExtractSetIndex,\n\n  _BinaryenPop,\n\n  _BinaryenI31New,\n  _BinaryenI31NewGetValue,\n  _BinaryenI31NewSetValue,\n\n  _BinaryenI31Get,\n  _BinaryenI31GetGetI31,\n  _BinaryenI31GetSetI31,\n  _BinaryenI31GetIsSigned,\n  _BinaryenI31GetSetSigned,\n\n  _BinaryenAddFunction,\n  _BinaryenGetFunction,\n  _BinaryenRemoveFunction,\n  _BinaryenGetNumFunctions,\n  _BinaryenGetFunctionByIndex,\n\n  _BinaryenFunctionGetName,\n  _BinaryenFunctionGetParams,\n  _BinaryenFunctionGetResults,\n  _BinaryenFunctionGetNumVars,\n  _BinaryenFunctionGetVar,\n  _BinaryenFunctionGetNumLocals,\n  _BinaryenFunctionHasLocalName,\n  _BinaryenFunctionGetLocalName,\n  _BinaryenFunctionSetLocalName,\n  _BinaryenFunctionGetBody,\n  _BinaryenFunctionSetBody,\n  _BinaryenFunctionOptimize,\n  _BinaryenFunctionRunPasses,\n  _BinaryenFunctionSetDebugLocation,\n\n  _BinaryenAddFunctionImport,\n  _BinaryenAddTableImport,\n  _BinaryenAddMemoryImport,\n  _BinaryenAddGlobalImport,\n  _BinaryenAddTagImport,\n\n  _BinaryenAddFunctionExport,\n  _BinaryenAddTableExport,\n  _BinaryenAddMemoryExport,\n  _BinaryenAddGlobalExport,\n  _BinaryenAddTagExport,\n  _BinaryenGetExport,\n  _BinaryenRemoveExport,\n  _BinaryenGetNumExports,\n  _BinaryenGetExportByIndex,\n  _BinaryenExportGetKind,\n  _BinaryenExportGetName,\n  _BinaryenExportGetValue,\n\n  _BinaryenAddGlobal,\n  _BinaryenGetGlobal,\n  _BinaryenRemoveGlobal,\n  _BinaryenGetNumGlobals,\n  _BinaryenGetGlobalByIndex,\n\n  _BinaryenGlobalGetName,\n  _BinaryenGlobalGetType,\n  _BinaryenGlobalIsMutable,\n  _BinaryenGlobalGetInitExpr,\n\n  _BinaryenAddTag,\n  _BinaryenGetTag,\n  _BinaryenRemoveTag,\n\n  _BinaryenTagGetName,\n  _BinaryenTagGetParams,\n  _BinaryenTagGetResults,\n\n  _BinaryenAddTable,\n  _BinaryenRemoveTable,\n  _BinaryenGetNumTables,\n  _BinaryenGetTable,\n  _BinaryenGetTableByIndex,\n\n  _BinaryenTableGetName,\n  _BinaryenTableSetName,\n  _BinaryenTableGetInitial,\n  _BinaryenTableSetInitial,\n  _BinaryenTableHasMax,\n  _BinaryenTableGetMax,\n  _BinaryenTableSetMax,\n\n  _BinaryenAddActiveElementSegment,\n  _BinaryenAddPassiveElementSegment,\n  _BinaryenRemoveElementSegment,\n  _BinaryenGetNumElementSegments,\n  _BinaryenGetElementSegment,\n  _BinaryenGetElementSegmentByIndex,\n\n  _BinaryenSetMemory,\n  _BinaryenGetNumMemorySegments,\n  _BinaryenGetMemorySegmentByteOffset,\n  _BinaryenGetMemorySegmentByteLength,\n  _BinaryenCopyMemorySegmentData,\n\n  _BinaryenSetStart,\n\n  _BinaryenModuleParse,\n  _BinaryenModulePrint,\n  _BinaryenModulePrintAsmjs,\n  _BinaryenModuleValidate,\n  _BinaryenModuleOptimize,\n  _BinaryenModuleRunPasses,\n  _BinaryenModuleAutoDrop,\n  _BinaryenSizeofAllocateAndWriteResult,\n  _BinaryenModuleAllocateAndWrite,\n  _BinaryenModuleAllocateAndWriteText,\n  _BinaryenModuleAllocateAndWriteStackIR,\n  _BinaryenModuleRead,\n  _BinaryenModuleInterpret,\n  _BinaryenModuleAddDebugInfoFileName,\n  _BinaryenModuleGetDebugInfoFileName,\n  _BinaryenModuleGetFeatures,\n  _BinaryenModuleSetFeatures,\n\n  _BinaryenAddCustomSection,\n\n  _BinaryenExpressionGetSideEffects,\n\n  _RelooperCreate,\n  _RelooperAddBlock,\n  _RelooperAddBranch,\n  _RelooperAddBlockWithSwitch,\n  _RelooperAddBranchForSwitch,\n  _RelooperRenderAndDispose,\n\n  _ExpressionRunnerCreate,\n  _ExpressionRunnerSetLocalValue,\n  _ExpressionRunnerSetGlobalValue,\n  _ExpressionRunnerRunAndDispose,\n\n  _BinaryenGetOptimizeLevel,\n  _BinaryenSetOptimizeLevel,\n  _BinaryenGetShrinkLevel,\n  _BinaryenSetShrinkLevel,\n  _BinaryenGetDebugInfo,\n  _BinaryenSetDebugInfo,\n  _BinaryenGetLowMemoryUnused,\n  _BinaryenSetLowMemoryUnused,\n  _BinaryenGetZeroFilledMemory,\n  _BinaryenSetZeroFilledMemory,\n  _BinaryenGetFastMath,\n  _BinaryenSetFastMath,\n  _BinaryenGetPassArgument,\n  _BinaryenSetPassArgument,\n  _BinaryenClearPassArguments,\n  _BinaryenGetAlwaysInlineMaxSize,\n  _BinaryenSetAlwaysInlineMaxSize,\n  _BinaryenGetFlexibleInlineMaxSize,\n  _BinaryenSetFlexibleInlineMaxSize,\n  _BinaryenGetOneCallerInlineMaxSize,\n  _BinaryenSetOneCallerInlineMaxSize,\n  _BinaryenGetAllowInliningFunctionsWithLoops,\n  _BinaryenSetAllowInliningFunctionsWithLoops,\n\n  // Helpers\n\n  _malloc,\n  _free,\n  __i32_store8,\n  __i32_store16,\n  __i32_store,\n  __f32_store,\n  __f64_store,\n  __i32_load8_s,\n  __i32_load8_u,\n  __i32_load16_s,\n  __i32_load16_u,\n  __i32_load,\n  __f32_load,\n  __f64_load\n\n} = binaryen;\n\nexport default binaryen;\n", "/**\n * @fileoverview Floating point glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobalThis.f32_as_i32 = function f32_as_i32(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobalThis.i32_as_f32 = function i32_as_f32(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobalThis.f64_as_i64 = function f64_as_i64(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobalThis.i64_as_f64 = function i64_as_f64(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n", "/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nimport Long from \"long\";\n\nglobalThis.i64_zero    = Long.ZERO;\nglobalThis.i64_one     = Long.ONE;\nglobalThis.i64_neg_one = Long.fromInt(-1);\nglobalThis.i64_minimum = Long.MIN_VALUE;\nglobalThis.i64_maximum = Long.MAX_VALUE;\n\nglobalThis.i64_is = function i64_is(value) {\n  return Long.isLong(value);\n};\n\nglobalThis.i64_new = function i64_new(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobalThis.i64_low = function i64_low(value) {\n  return value.low;\n};\n\nglobalThis.i64_high = function i64_high(value) {\n  return value.high;\n};\n\nglobalThis.i64_not = function i64_not(value) {\n  return value.not();\n};\n\nglobalThis.i64_neg = function i64_neg(value) {\n  return value.neg();\n};\n\nglobalThis.i64_clz = function i64_clz(value) {\n  return value.clz();\n};\n\nglobalThis.i64_ctz = function i64_ctz(value) {\n  return value.ctz();\n};\n\nglobalThis.i64_add = function i64_add(left, right) {\n  return left.add(right);\n};\n\nglobalThis.i64_sub = function i64_sub(left, right) {\n  return left.sub(right);\n};\n\nglobalThis.i64_mul = function i64_mul(left, right) {\n  return left.mul(right);\n};\n\nglobalThis.i64_pow = function i64_pow(left, right) {\n  var rightLo = right.low;\n  var rightHi = right.high;\n  if (rightHi <= 0) {\n    if (rightHi < 0) {\n      if (left.eq(globalThis.i64_neg_one)) {\n        return rightLo & 1 ? left : Long.ONE;\n      }\n      return left.eq(Long.ONE) ? left : Long.ZERO;\n    }\n    if (rightLo == 0) return Long.ONE;\n    if (rightLo == 1) return left;\n    if (rightLo == 2) return left.mul(left);\n  }\n  var result = Long.ONE;\n  while (rightLo | rightHi) {\n    if (rightLo & 1) result = result.mul(left);\n    right = right.shru(1);\n    left  = left.mul(left);\n    rightLo = right.low;\n    rightHi = right.high;\n  }\n  return result;\n};\n\nglobalThis.i64_div = function i64_div(left, right) {\n  return left.div(right);\n};\n\nglobalThis.i64_div_u = function i64_div_u(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobalThis.i64_rem = function i64_rem(left, right) {\n  return left.mod(right);\n};\n\nglobalThis.i64_rem_u = function i64_rem_u(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobalThis.i64_and = function i64_and(left, right) {\n  return left.and(right);\n};\n\nglobalThis.i64_or = function i64_or(left, right) {\n  return left.or(right);\n};\n\nglobalThis.i64_xor = function i64_xor(left, right) {\n  return left.xor(right);\n};\n\nglobalThis.i64_shl = function i64_shl(left, right) {\n  return left.shl(right);\n};\n\nglobalThis.i64_shr = function i64_shr(left, right) {\n  return left.shr(right);\n};\n\nglobalThis.i64_shr_u = function i64_shr_u(left, right) {\n  return left.shru(right);\n};\n\nglobalThis.i64_eq = function i64_eq(left, right) {\n  return left.eq(right);\n};\n\nglobalThis.i64_ne = function i64_ne(left, right) {\n  return left.ne(right);\n};\n\nglobalThis.i64_ge = function i64_ge(left, right) {\n  return left.ge(right);\n};\n\nglobalThis.i64_ge_u = function i64_ge_u(left, right) {\n  return left.toUnsigned().ge(right.toUnsigned());\n};\n\nglobalThis.i64_gt = function i64_gt(left, right) {\n  return left.gt(right);\n};\n\nglobalThis.i64_gt_u = function i64_gt_u(left, right) {\n  return left.toUnsigned().gt(right.toUnsigned());\n};\n\nglobalThis.i64_le = function i64_le(left, right) {\n  return left.le(right);\n};\n\nglobalThis.i64_le_u = function i64_le_u(left, right) {\n  return left.toUnsigned().le(right.toUnsigned());\n};\n\nglobalThis.i64_lt = function i64_lt(left, right) {\n  return left.lt(right);\n};\n\nglobalThis.i64_lt_u = function i64_lt_u(left, right) {\n  return left.toUnsigned().lt(right.toUnsigned());\n};\n\nglobalThis.i64_align = function i64_align(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobalThis.i64_signbit = function i64_signbit(value) {\n  return Boolean(value.high >>> 31);\n};\n\nglobalThis.i64_is_i8 = function i64_is_i8(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobalThis.i64_is_i16 = function i64_is_i16(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobalThis.i64_is_i32 = function i64_is_i32(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobalThis.i64_is_u8 = function i64_is_u8(value) {\n  return value.high === 0 && (value.low >>> 0) <= u8.MAX_VALUE;\n};\n\nglobalThis.i64_is_u16 = function i64_is_u16(value) {\n  return value.high === 0 && (value.low >>> 0) <= u16.MAX_VALUE;\n};\n\nglobalThis.i64_is_u32 = function i64_is_u32(value) {\n  return value.high === 0;\n};\n\nglobalThis.i64_is_bool = function i64_is_bool(value) {\n  return (value.high | (value.low & ~1)) === 0;\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobalThis.i64_is_f32 = function i64_is_f32(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobalThis.i64_is_f64 = function i64_is_f64(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobalThis.i64_to_f32 = function i64_to_f32(value) {\n  return globalThis.Math.fround(value.toNumber());\n};\n\nglobalThis.i64_to_f64 = function i64_to_f64(value) {\n  return value.toNumber();\n};\n\nglobalThis.i64_to_string = function i64_to_string(value, unsigned) {\n  return unsigned ? value.toUnsigned().toString() : value.toString();\n};\n\nglobalThis.i64_clone = function i64_clone(value) {\n  return Long.fromBits(value.low, value.high, value.unsigned);\n};\n", "/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobalThis.Map_keys = function Map_keys(map) {\n  return Array.from(map.keys());\n};\n\nglobalThis.Map_values = function Map_values(map) {\n  return Array.from(map.values());\n};\n\nglobalThis.Set_values = function Set_values(set) {\n  return Array.from(set.values());\n};\n", "// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9, // see: https://github.com/WebAssembly/multi-value\n  /** Garbage collection. */\n  GC = 1 << 10, // see: https://github.com/WebAssembly/gc\n  /** Memory64. */\n  MEMORY64 = 1 << 11, // see: https://github.com/WebAssembly/memory64\n  /** Function references. */\n  FUNCTION_REFERENCES = 1 << 12, // see: https://github.com/WebAssembly/function-references\n  /** Relaxed SIMD. */\n  RELAXED_SIMD = 1 << 13, // see: https://github.com/WebAssembly/relaxed-simd\n  /** Extended const expressions. */\n  EXTENDED_CONST = 1 << 14 // see: https://github.com/WebAssembly/extended-const\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n    case Feature.GC: return \"gc\";\n    case Feature.MEMORY64: return \"memory64\";\n  }\n  assert(false);\n  return \"\";\n}\n", "// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** Portable. */\n  JS = 0,\n  /** WebAssembly with 32-bit pointers. */\n  WASM32 = 1,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64 = 2,\n}\n", "// This file is shared with the compiler and must remain portable\n\n/** Runtime types. */\nexport enum Runtime {\n  /** Simple bump allocator without GC. */\n  Stub = 0,\n  /** Stop the world semi-automatic GC. */\n  Minimal = 1,\n  /** incremental GC. */\n  Incremental = 2,\n}\n", "// This file is shared with the compiler and must remain portable\n\n// \u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 Typeinfo interpretation \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// \u251C\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2524 \u25C4\u2500 __rtti_base\n// \u2502                             count                             \u2502\n// \u255E\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2510\n// \u2502                      Typeinfo#flags [id=0]                    \u2502 id < count\n// \u251C \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2524\n// \u2502                      Typeinfo#base  [id=0]                    \u2502\n// \u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n// \u2502                              ...                              \u2502\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type has no outgoing pointers. */\n  POINTERFREE = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n", "/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport const enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a `override` modifier.  */\n  OVERRIDE = 1 << 13,\n\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITELY_ASSIGNED = 1 << 14,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 15,\n  /** Is generic. */\n  GENERIC = 1 << 16,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 17,\n  /** Is an instance member. */\n  INSTANCE = 1 << 18,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 19,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 20,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 21,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 22,\n  /** Is compiled. */\n  COMPILED = 1 << 23,\n  /** Did error. */\n  ERRORED = 1 << 24,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 25,\n  /** Is scoped. */\n  SCOPED = 1 << 26,\n  /** Is a stub. */\n  STUB = 1 << 27,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 28,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 29,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 30\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexport const STUB_DELIMITER = \"@\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const funcref = \"funcref\";\n  export const externref = \"externref\";\n  export const anyref = \"anyref\";\n  export const eqref = \"eqref\";\n  export const i31ref = \"i31ref\";\n  export const dataref = \"dataref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  export const nonnull = \"nonnull\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_RUNTIME = \"ASC_RUNTIME\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_EXPORT_RUNTIME = \"ASC_EXPORT_RUNTIME\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  export const ASC_FEATURE_GC = \"ASC_FEATURE_GC\";\n  export const ASC_FEATURE_MEMORY64 = \"ASC_FEATURE_MEMORY64\";\n  export const ASC_FEATURE_FUNCTION_REFERENCES = \"ASC_FEATURE_FUNCTION_REFERENCES\";\n  export const ASC_FEATURE_RELAXED_SIMD = \"ASC_FEATURE_RELAXED_SIMD\";\n  export const ASC_FEATURE_EXTENDED_CONST = \"ASC_FEATURE_EXTENDED_CONST\";\n  export const ASC_VERSION_MAJOR = \"ASC_VERSION_MAJOR\";\n  export const ASC_VERSION_MINOR = \"ASC_VERSION_MINOR\";\n  export const ASC_VERSION_PATCH = \"ASC_VERSION_PATCH\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Funcref = \"Funcref\";\n  export const Externref = \"Externref\";\n  export const Anyref = \"Anyref\";\n  export const Eqref = \"Eqref\";\n  export const I31ref = \"I31ref\";\n  export const Dataref = \"Dataref\";\n  export const String = \"String\";\n  export const RegExp = \"RegExp\";\n  export const Object = \"Object\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const Function = \"Function\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const TemplateStringsArray = \"TemplateStringsArray\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const ipow32 = \"ipow32\";\n  export const ipow64 = \"ipow64\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const new_ = \"__new\";\n  export const renew = \"__renew\";\n  export const link = \"__link\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const newBuffer = \"__newBuffer\";\n  export const newArray = \"__newArray\";\n  export const BLOCK = \"~lib/rt/common/BLOCK\";\n  export const OBJECT = \"~lib/rt/common/OBJECT\";\n  // memory & table\n  export const DefaultMemory = \"0\";\n  export const DefaultTable = \"0\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Runtime } from \"../std/assembly/shared/runtime\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n", "// GENERATED FILE. DO NOT EDIT.\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented_0 = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 104,\n  Module_requires_at_least_0_pages_of_initial_memory = 105,\n  Module_requires_at_least_0_pages_of_maximum_memory = 106,\n  Shared_memory_requires_maximum_memory_to_be_defined = 107,\n  Shared_memory_requires_feature_threads_to_be_enabled = 108,\n  Transform_0_1 = 109,\n  Start_function_name_0_is_invalid_or_conflicts_with_another_export = 110,\n  Element_0_not_found = 111,\n  Exchange_of_0_values_is_not_supported_by_all_embeddings = 112,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Type_0_cannot_be_nullable = 204,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_final_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Function_0_is_virtual_and_will_not_be_inlined = 228,\n  Property_0_only_has_a_setter_and_is_missing_a_getter = 229,\n  _0_keyword_cannot_be_used_here = 230,\n  A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final = 231,\n  Property_0_is_always_assigned_before_being_used = 233,\n  Expression_does_not_compile_to_a_value_at_runtime = 234,\n  Only_variables_functions_and_enums_become_WebAssembly_module_exports = 235,\n  Literal_0_does_not_fit_into_i64_or_u64_types = 236,\n  Index_signature_accessors_in_type_0_differ_in_types = 237,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Explicitly_returning_constructor_drops_this_allocation = 905,\n  Unnecessary_definite_assignment = 906,\n  _NaN_does_not_compare_equal_to_any_other_value_including_itself_Use_isNaN_x_instead = 907,\n  Comparison_with_0_0_is_sign_insensitive_Use_Object_is_x_0_0_if_the_sign_matters = 908,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  _0_modifier_cannot_appear_on_class_elements_of_this_kind = 1031,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  A_default_export_can_only_be_used_in_a_module = 1319,\n  An_expression_of_type_0_cannot_be_tested_for_truthiness = 1345,\n  An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal = 1351,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  An_interface_can_only_extend_an_interface = 2312,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Property_0_is_private_in_type_1_but_not_in_type_2 = 2325,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _this_cannot_be_referenced_in_constructor_arguments = 2333,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  _super_cannot_be_referenced_in_constructor_arguments = 2336,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  Getter_and_setter_accessors_do_not_agree_in_visibility = 2379,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Overload_signatures_must_all_be_public_private_or_protected = 2385,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  This_overload_signature_is_not_compatible_with_its_implementation_signature = 2394,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Property_0_in_type_1_is_not_assignable_to_the_same_property_in_base_type_2 = 2416,\n  A_class_can_only_implement_an_interface = 2422,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Types_have_separate_declarations_of_a_private_property_0 = 2442,\n  Property_0_is_protected_in_type_1_but_public_in_type_2 = 2444,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  Variable_0_used_before_its_declaration = 2448,\n  Cannot_redeclare_block_scoped_variable_0 = 2451,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_alias_0_circularly_references_itself = 2456,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2 = 2515,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned = 2564,\n  Property_0_is_used_before_being_assigned = 2565,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0 = 4117,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented: {0}\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n    case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n    case 107: return \"Shared memory requires maximum memory to be defined.\";\n    case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n    case 109: return \"Transform '{0}': {1}\";\n    case 110: return \"Start function name '{0}' is invalid or conflicts with another export.\";\n    case 111: return \"Element '{0}' not found.\";\n    case 112: return \"Exchange of '{0}' values is not supported by all embeddings\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Type '{0}' cannot be nullable.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is final and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n    case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n    case 230: return \"'{0}' keyword cannot be used here.\";\n    case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n    case 233: return \"Property '{0}' is always assigned before being used.\";\n    case 234: return \"Expression does not compile to a value at runtime.\";\n    case 235: return \"Only variables, functions and enums become WebAssembly module exports.\";\n    case 236: return \"Literal '{0}' does not fit into 'i64' or 'u64' types.\";\n    case 237: return \"Index signature accessors in type '{0}' differ in types.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n    case 906: return \"Unnecessary definite assignment.\";\n    case 907: return \"'NaN' does not compare equal to any other value including itself. Use isNaN(x) instead.\";\n    case 908: return \"Comparison with -0.0 is sign insensitive. Use Object.is(x, -0.0) if the sign matters.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1031: return \"'{0}' modifier cannot appear on class elements of this kind.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 1319: return \"A default export can only be used in a module.\";\n    case 1345: return \"An expression of type '{0}' cannot be tested for truthiness.\";\n    case 1351: return \"An identifier or keyword cannot immediately follow a numeric literal.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2312: return \"An interface can only extend an interface.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2325: return \"Property '{0}' is private in type '{1}' but not in type '{2}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2333: return \"'this' cannot be referenced in constructor arguments.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2336: return \"'super' cannot be referenced in constructor arguments.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2385: return \"Overload signatures must all be public, private or protected.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2416: return \"Property '{0}' in type '{1}' is not assignable to the same property in base type '{2}'.\";\n    case 2422: return \"A class can only implement an interface.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2442: return \"Types have separate declarations of a private property '{0}'.\";\n    case 2444: return \"Property '{0}' is protected in type '{1}' but public in type '{2}'.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2448: return \"Variable '{0}' used before its declaration.\";\n    case 2451: return \"Cannot redeclare block-scoped variable '{0}'\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2456: return \"Type alias '{0}' circularly references itself.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2564: return \"Property '{0}' has no initializer and is not assigned in the constructor before 'this' is used or returned.\";\n    case 2565: return \"Property '{0}' is used before being assigned.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 4117: return \"This member cannot have an 'override' modifier because it is not declared in the base class '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n", "/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./util/binary\";\nexport * from \"./util/collections\";\nexport * from \"./util/math\";\nexport * from \"./util/path\";\nexport * from \"./util/terminal\";\nexport * from \"./util/text\";\nexport * from \"./util/vector\";\n", "/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return i32(buffer[offset    ])\n       | i32(buffer[offset + 1]) << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return i32(buffer[offset    ])\n       | i32(buffer[offset + 1]) << 8\n       | i32(buffer[offset + 2]) << 16\n       | i32(buffer[offset + 3]) << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Writes a 32-bit integer as a 64-bit integer to the specified buffer. */\nexport function writeI32AsI64(value: i32, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  writeI32(value, buffer, offset);\n  writeI32(unsigned || value >= 0 ? 0 : -1, buffer, offset + 4);\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Writes a 64-bit integer as a 32-bit integer to the specified buffer. */\nexport function writeI64AsI32(value: i64, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  assert(unsigned ? i64_is_u32(value) : i64_is_i32(value));\n  writeI32(i64_low(value), buffer, offset);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n\n/** Reads a 128-bit vector from the specified buffer. */\nexport function readV128(buffer: Uint8Array, offset: i32): Uint8Array {\n  return buffer.slice(offset, offset + 16);\n}\n\n/** Writes a 128-bit vector to the specified buffer. */\nexport function writeV128(value: Uint8Array, buffer: Uint8Array, offset: i32): void {\n  assert(value.length == 16);\n  buffer.set(value, offset);\n}\n", "/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\n/** Clone map. Typically used to track contextual type arguments. */\nexport function cloneMap<K,V>(map: Map<K,V> | null): Map<K,V> {\n  if (!ASC_TARGET) { // JS\n    // fast path for js target\n    return new Map<K,V>(map);\n  } else {\n    let out = new Map<K,V>();\n    if (map) {\n      // TODO: for (let [k, v] of map) {\n      for (let _keys = Map_keys(map), i = 0, k = _keys.length; i < k; ++i) {\n        let k = unchecked(_keys[i]);\n        let v = assert(map.get(k));\n        out.set(k, v);\n      }\n    }\n    return out;\n  }\n}\n\n/** Merge two maps in into new one. */\nexport function mergeMaps<K,V>(map1: Map<K,V>, map2: Map<K,V>): Map<K,V> {\n  if (!ASC_TARGET) { // JS\n    let out = new Map<K,V>(map1);\n    map2.forEach((v, k) => out.set(k, v));\n    return out;\n  } else {\n    let out = new Map<K,V>();\n    // TODO: for (let [k, v] of map1) {\n    for (let _keys = Map_keys(map1), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(map1.get(k));\n      out.set(k, v);\n    }\n    // TODO: for (let [k, v] of map2) {\n    for (let _keys = Map_keys(map2), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(map2.get(k));\n      out.set(k, v);\n    }\n    return out;\n  }\n}\n\n/** BitSet represent growable sequence of N bits. It's faster alternative of Set<i32> when elements\n * are not too much sparsed. Also it's more memory and cache efficient than Array<bool>.\n * The best way to use it for short bit sequences (less than 32*(2**16)).\n */\nexport class BitSet {\n  words!: Uint32Array;\n\n  constructor() {\n    this.clear();\n  }\n\n  get size(): i32 {\n    var count = 0;\n    var words = this.words;\n    for (let i = 0, len = words.length; i < len; i++) {\n      let word = unchecked(words[i]);\n      if (word) count += popcnt(word);\n    }\n    return count;\n  }\n\n  add(index: i32): this {\n    var idx = index >>> 5;\n    var words = this.words;\n    if (idx >= words.length) { // resize\n      this.words = new Uint32Array(idx + 16);\n      this.words.set(words);\n      words = this.words;\n    }\n    unchecked(words[idx] |= 1 << index);\n    return this;\n  }\n\n  delete(index: i32): void {\n    var idx = index >>> 5;\n    var words = this.words;\n    if (idx >= words.length) return;\n    unchecked(words[idx] &= ~(1 << index));\n  }\n\n  has(index: i32): bool {\n    var idx = index >>> 5;\n    var words = this.words;\n    if (idx >= words.length) return false;\n    return (unchecked(words[index >>> 5]) & (1 << index)) !== 0;\n  }\n\n  clear(): void {\n    this.words = new Uint32Array(16);\n  }\n\n  toArray(): i32[] {\n    var res = new Array<i32>(this.size);\n    for (let i = 0, p = 0, len = this.words.length; i < len; ++i) {\n      let word = unchecked(this.words[i]);\n      while (word) {\n        let mask = word & -word;\n        unchecked(res[p++] = (i << 5) + popcnt(mask - 1));\n        word ^= mask;\n      }\n    }\n    return res;\n  }\n\n  toString(): string {\n    return `BitSet { ${this.toArray()} }`;\n  }\n}\n", "/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n\nexport function accuratePow64(x: f64, y: f64): f64 {\n  if (!ASC_TARGET) { // ASC_TARGET == JS\n    // Engines like V8, WebKit and SpiderMonkey uses powi fast path if exponent is integer\n    // This speculative optimization leads to loose precisions like 10 ** 208 != 1e208\n    // or/and 10 ** -5 != 1e-5 anymore. For avoid this behaviour we are forcing exponent\n    // to fractional form and compensate this afterwards.\n    if (isFinite(y) && Math.abs(y) >= 2 && Math.trunc(y) == y) {\n      if (y < 0) {\n        return Math.pow(x, y + 0.5) / Math.pow(x, 0.5);\n      } else {\n        return Math.pow(x, y - 0.5) * Math.pow(x, 0.5);\n      }\n    }\n  }\n  return Math.pow(x, y);\n}\n", "/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: i32): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** First high (lead) surrogate. */\nexport const SURROGATE_HIGH = 0xD800;\n\n/** First low (trail) surrogate. */\nexport const SURROGATE_LOW = 0xDC00;\n\n/** Tests if a code unit or code point is a surrogate. */\nexport function isSurrogate(c: i32): bool {\n  // F800: 11111 0 0000000000 Mask\n  // D800: 11011 X XXXXXXXXXX Any surrogate\n  return (c & 0xF800) == SURROGATE_HIGH;\n}\n\n/** Tests if a surrogate is a high (lead) surrogate. */\nexport function isSurrogateHigh(c: i32): bool {\n  // D800-DBFF\n  return c < SURROGATE_LOW;\n}\n\n/** Tests if a surrogate is a low (trail) surrogate. */\nexport function isSurrogateLow(c: i32): bool {\n  // DC00-DFFF\n  return c >= SURROGATE_LOW;\n}\n\n/** Tests if a code unit or code point is a high (lead) surrogate. */\nexport function isHighSurrogate(c: i32): bool {\n  // FC00: 11111 1 0000000000 Mask\n  // D800: 11011 0 XXXXXXXXXX High/Lead surrogate\n  return (c & 0xFC00) == SURROGATE_HIGH;\n}\n\n/** Tests if a code unit or code point is a low (trail) surrogate. */\nexport function isLowSurrogate(c: i32): bool {\n  // FC00: 11111 1 0000000000 Mask\n  // DC00: 11011 1 XXXXXXXXXX Low/Trail surrogate\n  return (c & 0xFC00) == SURROGATE_LOW;\n}\n\n/** Converts a surrogate pair to its respective code point. */\nexport function combineSurrogates(hi: i32, lo: i32): i32 {\n  return 0x10000 + ((hi & 0x3FF) << 10) | (lo & 0x3FF);\n}\n\nexport function isAlpha(c: i32): bool {\n  let c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimal(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctal(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid hexadecimal symbol [a-f]. */\nexport function isHexBase(c: i32): bool {\n  let c0 = c | 32; // unify uppercases and lowercases a|A - f|F\n  return c0 >= CharCode.a && c0 <= CharCode.f;\n}\n\n/** Tests if the specified character code is a valid hexadecimal digit. */\nexport function isHexOrDecimal(c: i32): bool {\n  return isDecimal(c) || isHexBase(c);\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isAlphaOrDecimal(c: i32): bool {\n  return isAlpha(c) || isDecimal(c);\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return isAlpha(c)\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c >= 170 && c <= 65500\n         && lookupInUnicodeMap(c as u16, unicodeIdentifierStart);\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return isAlphaOrDecimal(c)\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c >= 170 && c <= 65500\n         && lookupInUnicodeMap(c as u16, unicodeIdentifierPart);\n}\n\n/** Tests if the specified string is a valid identifer. */\nexport function isIdentifier(str: string): bool {\n  var len = str.length;\n  if (!len) return false;\n  if (!isIdentifierStart(str.charCodeAt(0))) return false;\n  for (let i = 1; i < len; ++i) {\n    if (!isIdentifierPart(str.charCodeAt(i))) return false;\n  }\n  return true;\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  var lo = 0;\n  var hi = map.length;\n  var mid: u32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >>> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\n/** Creates an indentation matching the number of specified levels. */\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX3 = \"      \";\nconst indentX4 = \"        \";\nconst indentCache = new Map<i32,string>();\n\nexport function indent(sb: string[], level: i32): void {\n  if (level <= 4) {\n    switch (level) {\n      case 1: sb.push(indentX1); break;\n      case 2: sb.push(indentX2); break;\n      case 3: sb.push(indentX3); break;\n      case 4: sb.push(indentX4); break;\n    }\n  } else {\n    let indents: string;\n    // Limit number of indent entries to 1024 for avoiding unnecessary\n    // memory consumetion\n    if (indentCache.size <= 1024) {\n      if (indentCache.has(level)) {\n        indents = assert(indentCache.get(level));\n      } else {\n        indentCache.set(level, (indents = indentX1.repeat(level)));\n      }\n    } else {\n      indents = indentX1.repeat(level);\n    }\n    sb.push(indents);\n  }\n}\n\n/** Escapes a string using the specified kind of quote. */\nexport function escapeString(str: string, quote: CharCode): string {\n  var sb = new Array<string>();\n  var off = 0;\n  var i = 0;\n  for (let k = str.length; i < k;) {\n    switch (str.charCodeAt(i)) {\n      case CharCode.NULL: {\n        if (i > off) sb.push(str.substring(off, off = i + 1));\n        sb.push(\"\\\\0\");\n        off = ++i;\n        break;\n      }\n      case CharCode.BACKSPACE: {\n        if (i > off) sb.push(str.substring(off, i));\n        off = ++i;\n        sb.push(\"\\\\b\");\n        break;\n      }\n      case CharCode.TAB: {\n        if (i > off) sb.push(str.substring(off, i));\n        off = ++i;\n        sb.push(\"\\\\t\");\n        break;\n      }\n      case CharCode.LINEFEED: {\n        if (i > off) sb.push(str.substring(off, i));\n        off = ++i;\n        sb.push(\"\\\\n\");\n        break;\n      }\n      case CharCode.VERTICALTAB: {\n        if (i > off) sb.push(str.substring(off, i));\n        off = ++i;\n        sb.push(\"\\\\v\");\n        break;\n      }\n      case CharCode.FORMFEED: {\n        if (i > off) sb.push(str.substring(off, i));\n        off = ++i;\n        sb.push(\"\\\\f\");\n        break;\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (i > off) sb.push(str.substring(off, i));\n        sb.push(\"\\\\r\");\n        off = ++i;\n        break;\n      }\n      case CharCode.DOUBLEQUOTE: {\n        if (quote == CharCode.DOUBLEQUOTE) {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\"\");\n          off = ++i;\n        } else {\n          ++i;\n        }\n        break;\n      }\n      case CharCode.SINGLEQUOTE: {\n        if (quote == CharCode.SINGLEQUOTE) {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\'\");\n          off = ++i;\n        } else {\n          ++i;\n        }\n        break;\n      }\n      case CharCode.BACKSLASH: {\n        if (i > off) sb.push(str.substring(off, i));\n        sb.push(\"\\\\\\\\\");\n        off = ++i;\n        break;\n      }\n      case CharCode.BACKTICK: {\n        if (quote == CharCode.BACKTICK) {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\`\");\n          off = ++i;\n        } else {\n          ++i;\n        }\n        break;\n      }\n      default: {\n        ++i;\n        break;\n      }\n    }\n  }\n  if (i > off) sb.push(str.substring(off, i));\n  return sb.join(\"\");\n}\n", "/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n", "/**\n * @fileoverview Terminal utility.\n * @license Apache-2.0\n */\n\n/** Gray terminal color code. */\nexport const COLOR_GRAY = \"\\u001b[90m\";\n/** Red terminal color code. */\nexport const COLOR_RED = \"\\u001b[91m\";\n/** Green terminal color code. */\nexport const COLOR_GREEN = \"\\u001b[92m\";\n/** Yellow terminal color code. */\nexport const COLOR_YELLOW = \"\\u001b[93m\";\n/** Blue terminal color code. */\nexport const COLOR_BLUE = \"\\u001b[94m\";\n/** Magenta terminal color code. */\nexport const COLOR_MAGENTA = \"\\u001b[95m\";\n/** Cyan terminal color code. */\nexport const COLOR_CYAN = \"\\u001b[96m\";\n/** White terminal color code. */\nexport const COLOR_WHITE = \"\\u001b[97m\";\n/** Terminal color reset code. */\nexport const COLOR_RESET = \"\\u001b[0m\";\n\n/** Whether terminal colors are enabled or not. */\nvar colorsEnabled = true;\n\n/** Checks whether terminal colors are enabled or not. */\nexport function isColorsEnabled(): bool {\n  return colorsEnabled;\n}\n\n/** Sets whether terminal colors are enabled or not. */\nexport function setColorsEnabled(isEnabled: bool): bool {\n  var wasEnabled = isEnabled;\n  colorsEnabled = isEnabled;\n  return wasEnabled;\n}\n\n/** Wraps the specified text in the specified terminal color code. */\nexport function colorize(text: string, color: string): string {\n  return colorsEnabled ? color + text + COLOR_RESET : text;\n}\n", "/**\n * @fileoverview Various vector utility.\n * @license Apache-2.0\n */\n\n/** v128 zero constant. */\nexport const v128_zero = new Uint8Array(16);\n/** v128 all ones constant. */\nexport const v128_ones = new Uint8Array(16).fill(0xFF);\n", "/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak,\n  isWhiteSpace,\n  COLOR_CYAN,\n  COLOR_YELLOW,\n  COLOR_RED,\n  COLOR_MAGENTA,\n  COLOR_RESET,\n  isColorsEnabled,\n  setColorsEnabled,\n  CharCode\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport const enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\nexport class Range {\n\n  source!: Source;\n  debugInfoRef: usize = 0;\n\n  constructor(public start: i32, public end: i32) {}\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    let range = new Range(\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n    range.source = a.source;\n    return range;\n  }\n\n  equals(other: Range): bool {\n    return (\n      this.source == other.source &&\n      this.start == other.start &&\n      this.end == other.end\n    );\n  }\n\n  get atStart(): Range {\n    let range = new Range(this.start, this.start);\n    range.source = this.source;\n    return range;\n  }\n\n  get atEnd(): Range {\n    let range = new Range(this.end, this.end);\n    range.source = this.source;\n    return range;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_CYAN;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null; // TODO: Make this a related message for chains?\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Tests if this message equals the specified. */\n  equals(other: DiagnosticMessage): bool {\n    if (this.code != other.code) return false;\n    var thisRange = this.range;\n    var otherRange = other.range;\n    if (thisRange) {\n      if (!otherRange || !thisRange.equals(otherRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    var thisRelatedRange = this.relatedRange;\n    var otherRelatedRange = other.relatedRange;\n    if (thisRelatedRange) {\n      if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange)) return false;\n    } else if (otherRelatedRange) {\n      return false;\n    }\n    return this.message == other.message;\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var category = diagnosticCategoryToString(this.category);\n    var range = this.range;\n    var code = this.code;\n    var message = this.message;\n    if (range) {\n      let source = range.source;\n      let path = source.normalizedPath;\n      let line = source.lineAt(range.start);\n      let column = source.columnAt();\n      let len = range.end - range.start;\n      return `${category} ${code}: \"${message}\" in ${path}(${line},${column}+${len})`;\n    }\n    return `${category} ${code}: ${message}`;\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n  var wasColorsEnabled = setColorsEnabled(useColors);\n\n  // general information\n  var sb: string[] = [];\n  if (isColorsEnabled()) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (isColorsEnabled()) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range));\n    } else {\n      sb.push(\"\\n in \");\n      sb.push(source.normalizedPath);\n    }\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange));\n      } else {\n        sb.push(\"\\n in \");\n        sb.push(relatedSource.normalizedPath);\n      }\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  setColorsEnabled(wasColorsEnabled);\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nfunction formatDiagnosticContext(range: Range): string {\n  var source = range.source;\n  var text = source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = start;\n  var lineNumber = source.lineAt(start).toString();\n  var lineSpace = \" \".repeat(lineNumber.length);\n  // Find preceeding line break\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  // Skip leading whitespace\n  while (start < len && isWhiteSpace(text.charCodeAt(start))) start++;\n  // Find next line break\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    lineSpace,\n    \"  :\\n \",\n    lineNumber,\n    \" \u2502 \",\n    text.substring(start, end).replaceAll(\"\\t\", \"  \"),\n    \"\\n \",\n    lineSpace,\n    \" \u2502 \"\n  ];\n  while (start < range.start) {\n    if (text.charCodeAt(start) == CharCode.TAB) {\n      sb.push(\"  \");\n      start += 2;\n    } else {\n      sb.push(\" \");\n      start++;\n    }\n  }\n  if (isColorsEnabled()) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      let cc = text.charCodeAt(start);\n      if (cc == CharCode.TAB) {\n        sb.push(\"~~\");\n      } else if (isLineBreak(cc)) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      } else {\n        sb.push(\"~\");\n      }\n    }\n  }\n  if (isColorsEnabled()) sb.push(COLOR_RESET);\n  sb.push(\"\\n \");\n  sb.push(lineSpace);\n  sb.push(\" \u2514\u2500 in \");\n  sb.push(source.normalizedPath);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,DiagnosticMessage[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenMessagesAtPos = assert(seenInSource.get(range.start));\n          for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n            if (seenMessagesAtPos[i].equals(message)) return;\n          }\n          seenMessagesAtPos.push(message);\n        } else {\n          seenInSource.set(range.start, [ message ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,DiagnosticMessage[]>();\n        seenInSource.set(range.start, [ message ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n", "/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Range\n} from \"./diagnostics\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nimport {\n  ExpressionRef\n} from \"./module\";\n\nimport {\n  Type\n} from \"./types\";\n\n/** Indicates the kind of a node. */\nexport const enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  OMITTED,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n  COMPILED,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n  MODULE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  INDEXSIGNATURE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  constructor(\n    /** Kind of this node. */\n    public kind: NodeKind,\n    /** Source range. */\n    public range: Range\n  ) {}\n\n  // types\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return new TypeName(Node.createIdentifierExpression(name, range), null, range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(name, typeArguments, isNullable, range);\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    return new FunctionTypeNode(parameters, returnType, explicitThisType, isNullable, range);\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(Node.createSimpleTypeName(\"\", range), null, false, range);\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    return new TypeParameterNode(name, extendsType, defaultType, range);\n  }\n\n  static createParameter(\n    parameterKind: ParameterKind,\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    range: Range\n  ): ParameterNode {\n    return new ParameterNode(parameterKind, name, type, initializer, range);\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    return new DecoratorNode(DecoratorKind.fromNode(name), name, args, range);\n  }\n\n  static createComment(\n    commentKind: CommentKind,\n    text: string,\n    range: Range\n  ): CommentNode {\n    return new CommentNode(commentKind, text, range);\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    text: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    return new IdentifierExpression(text, isQuoted, range);\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    return new IdentifierExpression(\"\", false, range);\n  }\n\n  static createArrayLiteralExpression(\n    elementExpressions: Expression[],\n    range: Range\n  ): ArrayLiteralExpression {\n    return new ArrayLiteralExpression(elementExpressions, range);\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    return new AssertionExpression(assertionKind, expression, toType, range);\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    return new BinaryExpression(operator, left, right, range);\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    return new CallExpression(expression, typeArguments, args, range);\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    return new ClassExpression(declaration);\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    return new CommaExpression(expressions, range);\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    return new ConstructorExpression(range);\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    elementExpression: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    return new ElementAccessExpression(expression, elementExpression, range);\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    return new FalseExpression(range);\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    return new FloatLiteralExpression(value, range);\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    return new FunctionExpression(declaration);\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    return new InstanceOfExpression(expression, isType, range);\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    return new IntegerLiteralExpression(value, range);\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    return new NewExpression(typeName, typeArguments, args, range);\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    return new NullExpression(range);\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    return new ObjectLiteralExpression(names, values, range);\n  }\n\n  static createOmittedExpression(\n    range: Range\n  ): OmittedExpression {\n    return new OmittedExpression(range);\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    return new ParenthesizedExpression(expression, range);\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    return new PropertyAccessExpression(expression, property, range);\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    patternFlags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    return new RegexpLiteralExpression(pattern, patternFlags, range);\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    return new TernaryExpression(condition, ifThen, ifElse, range);\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    return new StringLiteralExpression(value, range);\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    return new SuperExpression(range);\n  }\n\n  static createTemplateLiteralExpression(\n    tag: Expression | null,\n    parts: string[],\n    rawParts: string[],\n    expressions: Expression[],\n    range: Range\n  ): TemplateLiteralExpression {\n    return new TemplateLiteralExpression(tag, parts, rawParts, expressions, range);\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    return new ThisExpression(range);\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    return new TrueExpression(range);\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    return new UnaryPostfixExpression(operator, operand, range);\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    return new UnaryPrefixExpression(operator, operand, range);\n  }\n\n  static createCompiledExpression(\n    expr: ExpressionRef,\n    type: Type,\n    range: Range\n  ): Expression {\n    return new CompiledExpression(expr, type, range);\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    return new BlockStatement(statements, range);\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    return new BreakStatement(label, range);\n  }\n\n  static createClassDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): ClassDeclaration {\n    return new ClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    return new ContinueStatement(label, range);\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    return new DoStatement(statement, condition, range);\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    return new EmptyStatement(range);\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    values: EnumValueDeclaration[],\n    range: Range\n  ): EnumDeclaration {\n    return new EnumDeclaration(name, decorators, flags, values, range);\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    flags: CommonFlags,\n    initializer: Expression | null,\n    range: Range\n  ): EnumValueDeclaration {\n    return new EnumValueDeclaration(name, flags, initializer, range);\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    return new ExportStatement(members, path, isDeclare, range);\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    return new ExportDefaultStatement(declaration, range);\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    return new ExportImportStatement(name, externalName, range);\n  }\n\n  static createExportMember(\n    localName: IdentifierExpression,\n    exportedName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    if (!exportedName) exportedName = localName;\n    return new ExportMember(localName, exportedName, range);\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    return new ExpressionStatement(expression);\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    return new IfStatement(condition, ifTrue, ifFalse, range);\n  }\n\n  static createImportStatement(\n    declarations: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(declarations, null, path, range);\n  }\n\n  static createWildcardImportStatement(\n    namespaceName: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(null, namespaceName, path, range);\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    if (!name) name = foreignName;\n    return new ImportDeclaration(name, foreignName, range);\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): InterfaceDeclaration {\n    return new InterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): FieldDeclaration {\n    return new FieldDeclaration(name, decorators, flags, type, initializer, -1, range);\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    return new ForStatement(initializer, condition, incrementor, statement, range);\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    return new ForOfStatement(variable, iterable, statement, range);\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    return new FunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range);\n  }\n\n  static createIndexSignature(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureNode {\n    return new IndexSignatureNode(keyType, valueType, flags, range);\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    range: Range\n  ): MethodDeclaration {\n    return new MethodDeclaration(name, decorators, flags, typeParameters, signature, body, range);\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    members: Statement[],\n    range: Range\n  ): NamespaceDeclaration {\n    return new NamespaceDeclaration(name, decorators, flags, members, range);\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    return new ReturnStatement(value, range);\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    return new SwitchStatement(condition, cases, range);\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    return new SwitchCase(label, statements, range);\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    return new ThrowStatement(value, range);\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    return new TryStatement(statements, catchVariable, catchStatements, finallyStatements, range);\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    type: TypeNode,\n    range: Range\n  ): TypeDeclaration {\n    return new TypeDeclaration(name, decorators, flags, typeParameters, type, range);\n  }\n\n  static createModuleDeclaration(\n    name: string,\n    flags: CommonFlags,\n    range: Range\n  ): ModuleDeclaration {\n    return new ModuleDeclaration(name, flags, range);\n  }\n\n  static createVariableStatement(\n    decorators: DecoratorNode[] | null,\n    declarations: VariableDeclaration[],\n    range: Range\n  ): VariableStatement {\n    return new VariableStatement(decorators, declarations, range);\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): VariableDeclaration {\n    return new VariableDeclaration(name, decorators, flags, type, initializer, range);\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    return new VoidStatement(expression, range);\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    return new WhileStatement(condition, statement, range);\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n\n  private isAccessOn(kind: NodeKind): bool {\n    let node = changetype<Node>(this);\n    if (node.kind == NodeKind.CALL) {\n      node = (<CallExpression>node).expression;\n    }\n    if (node.kind == NodeKind.PROPERTYACCESS) {\n      let target = (<PropertyAccessExpression>node).expression;\n      if (target.kind == kind) return true;\n    }\n    return false;\n  }\n\n  /** Checks if this node accesses a method or property on `this`. */\n  get isAccessOnThis(): bool {\n    return this.isAccessOn(NodeKind.THIS);\n  }\n\n  /** Checks if this node accesses a method or property on `super`. */\n  get isAccessOnSuper(): bool {\n    return this.isAccessOn(NodeKind.SUPER);\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  constructor(\n    /** Kind of the type node. */\n    kind: NodeKind,\n    /** Whether nullable or not. */\n    public isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  constructor(\n    /** Identifier of this part. */\n    public identifier: IdentifierExpression,\n    /** Next part of the type name or `null` if this is the last part. */\n    public next: TypeName | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPENAME, range);\n  }\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  constructor(\n    /** Type name. */\n    public name: TypeName,\n    /** Type argument references. */\n    public typeArguments: TypeNode[] | null,\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMEDTYPE, isNullable, range);\n  }\n\n  /** Checks if this type node has type arguments. */\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments != null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  constructor(\n    /** Function parameters. */\n    public parameters: ParameterNode[],\n    /** Return type. */\n    public returnType: TypeNode,\n    /** Explicitly provided this type, if any. */\n    public explicitThisType: NamedTypeNode | null, // can't be a function\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONTYPE, isNullable, range);\n  }\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  constructor(\n    /** Identifier reference. */\n    public name: IdentifierExpression,\n    /** Extended type reference, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Default type if omitted, if any. */\n    public defaultType: NamedTypeNode | null, // can't be a function\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEPARAMETER, range);\n  }\n}\n\n/** Represents the kind of a parameter. */\nexport const enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  constructor(\n    /** Parameter kind. */\n    public parameterKind: ParameterKind,\n    /** Parameter name. */\n    public name: IdentifierExpression,\n    /** Parameter type. */\n    public type: TypeNode,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARAMETER, range);\n  }\n\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  FINAL,\n  INLINE,\n  EXTERNAL,\n  EXTERNAL_JS,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.f: {\n          if (nameStr == \"final\") return DecoratorKind.FINAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        } else if (nameStr == \"external\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.j: {\n              if (propStr == \"js\") return DecoratorKind.EXTERNAL_JS;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  constructor(\n    /** Built-in decorator kind, or custom. */\n    public decoratorKind: DecoratorKind,\n    /** Name expression. */\n    public name: Expression,\n    /** Argument expressions. */\n    public args: Expression[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DECORATOR, range);\n  }\n}\n\n/** Comment kinds. */\nexport const enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash line comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  constructor(\n    /** Comment kind. */\n    public commentKind: CommentKind,\n    /** Comment text. */\n    public text: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMENT, range);\n  }\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  constructor(\n    /** Textual name. */\n    public text: string,\n    /** Whether quoted or not. */\n    public isQuoted: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IDENTIFIER, range);\n  }\n}\n\n/** Indicates the kind of a literal. */\nexport const enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  TEMPLATE,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  constructor(\n    /** Specific literal kind. */\n    public literalKind: LiteralKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.LITERAL, range);\n  }\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Nested element expressions. */\n    public elementExpressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.ARRAY, range);\n  }\n}\n\n/** Indicates the kind of an assertion. */\nexport const enum AssertionKind {\n  /** A prefix assertion, i.e. `<T>expr`. */\n  PREFIX,\n  /** An as assertion, i.e. `expr as T`. */\n  AS,\n  /** A non-null assertion, i.e. `!expr`. */\n  NONNULL,\n  /** A const assertion, i.e. `expr as const`. */\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  constructor(\n    /** Specific kind of this assertion. */\n    public assertionKind: AssertionKind,\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Target type, if applicable. */\n    public toType: TypeNode | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ASSERTION, range);\n  }\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  constructor(\n    /** Operator token. */\n    public operator: Token,\n    /** Left-hand side expression */\n    public left: Expression,\n    /** Right-hand side expression. */\n    public right: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BINARY, range);\n  }\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  constructor(\n    /** Called expression. Usually an identifier or property access expression. */\n    public expression: Expression,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CALL, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  constructor(\n    /** Inline class declaration. */\n    public declaration: ClassDeclaration\n  ) {\n    super(NodeKind.CLASS, declaration.range);\n  }\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  constructor(\n    /** Sequential expressions. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMA, range);\n  }\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"constructor\", false, range);\n    this.kind = NodeKind.CONSTRUCTOR;\n  }\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Element of the expression being accessed. */\n    public elementExpression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ELEMENTACCESS, range);\n  }\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Float value. */\n    public value: f64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.FLOAT, range);\n  }\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  constructor(\n    /** Inline function declaration. */\n    public declaration: FunctionDeclaration\n  ) {\n    super(NodeKind.FUNCTION, declaration.range);\n  }\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  constructor(\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Type to test for. */\n    public isType: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INSTANCEOF, range);\n  }\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Integer value. */\n    public value: i64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.INTEGER, range);\n  }\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  constructor(\n    /** Type being constructed. */\n    public typeName: TypeName,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NEW, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"null\", false, range);\n    this.kind = NodeKind.NULL;\n  }\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Field names. */\n    public names: IdentifierExpression[],\n    /** Field values. */\n    public values: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.OBJECT, range);\n  }\n}\n\n/** Represents an omitted expression, e.g. within an array literal. */\nexport class OmittedExpression extends Expression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.OMITTED, range);\n  }\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  constructor(\n    /** Expression in parenthesis. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARENTHESIZED, range);\n  }\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Property of the expression being accessed. */\n    public property: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PROPERTYACCESS, range);\n  }\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Regular expression pattern. */\n    public pattern: string,\n    /** Regular expression flags. */\n    public patternFlags: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.REGEXP, range);\n  }\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Expression executed when condition is `true`. */\n    public ifThen: Expression,\n    /** Expression executed when condition is `false`. */\n    public ifElse: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TERNARY, range);\n  }\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  constructor(\n    /** String value without quotes. */\n    public value: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.STRING, range);\n  }\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"super\", false, range);\n    this.kind = NodeKind.SUPER;\n  }\n}\n\n/** Represents a template literal expression. */\nexport class TemplateLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Tag expression, if any. */\n    public tag: Expression | null,\n    /** String parts. */\n    public parts: string[],\n    /** Raw string parts. */\n    public rawParts: string[],\n    /** Expression parts. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.TEMPLATE, range);\n  }\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"this\", false, range);\n    this.kind = NodeKind.THIS;\n  }\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"true\", false, range);\n    this.kind = NodeKind.TRUE;\n  }\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"false\", false, range);\n    this.kind = NodeKind.FALSE;\n  }\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  constructor(\n    /** Unary expression kind. */\n    kind: NodeKind,\n    /** Operator token. */\n    public operator: Token,\n    /** Operand expression. */\n    public operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPOSTFIX, operator, operand, range);\n  }\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPREFIX, operator, operand, range);\n  }\n}\n\n/** Represents a special pre-compiled expression. If the expression has side-effects, special care has to be taken. */\nexport class CompiledExpression extends Expression {\n  constructor(\n    /** Compiled expression. */\n    public expr: ExpressionRef,\n    /** Type of the compiled expression. */\n    public type: Type,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMPILED, range);\n  }\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport const enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  constructor(\n    /** Source kind. */\n    public sourceKind: SourceKind,\n    /** Normalized path with file extension. */\n    public normalizedPath: string,\n    /** Full source text. */\n    public text: string\n  ) {\n    super(NodeKind.SOURCE, new Range(0, text.length));\n    var internalPath = mangleInternalPath(normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.range.source = this;\n  }\n\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[] = new Array();\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Remembered column number. */\n  private lineColumn: i32 = 1;\n\n  /** Determines the line number at the specified position. Starts at `1`. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. Starts at `1`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  constructor(\n    /** Declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    public name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    public decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n  /** Overridden module name from preceeding `module` statement. */\n  public overriddenModuleName: string | null = null;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature. */\nexport class IndexSignatureNode extends Node {\n  constructor(\n    /** Key type. */\n    public keyType: NamedTypeNode,\n    /** Value type. */\n    public valueType: TypeNode,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INDEXSIGNATURE, range);\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  constructor(\n    /** Variable-like declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    public type: TypeNode | null,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, name, decorators, flags, range);\n  }\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BLOCK, range);\n  }\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  constructor(\n    /** Target label, if any. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BREAK, range);\n  }\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    public implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    public members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CLASSDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Index signature, if present. */\n  indexSignature: IndexSignatureNode | null = null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  constructor(\n    /** Target label, if applicable. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CONTINUE, range);\n  }\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  constructor(\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Condition when to repeat. */\n    public condition: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DO, range);\n  }\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EMPTY, range);\n  }\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Enum value declarations. */\n    public values: EnumValueDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMVALUEDECLARATION, name, null, flags, null, initializer, range);\n  }\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  constructor(\n    /** Identifier being imported. */\n    public name: IdentifierExpression,\n    /** Identifier being exported. */\n    public externalName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTIMPORT, range);\n  }\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  constructor(\n    /** Local identifier. */\n    public localName: IdentifierExpression,\n    /** Exported identifier. */\n    public exportedName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTMEMBER, range);\n  }\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  constructor(\n    /** Array of members if a set of named exports, or `null` if a file export. */\n    public members: ExportMember[] | null,\n    /** Path being exported from, if applicable. */\n    public path: StringLiteralExpression | null,\n    /** Whether this is a declared export. */\n    public isDeclare: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORT, range);\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      this.internalPath = normalizedPath;\n    } else {\n      this.internalPath = null;\n    }\n  }\n\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  constructor(\n    /** Declaration being exported as default. */\n    public declaration: DeclarationStatement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTDEFAULT, range);\n  }\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  constructor(\n    /** Expression being used as a statement.*/\n    public expression: Expression\n  ) {\n    super(NodeKind.EXPRESSION, expression.range);\n  }\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n    public parameterIndex: i32,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FIELDDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  constructor(\n    /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n    public initializer: Statement | null,\n    /** Condition expression, if present. */\n    public condition: Expression | null,\n    /** Incrementor expression, if present. */\n    public incrementor: Expression | null,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOR, range);\n  }\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  constructor(\n    /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n    public variable: Statement,\n    /** Iterable expression being iterated. */\n    public iterable: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOROF, range);\n  }\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    public signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    public body: Statement | null,\n    /** Arrow function kind, if applicable. */\n    public arrowKind: ArrowKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Gets if this function is generic. */\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return new FunctionDeclaration(\n      this.name,\n      this.decorators,\n      this.flags,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  constructor(\n    /** Condition. */\n    public condition: Expression,\n    /** Statement executed when condition is `true`. */\n    public ifTrue: Statement,\n    /** Statement executed when condition is `false`. */\n    public ifFalse: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IF, range);\n  }\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Identifier being imported. */\n    public foreignName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORTDECLARATION, name, null, CommonFlags.NONE, range);\n  }\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  constructor(\n    /** Array of member declarations or `null` if an asterisk import. */\n    public declarations: ImportDeclaration[] | null,\n    /** Name of the local namespace, if an asterisk import. */\n    public namespaceName: IdentifierExpression | null,\n    /** Path being imported from. */\n    public path: StringLiteralExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORT, range);\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    this.internalPath = mangleInternalPath(normalizedPath);\n  }\n\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    this.kind = NodeKind.INTERFACEDECLARATION;\n  }\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    body: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, signature, body, ArrowKind.NONE, range);\n    this.kind = NodeKind.METHODDECLARATION;\n  }\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Array of namespace members. */\n    public members: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMESPACEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  constructor(\n    /** Value expression being returned, if present. */\n    public value: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.RETURN, range);\n  }\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  constructor(\n    /** Label expression. `null` indicates the default case. */\n    public label: Expression | null,\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCHCASE, range);\n  }\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Contained cases. */\n    public cases: SwitchCase[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCH, range);\n  }\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  constructor(\n    /** Value expression being thrown. */\n    public value: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.THROW, range);\n  }\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Exception variable name, if a `catch` clause is present. */\n    public catchVariable: IdentifierExpression | null,\n    /** Statements being executed on catch, if a `catch` clause is present. */\n    public catchStatements: Statement[] | null,\n    /** Statements being executed afterwards, if a `finally` clause is present. */\n    public finallyStatements: Statement[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TRY, range);\n  }\n}\n\n/** Represents a `module` statement. */\nexport class ModuleDeclaration extends Statement {\n  constructor(\n    /** Module name. */\n    public moduleName: string,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.MODULE, range);\n  }\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Type being aliased. */\n    public type: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLEDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  constructor(\n    /** Array of decorators. */\n    public decorators: DecoratorNode[] | null,\n    /** Array of member declarations. */\n    public declarations: VariableDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLE, range);\n  }\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  constructor(\n    /** Expression being dropped. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VOID, range);\n  }\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.WHILE, range);\n  }\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\"/\")) {\n    path += \"index\";\n  } else if (path.endsWith(\".ts\")) {\n    path = path.substring(0, path.length - 3);\n  }\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length > 0);\n  }\n  return false;\n}\n", "/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Range,\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimal,\n  isOctal,\n  isHexBase,\n  isHighSurrogate,\n  isLowSurrogate\n} from \"./util\";\n\n/** Named token types. */\nexport const enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  OVERRIDE,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n  TEMPLATELITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport const enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  let len = text.length;\n  assert(len);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (len == 5) {\n        if (text == \"async\") return Token.ASYNC;\n        if (text == \"await\") return Token.AWAIT;\n        break;\n      }\n      if (text == \"as\") return Token.AS;\n      if (text == \"abstract\") return Token.ABSTRACT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (len == 5) {\n        if (text == \"const\") return Token.CONST;\n        if (text == \"class\") return Token.CLASS;\n        if (text == \"catch\") return Token.CATCH;\n        break;\n      }\n      if (text == \"case\") return Token.CASE;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (len == 7) {\n        if (text == \"default\") return Token.DEFAULT;\n        if (text == \"declare\") return Token.DECLARE;\n        break;\n      }\n      if (text == \"do\") return Token.DO;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"debugger\") return Token.DEBUGGER;\n      break;\n    }\n    case CharCode.e: {\n      if (len == 4) {\n        if (text == \"else\") return Token.ELSE;\n        if (text == \"enum\") return Token.ENUM;\n        break;\n      }\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (len <= 5) {\n        if (text == \"false\") return Token.FALSE;\n        if (text == \"for\") return Token.FOR;\n        if (text == \"from\") return Token.FROM;\n        break;\n      }\n      if (text == \"function\") return Token.FUNCTION;\n      if (text == \"finally\") return Token.FINALLY;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (len == 2) {\n        if (text == \"if\") return Token.IF;\n        if (text == \"in\") return Token.IN;\n        if (text == \"is\") return Token.IS;\n        break;\n      }\n      switch (text.charCodeAt(3)) {\n        case CharCode.l: {\n          if (text == \"implements\") return Token.IMPLEMENTS;\n          break;\n        }\n        case CharCode.o: {\n          if (text == \"import\") return Token.IMPORT;\n          break;\n        }\n        case CharCode.t: {\n          if (text == \"instanceof\") return Token.INSTANCEOF;\n          break;\n        }\n        case CharCode.e: {\n          if (text == \"interface\") return Token.INTERFACE;\n          break;\n        }\n      }\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      if (text == \"namespace\") return Token.NAMESPACE;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      if (text == \"override\") return Token.OVERRIDE;\n      break;\n    }\n    case CharCode.p: {\n      if (len == 7) {\n        if (text == \"private\") return Token.PRIVATE;\n        if (text == \"package\") return Token.PACKAGE;\n        break;\n      }\n      if (text == \"public\") return Token.PUBLIC;\n      if (text == \"protected\") return Token.PROTECTED;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"return\") return Token.RETURN;\n      if (text == \"readonly\") return Token.READONLY;\n      break;\n    }\n    case CharCode.s: {\n      if (len == 6) {\n        if (text == \"switch\") return Token.SWITCH;\n        if (text == \"static\") return Token.STATIC;\n        break;\n      }\n      if (text == \"set\") return Token.SET;\n      if (text == \"super\") return Token.SUPER;\n      break;\n    }\n    case CharCode.t: {\n      if (len == 4) {\n        if (text == \"true\") return Token.TRUE;\n        if (text == \"this\") return Token.THIS;\n        if (text == \"type\") return Token.TYPE;\n        break;\n      }\n      if (text == \"try\") return Token.TRY;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n    this.source = source;\n\n    var text = source.text;\n    var end = text.length;\n    var pos = 0;\n    // skip bom\n    if (\n      pos < end &&\n      text.charCodeAt(pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++pos;\n    }\n\n    // skip shebang\n    if (\n      pos + 1 < end &&\n      text.charCodeAt(pos) == CharCode.HASH &&\n      text.charCodeAt(pos + 1) == CharCode.EXCLAMATION\n    ) {\n      pos += 2;\n      while (\n        pos < end &&\n        text.charCodeAt(pos) != CharCode.LINEFEED\n      ) {\n        ++pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n    this.pos = pos;\n    this.end = end;\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    while (pos < end) {\n      this.tokenPos = pos;\n      let c = text.charCodeAt(pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++pos < end &&\n            text.charCodeAt(pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            ++pos;\n            if (\n              maxTokenLength > 2 && pos < end &&\n              text.charCodeAt(pos) == CharCode.EQUALS\n            ) {\n              this.pos = pos + 1;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            this.pos = pos;\n            return Token.EXCLAMATION_EQUALS;\n          }\n          this.pos = pos;\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE: {\n          this.pos = pos;\n          return Token.STRINGLITERAL;\n        }\n        case CharCode.BACKTICK: {\n          this.pos = pos;\n          return Token.TEMPLATELITERAL;\n        }\n        case CharCode.PERCENT: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.PERCENT_EQUALS;\n          }\n          this.pos = pos;\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.AMPERSAND) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          this.pos = pos + 1;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          this.pos = pos + 1;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++pos;\n              if (\n                maxTokenLength > 2 && pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              this.pos = pos;\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          this.pos = pos;\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.PLUS) {\n              this.pos = pos + 1;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          this.pos = pos + 1;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.MINUS) {\n              this.pos = pos + 1;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (isDecimal(chr)) {\n              this.pos = pos - 1;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(pos + 1) == CharCode.DOT\n            ) {\n              this.pos = pos + 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          this.pos = pos;\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = pos;\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                pos + 1 < end &&\n                text.charCodeAt(pos + 1) == CharCode.SLASH\n              ) {\n                ++pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++pos < end) {\n                if (text.charCodeAt(pos) == CharCode.LINEFEED) {\n                  ++pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++pos < end) {\n                c = text.charCodeAt(pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  pos + 1 < end &&\n                  text.charCodeAt(pos + 1) == CharCode.SLASH\n                ) {\n                  pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          this.pos = pos;\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          this.pos = pos + 1;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          this.pos = pos + 1;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              this.pos = pos;\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              this.pos = pos;\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              this.pos = pos + 1;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          this.pos = pos;\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++pos;\n              if (maxTokenLength > 2 && pos < end) {\n                chr = text.charCodeAt(pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++pos;\n                  if (\n                    maxTokenLength > 3 && pos < end &&\n                    text.charCodeAt(pos) == CharCode.EQUALS\n                  ) {\n                    this.pos = pos + 1;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  this.pos = pos;\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  this.pos = pos + 1;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              this.pos = pos;\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          this.pos = pos + 1;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          this.pos = pos + 1;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.CARET_EQUALS;\n          }\n          this.pos = pos;\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          this.pos = pos + 1;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.BAR) {\n              this.pos = pos + 1;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.BAR_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          this.pos = pos + 1;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          this.pos = pos + 1;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            let posBefore = pos;\n            while (\n              ++pos < end &&\n              isIdentifierPart(c = text.charCodeAt(pos))\n            ) { /* nop */ }\n            if (identifierHandling != IdentifierHandling.ALWAYS) {\n              let maybeKeywordToken = tokenFromKeyword(text.substring(posBefore, pos));\n              if (\n                maybeKeywordToken != Token.INVALID &&\n                !(\n                  identifierHandling == IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(maybeKeywordToken)\n                )\n              ) {\n                this.pos = pos;\n                return maybeKeywordToken;\n              }\n            }\n            this.pos = posBefore;\n            return Token.IDENTIFIER;\n          } else if (isWhiteSpace(c)) {\n            ++pos;\n            break;\n          }\n          let start = pos++;\n          if (\n            isHighSurrogate(c) && pos < end &&\n            isLowSurrogate(text.charCodeAt(pos))\n          ) ++pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, pos)\n          );\n          this.pos = pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    this.pos = pos;\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    if (token == Token.GREATERTHAN) {  // where parsing type arguments\n      maxCompoundLength = 1;\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) {\n      reusableState = null;\n      state.pos = this.pos;\n      state.token = this.token;\n      state.tokenPos = this.tokenPos;\n    } else {\n      state = new State(this.pos, this.token, this.tokenPos);\n    }\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    let range = new Range(start, end);\n    range.source = this.source;\n    return range;\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var start = pos;\n    while (\n      ++pos < end &&\n      isIdentifierPart(text.charCodeAt(pos))\n    );\n    this.pos = pos;\n    return text.substring(start, pos);\n  }\n\n  readingTemplateString: bool = false;\n  readStringStart: i32 = 0;\n  readStringEnd: i32 = 0;\n\n  readString(quote: i32 = 0, isTaggedTemplate: bool = false): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    if (!quote) quote = text.charCodeAt(pos++);\n    var start = pos;\n    this.readStringStart = start;\n    var result = \"\";\n\n    while (true) {\n      if (pos >= end) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        this.readStringEnd = end;\n        break;\n      }\n      let c = text.charCodeAt(pos);\n      if (c == quote) {\n        this.readStringEnd = pos;\n        result += text.substring(start, pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, pos);\n        this.pos = pos; // save\n        result += this.readEscapeSequence(isTaggedTemplate);\n        pos = this.pos; // restore\n        start = pos;\n        continue;\n      }\n      if (quote == CharCode.BACKTICK) {\n        if (c == CharCode.DOLLAR && pos + 1 < end && text.charCodeAt(pos + 1) == CharCode.OPENBRACE) {\n          result += text.substring(start, pos);\n          this.readStringEnd = pos;\n          this.pos = pos + 2;\n          this.readingTemplateString = true;\n          return result;\n        }\n      } else if (isLineBreak(c)) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, pos)\n        );\n        this.readStringEnd = pos;\n        break;\n      }\n      ++pos;\n    }\n    this.pos = pos;\n    this.readingTemplateString = false;\n    return result;\n  }\n\n  readEscapeSequence(isTaggedTemplate: bool = false): string {\n    // for context on isTaggedTemplate, see: https://tc39.es/proposal-template-literal-revision/\n    var start = this.pos;\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: {\n        if (isTaggedTemplate && this.pos < end && isDecimal(text.charCodeAt(this.pos))) {\n          ++this.pos;\n          return text.substring(start, this.pos);\n        }\n        return \"\\0\";\n      }\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(isTaggedTemplate ? start : -1); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(isTaggedTemplate ? start : -1); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(2, isTaggedTemplate ? start : - 1); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCodePoint(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 2 < this.end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos = pos + 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos = pos + 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos = pos + 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctal(text.charCodeAt(pos + 1))) {\n        let start = pos;\n        this.pos = pos + 1;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    let pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_zero;\n    var i64_4 = i64_new(4);\n    var nextValue = value;\n    var overflowOccurred = false;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (isDecimal(c)) {\n        // (value << 4) + c - CharCode._0\n        nextValue = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n      } else if (isHexBase(c)) {\n        // (value << 4) + (c | 32) + (10 - CharCode.a)\n        nextValue = i64_add(\n          i64_shl(value, i64_4),\n          i64_new((c | 32) + (10 - CharCode.a))\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      if (i64_gt_u(value, nextValue)) {\n        // Unsigned overflow occurred\n        overflowOccurred = true;\n      }\n      value = nextValue;\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    if (overflowOccurred) {\n      this.error(\n        DiagnosticCode.Literal_0_does_not_fit_into_i64_or_u64_types,\n        this.range(start - 2, pos),\n        this.source.text.substring(start - 2, pos)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_zero;\n    var i64_10 = i64_new(10);\n    var nextValue = value;\n    var overflowOccurred = false;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (isDecimal(c)) {\n        // value = value * 10 + c - CharCode._0;\n        nextValue = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      if (i64_gt_u(value, nextValue)) {\n        // Unsigned overflow occurred\n        overflowOccurred = true;\n      }\n      value = nextValue;\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    } else if (overflowOccurred) {\n      this.error(\n        DiagnosticCode.Literal_0_does_not_fit_into_i64_or_u64_types,\n        this.range(start, pos),\n        this.source.text.substring(start, pos)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_zero;\n    var i64_3 = i64_new(3);\n    var nextValue = value;\n    var overflowOccurred = false;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (isOctal(c)) {\n        // (value << 3) + c - CharCode._0\n        nextValue = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      if (i64_gt_u(value, nextValue)) {\n        // Unsigned overflow occurred\n        overflowOccurred = true;\n      }\n      value = nextValue;\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    } else if (overflowOccurred) {\n      this.error(\n        DiagnosticCode.Literal_0_does_not_fit_into_i64_or_u64_types,\n        this.range(start - 2, pos),\n        this.source.text.substring(start - 2, pos)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_zero;\n    var nextValue = value;\n    var overflowOccurred = false;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value << 1 | 0\n        nextValue = i64_shl(value, i64_one);\n      } else if (c == CharCode._1) {\n        // value << 1 | 1\n        nextValue = i64_or(\n          i64_shl(value, i64_one),\n          i64_one\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      if (i64_gt(value, nextValue)) {\n        // Overflow occurred\n        overflowOccurred = true;\n      }\n      value = nextValue;\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    } else if (overflowOccurred) {\n      this.error(\n        DiagnosticCode.Literal_0_does_not_fit_into_i64_or_u64_types,\n        this.range(start - 2, pos),\n        this.source.text.substring(start - 2, pos)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    var text = this.source.text;\n    var end = this.end;\n    var start = this.pos;\n    var sepCount = this.readDecimalFloatPartial(false);\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      sepCount += this.readDecimalFloatPartial();\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimal(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        sepCount += this.readDecimalFloatPartial();\n      }\n    }\n    let result = text.substring(start, this.pos);\n    if (sepCount) result = result.replaceAll(\"_\", \"\");\n    return parseFloat(result);\n  }\n\n  /** Reads past one section of a decimal float literal. Returns the number of separators encountered. */\n  private readDecimalFloatPartial(allowLeadingZeroSep: bool = true): u32 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var start = pos;\n    var end = this.end;\n    var sepEnd = start;\n    var sepCount = 0;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n\n      if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (!allowLeadingZeroSep && pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n        ++sepCount;\n      } else if (!isDecimal(c)) {\n        break;\n      }\n      ++pos;\n    }\n\n    if (pos != start && sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n\n    this.pos = pos;\n    return sepCount;\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2, startIfTaggedTemplate: i32 = -1): string {\n    var value = 0;\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    while (pos < end) {\n      let c = text.charCodeAt(pos++);\n      if (isDecimal(c)) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (isHexBase(c)) {\n        value = (value << 4) + (c | 32) + (10 - CharCode.a);\n      } else if (~startIfTaggedTemplate) {\n        this.pos = --pos;\n        return text.substring(startIfTaggedTemplate, pos);\n      } else {\n        this.pos = pos;\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(pos - 1, pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) { // invalid\n      this.pos = pos;\n      if (~startIfTaggedTemplate) {\n        return text.substring(startIfTaggedTemplate, pos);\n      }\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(pos)\n      );\n      return \"\";\n    }\n    this.pos = pos;\n    return String.fromCodePoint(value);\n  }\n\n  checkForIdentifierStartAfterNumericLiteral(): void {\n    // TODO: BigInt n\n    var pos = this.pos;\n    if (pos < this.end && isIdentifierStart(this.source.text.charCodeAt(pos))) {\n      this.error(\n        DiagnosticCode.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal,\n        this.range(pos)\n      );\n    }\n  }\n\n  readUnicodeEscape(startIfTaggedTemplate: i32 = -1): string {\n    return this.readHexadecimalEscape(4, startIfTaggedTemplate);\n  }\n\n  private readExtendedUnicodeEscape(startIfTaggedTemplate: i32 = -1): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      if (startIfTaggedTemplate == -1) {\n        this.error(\n          DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n          this.range(start, this.pos)\n        );\n      }\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      if (startIfTaggedTemplate == -1) {\n        this.error(\n          DiagnosticCode.Unexpected_end_of_text,\n          this.range(start, end)\n        );\n      }\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      if (startIfTaggedTemplate == -1) {\n        this.error(\n          DiagnosticCode.Unterminated_Unicode_escape_sequence,\n          this.range(start, this.pos)\n        );\n      }\n      invalid = true;\n    }\n\n    if (invalid) {\n      return ~startIfTaggedTemplate\n        ? text.substring(startIfTaggedTemplate, this.pos)\n        : \"\";\n    }\n    return String.fromCodePoint(value32);\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  constructor(\n    /** Current position. */\n    public pos: i32,\n    /** Current token. */\n    public token: Token,\n    /** Current token's position. */\n    public tokenPos: i32\n  ) {}\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n", "/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { BuiltinNames } from \"./builtins\";\nimport { CommonNames, Target } from \"./common\";\nimport {\n  isHighSurrogate,\n  isLowSurrogate,\n  combineSurrogates,\n  SURROGATE_HIGH,\n  SURROGATE_LOW\n} from \"./util\";\nimport * as binaryen from \"./glue/binaryen\";\n\n/** A Binaryen-compatible index. */\nexport type Index = binaryen.Index;\n/** Reference to a Binaryen-compatible string. */\nexport type StringRef = binaryen.StringRef;\n/** Reference to a Binaryen module. */\nexport type ModuleRef = binaryen.ModuleRef;\n/** Reference to a Binaryen function. */\nexport type FunctionRef = binaryen.FunctionRef;\n/** Reference to a Binaryen expression. */\nexport type ExpressionRef = binaryen.ExpressionRef;\n/** Reference to a Binaryen global. */\nexport type GlobalRef = binaryen.GlobalRef;\n/** Reference to a Binaryen tag. */\nexport type TagRef = binaryen.TagRef;\n/** Reference to a Binaryen import. */\nexport type ImportRef = binaryen.ImportRef;\n/** Reference to a Binaryen export. */\nexport type ExportRef = binaryen.ExportRef;\n/** Reference to a Binaryen relooper. */\nexport type RelooperRef = binaryen.RelooperRef;\n/** Reference to a Binaryen relooper block. */\nexport type RelooperBlockRef = binaryen.RelooperBlockRef;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\n/** Reference to a Binaryen type. */\nexport type TypeRef = binaryen.TypeRef;\nexport namespace TypeRef {\n  // special types\n  export const None: TypeRef = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: TypeRef = 1 /* _BinaryenTypeUnreachable */;\n  // value types\n  export const I32: TypeRef = 2 /* _BinaryenTypeInt32 */;\n  export const I64: TypeRef = 3 /* _BinaryenTypeInt64 */;\n  export const F32: TypeRef = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: TypeRef = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: TypeRef = 6 /* _BinaryenTypeVec128 */;\n  // nullable reference & GC types\n  export const Funcref = binaryen._BinaryenTypeFuncref();\n  export const Externref = binaryen._BinaryenTypeExternref();\n  export const Anyref = binaryen._BinaryenTypeAnyref();\n  export const Eqref = binaryen._BinaryenTypeEqref();\n  export const I31ref = binaryen._BinaryenTypeI31ref();\n  export const Dataref = binaryen._BinaryenTypeDataref();\n  // nullable string reference types\n  export const Stringref = binaryen._BinaryenTypeStringref();\n  export const StringviewWTF8 = binaryen._BinaryenTypeStringviewWTF8();\n  export const StringviewWTF16 = binaryen._BinaryenTypeStringviewWTF16();\n  export const StringviewIter = binaryen._BinaryenTypeStringviewIter();\n\n  export const Auto: TypeRef = -1 /* _BinaryenTypeAuto */;\n}\n\nexport type HeapTypeRef = binaryen.HeapTypeRef;\nexport namespace HeapTypeRef {\n  // reference & GC heap types\n  export const Func = binaryen._BinaryenHeapTypeFunc();\n  export const Ext = binaryen._BinaryenHeapTypeExt();\n  export const Any = binaryen._BinaryenHeapTypeAny();\n  export const Eq = binaryen._BinaryenHeapTypeEq();\n  export const I31 = binaryen._BinaryenHeapTypeI31();\n  export const Data = binaryen._BinaryenHeapTypeData();\n  // string heap types\n  export const String = binaryen._BinaryenHeapTypeString();\n  export const StringviewWTF8 = binaryen._BinaryenHeapTypeStringviewWTF8();\n  export const StringviewWTF16 = binaryen._BinaryenHeapTypeStringviewWTF16();\n  export const StringviewIter = binaryen._BinaryenHeapTypeStringviewIter();\n}\n\n/** Binaryen feature constants. */\nexport const enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGlobals = 2 /* _BinaryenFeatureMutableGlobals */,\n  TruncSat = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  GC = 1024 /* _BinaryenFeatureGC */,\n  Memory64 = 2048 /* _BinaryenFeatureMemory64 */,\n  FunctionReferences = 4096 /* _BinaryenFeatureTypedFunctionReferences */,\n  RelaxedSIMD = 16384 /* _BinaryenFeatureRelaxedSIMD */,\n  ExtendedConst = 32768 /* _BinaryenFeatureExtendedConst */,\n  Strings = 65536 /* _BinaryenFeatureStrings */,\n  All = 253951 /* _BinaryenFeatureAll */\n}\n\n/** Binaryen expression id constants. */\nexport const enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  MemorySize = 20 /* _BinaryenMemorySizeId */,\n  MemoryGrow = 21 /* _BinaryenMemoryGrowId */,\n  Nop = 22 /* _BinaryenNopId */,\n  Unreachable = 23 /* _BinaryenUnreachableId */,\n  AtomicRMW = 24 /* _BinaryenAtomicRMWId */,\n  AtomicCmpxchg = 25 /* _BinaryenAtomicCmpxchgId */,\n  AtomicWait = 26 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 27 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 28 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 29 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 30 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 31 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 32 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 33 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 34 /* _BinaryenSIMDLoadId */,\n  SIMDLoadStoreLane = 35 /* _BinaryenSIMDLoadStoreLaneId */,\n  MemoryInit = 36 /* _BinaryenMemoryInitId */,\n  DataDrop = 37 /* _BinaryenDataDropId */,\n  MemoryCopy = 38 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 39 /* _BinaryenMemoryFillId */,\n  Pop = 40 /* _BinaryenPopId */,\n  RefNull = 41 /* _BinaryenRefNullId */,\n  RefIs = 42 /* _BinaryenRefIsId */,\n  RefFunc = 43 /* _BinaryenRefFuncId */,\n  RefEq = 44 /* _BinaryenRefEqId */,\n  TableGet = 45 /* _BinaryenTableGetId */,\n  TableSet = 46 /* _BinaryenTableSetId */,\n  TableSize = 47 /* _BinaryenTableSizeId */,\n  TableGrow = 48 /* _BinaryenTableGrowId */,\n  Try = 49 /* _BinaryenTryId */,\n  Throw = 50 /* _BinaryenThrowId */,\n  Rethrow = 51 /* _BinaryenRethrowId */,\n  TupleMake = 52 /* _BinaryenTupleMakeId */,\n  TupleExtract = 53 /* _BinaryenTupleExtractId */,\n  I31New = 54 /* _BinaryenI31NewId */,\n  I31Get = 55 /* _BinaryenI31GetId */,\n  CallRef = 56 /* _BinaryenCallRefId */,\n  RefTest = 57 /* _BinaryenRefTestId */,\n  RefCast = 58 /* _BinaryenRefCastId */,\n  BrOn = 59 /* _BinaryenBrOnId */,\n  StructNew = 60 /* _BinaryenStructNewId */,\n  StructGet = 61 /* _BinaryenStructGetId */,\n  StructSet = 62 /* _BinaryenStructSetId */,\n  ArrayNew = 63 /* _BinaryenArrayNewId */,\n  ArrayInit = 64 /* _BinaryenArrayInitId */,\n  ArrayGet = 65 /* _BinaryenArrayGetId */,\n  ArraySet = 66 /* _BinaryenArraySetId */,\n  ArrayLen = 67 /* _BinaryenArrayLenId */,\n  ArrayCopy = 68 /* _BinaryenArrayCopyId */,\n  RefAs = 69 /* _BinaryenRefAsId */,\n  StringNew = 70 /* _BinaryenStringNewId */,\n  StringConst = 71 /* _BinaryenStringConstId */,\n  StringMeasure = 72 /* _BinaryenStringMeasureId */,\n  StringEncode = 73 /* _BinaryenStringEncodeId */,\n  StringConcat = 74 /* _BinaryenStringConcatId */,\n  StringEq = 75 /* _BinaryenStringEqId */,\n  StringAs = 76 /* _BinaryenStringAsId */,\n  StringWTF8Advance = 77 /* _BinaryenStringWTF8AdvanceId */,\n  StringWTF16Get = 78 /* _BinaryenStringWTF16GetId */,\n  StringIterNext = 79 /* _BinaryenStringIterNextId */,\n  StringIterMove = 80 /* _BinaryenStringIterMoveId */,\n  StringSliceWTF = 81 /* _BinaryenStringSliceWTFId */,\n  StringSliceIter = 82 /* _BinaryenStringSliceIterId */\n}\n\n/** Binaryen external kind constants. */\nexport const enum ExternalKind {\n  Function = 0 /* _BinaryenExternalFunction */,\n  Table = 1 /* _BinaryenExternalTable */,\n  Memory = 2 /* _BinaryenExternalMemory */,\n  Global = 3 /* _BinaryenExternalGlobal */,\n  Tag = 4 /* _BinaryenExternalTag */\n}\n\n/** Binaryen unary operation constants. */\nexport const enum UnaryOp {\n  /** i32.clz */\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  /** i64.clz */\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  /** i32.ctz */\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  /** i64.ctz */\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  /** i32.popcnt */\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  /** i64.popcnt */\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  /** f32.neg */\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  /** f64.neg */\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  /** f32.abs */\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  /** f64.abs */\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  /** f32.ceil */\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  /** f64.ceil */\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  /** f32.floor */\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  /** f64.floor */\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  /** f32.trunc */\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  /** f64.trunc */\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  /** f32.nearest */\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  /** f64.nearest */\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  /** f32.sqrt */\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  /** f64.sqrt */\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  /** i32.eqz */\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  /** i64.eqz */\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  /** i64.extend_i32_s */\n  ExtendI32ToI64 = 22 /* _BinaryenExtendSInt32 */,\n  /** i64.extend_i32_u */\n  ExtendU32ToU64 = 23 /* _BinaryenExtendUInt32 */,\n  /** i32.wrap_i64 */\n  WrapI64ToI32 = 24 /* _BinaryenWrapInt64 */,\n  /** i32.trunc_f32_s */\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  /** i64.trunc_f32_s */\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  /** i32.trunc_f32_u */\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  /** i64.trunc_f32_u */\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  /** i32.trunc_f64_s */\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  /** i64.trunc_f64_s */\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  /** i32.trunc_f64_u */\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  /** i64.trunc_f64_u */\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  /** i32.reinterpret_f32 */\n  ReinterpretF32ToI32 = 33 /* _BinaryenReinterpretFloat32 */,\n  /** i64.reinterpret_f64 */\n  ReinterpretF64ToI64 = 34 /* _BinaryenReinterpretFloat64 */,\n  /** f32.convert_i32_s */\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  /** f64.convert_i32_s */\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  /** f32.convert_i32_u */\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  /** f64.convert_i32_u */\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  /** f32.convert_i64_s */\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  /** f64.convert_i64_s */\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  /** f32.convert_i64_u */\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  /** f64.convert_i64_u */\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  /** f64.promote.f32 */\n  PromoteF32ToF64 = 43 /* _BinaryenPromoteFloat32 */,\n  /** f32.demote_f64 */\n  DemoteF64ToF32 = 44 /* _BinaryenDemoteFloat64 */,\n  /** f32.reinterpret_i32 */\n  ReinterpretI32ToF32 = 45 /* _BinaryenReinterpretInt32 */,\n  /** f64.reinterpret_i64 */\n  ReinterpretI64ToF64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n\n  /** i32.extend8_s */\n  Extend8I32 = 47 /* _BinaryenExtendS8Int32 */,\n  /** i32.extend16_s */\n  Extend16I32 = 48 /* _BinaryenExtendS16Int32 */,\n  /** i64.extend8_s */\n  Extend8I64 = 49 /* _BinaryenExtendS8Int64 */,\n  /** i64.extend16_s */\n  Extend16I64 = 50 /* _BinaryenExtendS16Int64 */,\n  /** i64.extend32_s (i64 in, i64 out) */\n  Extend32I64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n\n  /** i32.trunc_sat_f32_s */\n  TruncSatF32ToI32 = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  /** i32.trunc_sat_f32_u */\n  TruncSatF32ToU32 = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  /** i32.trunc_sat_f64_s */\n  TruncSatF64ToI32 = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  /** i32.trunc_sat_f64_u */\n  TruncSatF64ToU32 = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  /** i64.trunc_sat_f32_s */\n  TruncSatF32ToI64 = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  /** i64.trunc_sat_f32_u */\n  TruncSatF32ToU64 = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  /** i64.trunc_sat_f64_s */\n  TruncSatF64ToI64 = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  /** i64.trunc_sat_f64_u */\n  TruncSatF64ToU64 = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n\n  /** i8x16.splat */\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  /** i16x8.splat */\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  /** i32x4.splat */\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  /** i64x2.splat */\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  /** f32x4.splat */\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  /** f64x2.splat */\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  /** v128.not */\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  /** v128.any_true */\n  AnyTrueV128 = 67 /* _BinaryenAnyTrueVec128 */,\n  /** i8x16.abs */\n  AbsI8x16 = 68 /* _BinaryenAbsVecI8x16 */,\n  /** i8x16.neg */\n  NegI8x16 = 69 /* _BinaryenNegVecI8x16 */,\n  /** i8x16.all_true */\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  /** i8x16.bitmask */\n  BitmaskI8x16 = 71 /* _BinaryenBitmaskVecI8x16 */,\n  /** i8x16.popcnt */\n  PopcntI8x16 = 72 /* _BinaryenPopcntVecI8x16 */,\n  /** i16x8.abs */\n  AbsI16x8 = 73 /* _BinaryenAbsVecI16x8 */,\n  /** i16x8.neg */\n  NegI16x8 = 74 /* _BinaryenNegVecI16x8 */,\n  /** i16x8.all_true */\n  AllTrueI16x8 = 75 /* _BinaryenAllTrueVecI16x8 */,\n  /** i16x8.bitmask */\n  BitmaskI16x8 = 76 /* _BinaryenBitmaskVecI16x8 */,\n  /** i32x4.abs */\n  AbsI32x4 = 77 /* _BinaryenAbsVecI32x4 */,\n  /** i32x4.neg */\n  NegI32x4 = 78 /* _BinaryenNegVecI32x4 */,\n  /** i32x4.all_true */\n  AllTrueI32x4 = 79 /* _BinaryenAllTrueVecI32x4 */,\n  /** i32x4.bitmask */\n  BitmaskI32x4 = 80 /* _BinaryenBitmaskVecI32x4 */,\n  /** i64x2.abs */\n  AbsI64x2 = 81 /* _BinaryenAbsVecI64x2 */,\n  /** i64x2.neg */\n  NegI64x2 = 82 /* _BinaryenNegVecI64x2 */,\n  /** i64x2.all_true */\n  AllTrueI64x2 = 83 /* _BinaryenAllTrueVecI64x2 */,\n  /** i64x2.bitmask */\n  BitmaskI64x2 = 84 /* _BinaryenBitmaskVecI64x2 */,\n  /** f32x4.abs */\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  /** f32x4.neg */\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  /** f32x4.sqrt */\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  /** f32x4.ceil */\n  CeilF32x4 = 88 /* _BinaryenCeilVecF32x4 */,\n  /** f32x4.floor */\n  FloorF32x4 = 89 /* _BinaryenFloorVecF32x4 */,\n  /** f32x4.trunc */\n  TruncF32x4 = 90 /* BinaryenTruncVecF32x4 */,\n  /** f32x4.nearest */\n  NearestF32x4 = 91 /* BinaryenNearestVecF32x4 */,\n  /** f64x2.abs */\n  AbsF64x2 = 92 /* _BinaryenAbsVecF64x2 */,\n  /** f64x2.neg */\n  NegF64x2 = 93 /* _BinaryenNegVecF64x2 */,\n  /** f64x2.sqrt */\n  SqrtF64x2 = 94 /* _BinaryenSqrtVecF64x2 */,\n  /** f64x2.ceil */\n  CeilF64x2 = 95 /* _BinaryenCeilVecF64x2 */,\n  /** f64x2.floor */\n  FloorF64x2 = 96 /* _BinaryenFloorVecF64x2 */,\n  /** f64x2.trunc */\n  TruncF64x2 = 97 /* _BinaryenTruncVecF64x2 */,\n  /** f64x2.nearest */\n  NearestF64x2 = 98 /* _BinaryenNearestVecF64x2 */,\n  /** i16x8.extadd_pairwise_i8x16_s */\n  ExtaddPairwiseI8x16ToI16x8 = 99 /* _BinaryenExtAddPairwiseSVecI8x16ToI16x8 */,\n  /** i16x8.extadd_pairwise.i8x16_u */\n  ExtaddPairwiseU8x16ToU16x8 = 100 /* _BinaryenExtAddPairwiseUVecI8x16ToI16x8 */,\n  /** i32x4.extadd_pairwise.i16x8_s */\n  ExtaddPairwiseI16x8ToI32x4 = 101 /* _BinaryenExtAddPairwiseSVecI16x8ToI32x4 */,\n  /** i32x4.extadd_pairwise.i64x8_u */\n  ExtaddPairwiseU16x8ToU32x4 = 102 /* _BinaryenExtAddPairwiseUVecI16x8ToI32x4 */,\n  /** i32x4.trunc_sat_f32x4_s */\n  TruncSatF32x4ToI32x4 = 103 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  /** i32x4.trunc_sat_f32x4_u */\n  TruncSatF32x4ToU32x4 = 104 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  /** f32x4.convert_i32x4_s */\n  ConvertI32x4ToF32x4 = 105 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  /** f32x4.convert_i32x4_u */\n  ConvertU32x4ToF32x4 = 106 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  /** i16x8.extend_low_i8x16_s */\n  ExtendLowI8x16ToI16x8 = 107 /* _BinaryenExtendLowSVecI8x16ToVecI16x8 */,\n  /** i16x8.extend_high_i8x16_s */\n  ExtendHighI8x16ToI16x8 = 108 /* _BinaryenExtendHighSVecI8x16ToVecI16x8 */,\n  /** i16x8.extend_low_i8x16_u */\n  ExtendLowU8x16ToU16x8 = 109 /* _BinaryenExtendLowUVecI8x16ToVecI16x8 */,\n  /** i16x8.extend_high_i8x16_u */\n  ExtendHighU8x16ToU16x8 = 110 /* _BinaryenExtendHighUVecI8x16ToVecI16x8 */,\n  /** i32x4.extend_low_i16x8_s */\n  ExtendLowI16x8ToI32x4 = 111 /* _BinaryenExtendLowSVecI16x8ToVecI32x4 */,\n  /** i32x4.extend_high_i16x8_s */\n  ExtendHighI16x8ToI32x4 = 112 /* _BinaryenExtendHighSVecI16x8ToVecI32x4 */,\n  /** i32x4.extend_low_i16x8_u */\n  ExtendLowU16x8ToU32x4 = 113 /* _BinaryenExtendLowUVecI16x8ToVecI32x4 */,\n  /** i32x4.extend_high_i16x8_u */\n  ExtendHighU16x8ToU32x4 = 114 /* _BinaryenExtendHighUVecI16x8ToVecI32x4 */,\n  /** i64x2.extend_low_i32x4_s */\n  ExtendLowI32x4ToI64x2 = 115 /* _BinaryenExtendLowSVecI32x4ToVecI64x2 */,\n  /** i64x2.extend_high_i32x4_s */\n  ExtendHighI32x4ToI64x2 = 116 /* _BinaryenExtendHighSVecI32x4ToVecI64x2 */,\n  /** i64x2.extend_low_i32x4_u */\n  ExtendLowU32x4ToU64x2 = 117 /* _BinaryenExtendLowUVecI32x4ToVecI64x2 */,\n  /** i64x2.extend_high_i32x4_u */\n  ExtendHighU32x4ToU64x2 = 118 /* _BinaryenExtendHighUVecI32x4ToVecI64x2 */,\n  /** f32x4.convert_i32x4_s */\n  ConvertLowI32x4ToF64x2 = 119 /* _BinaryenConvertLowSVecI32x4ToVecF64x2 */,\n  /** f32x4.convert_i32x4_u */\n  ConvertLowU32x4ToF64x2 = 120 /* _BinaryenConvertLowUVecI32x4ToVecF64x2 */,\n  /** i32x4.trunc_sat_f64x2_s_zero */\n  TruncSatF64x2ToI32x4Zero = 121 /* _BinaryenTruncSatZeroSVecF64x2ToVecI32x4 */,\n  /** i32x4.trunc_sat_f64x2_u_zero */\n  TruncSatF64x2ToU32x4Zero = 122 /* _BinaryenTruncSatZeroUVecF64x2ToVecI32x4 */,\n  /** f32x4.demote_f64x2_zero */\n  DemoteZeroF64x2ToF32x4 = 123 /* _BinaryenDemoteZeroVecF64x2ToVecF32x4 */,\n  /** f64x2.promote_low_f32x4 */\n  PromoteLowF32x4ToF64x2 = 124 /* _BinaryenPromoteLowVecF32x4ToVecF64x2 */,\n\n  _last = PromoteLowF32x4ToF64x2,\n\n  // Target dependent\n\n  /** i32.clz or i64.clz, depending on target word size */\n  ClzSize,\n  /** i32.ctz or i64.ctz, depending on target word size */\n  CtzSize,\n  /** i32.popcnt or i64.popcnt, depending on target word size */\n  PopcntSize,\n  /** i32.eqz or i64.eqz, depending on target word size */\n  EqzSize\n}\n\n/** Binaryen binary operation constants. */\nexport const enum BinaryOp {\n  /** i32.add */\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  /** i32.sub */\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  /** i32.mul */\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  /** i32.div_s */\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  /** i32.div_u */\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  /** i32.rem_s */\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  /** i32.rem_u */\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  /** i32.and */\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  /** i32.or */\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  /** i32.xor */\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  /** i32.shl */\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  /** i32.shr_s */\n  ShrI32 = 11 /* _BinaryenShrSInt32 */,\n  /** i32.shr_u */\n  ShrU32 = 12 /* _BinaryenShrUInt32 */,\n  /** i32.rotl */\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  /** i32.rotr */\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  /** i32.eq */\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  /** i32.ne */\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  /** i32.lt_s */\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  /** i32.lt_u */\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  /** i32.le_s */\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  /** i32.le_u */\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  /** i32.gt_s */\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  /** i32.gt_u */\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  /** i32.ge_s */\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  /** i32.ge_u */\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  /** i64.add */\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  /** i64.sub */\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  /** i64.mul */\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  /** i64.div_s */\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  /** i64.div_u */\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  /** i64.rem_s */\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  /** i64.rem_u */\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  /** i64.and */\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  /** i64.or */\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  /** i64.xor */\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  /** i64.shl */\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  /** i64.shr_s */\n  ShrI64 = 36 /* _BinaryenShrSInt64 */,\n  /** i64.shr_u */\n  ShrU64 = 37 /* _BinaryenShrUInt64 */,\n  /** i64.rotl */\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  /** i64.rotr */\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  /** i64.eq */\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  /** i64.ne */\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  /** i64.lt_s */\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  /** i64.lt_u */\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  /** i64.le_s */\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  /** i64.le_u */\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  /** i64.gt_s */\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  /** i64.gt_u */\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  /** i64.ge_s */\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  /** i64.ge_u */\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  /** f32.add */\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  /** f32.sub */\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  /** f32.mul */\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  /** f32.div */\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  /** f32.copysign */\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  /** f32.min */\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  /** f32.max */\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  /** f32.eq */\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  /** f32.ne */\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  /** f32.lt */\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  /** f32.le */\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  /** f32.gt */\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  /** f32.ge */\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  /** f64.add */\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  /** f64.sub */\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  /** f64.mul */\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  /** f64.div */\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  /** f64.copysign */\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  /** f64.min */\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  /** f64.max */\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  /** f64.eq */\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  /** f64.ne */\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  /** f64.lt */\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  /** f64.le */\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  /** f64.gt */\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  /** f64.ge */\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n\n  /** i8x16.eq */\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  /** i8x16.he */\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  /** i8x16.lt_s */\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  /** i8x16.lt_u */\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  /** i8x16.gt_s */\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  /** i8x16.gt_u */\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  /** i8x16.le_s */\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  /** i8x16.le_u */\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  /** i8x16.ge_s */\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  /** i8x16.ge_u */\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  /** i16x8.eq */\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  /** i16x8.ne */\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  /** i16x8.lt_s */\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  /** i16x8.lt_u */\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  /** i16x8.gt_s */\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  /** i16x8.gt_u */\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  /** i16x8.le_s */\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  /** i16x8.le_u */\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  /** i16x8.ge_s */\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  /** i16x8.ge_u */\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  /** i32x4.eq */\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  /** i32x4.ne */\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  /** i32x4.lt_s */\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  /** i32x4.lt_u */\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  /** i32x4.gt_s */\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  /** i32x4.gt_u */\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  /** i32x4.le_s */\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  /** i32x4.le_u */\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  /** i32x4.ge_s */\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  /** i32x4.ge_u */\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  /** i64x2.eq */\n  EqI64x2 = 106 /* _BinaryenEqVecI64x2 */,\n  /** i64x2.ne */\n  NeI64x2 = 107 /* _BinaryenNeVecI64x2 */,\n  /** i64x2.lt_s */\n  LtI64x2 = 108 /* _BinaryenLtSVecI64x2 */,\n  /** i64x2.gt_s */\n  GtI64x2 = 109 /* _BinaryenGtSVecI64x2 */,\n  /** i64x2.le_s */\n  LeI64x2 = 110 /* _BinaryenLeSVecI64x2 */,\n  /** i64x2.ge_s */\n  GeI64x2 = 111 /* _BinaryenGeSVecI64x2 */,\n  /** f32x4.eq */\n  EqF32x4 = 112 /* _BinaryenEqVecF32x4 */,\n  /** f32x4.ne */\n  NeF32x4 = 113 /* _BinaryenNeVecF32x4 */,\n  /** f32x4.lt */\n  LtF32x4 = 114 /* _BinaryenLtVecF32x4 */,\n  /** f32x4.gt */\n  GtF32x4 = 115 /* _BinaryenGtVecF32x4 */,\n  /** f32x4.le */\n  LeF32x4 = 116 /* _BinaryenLeVecF32x4 */,\n  /** f32x4.ge */\n  GeF32x4 = 117 /* _BinaryenGeVecF32x4 */,\n  /** f64x2.eq */\n  EqF64x2 = 118 /* _BinaryenEqVecF64x2 */,\n  /** f64x2.ne */\n  NeF64x2 = 119 /* _BinaryenNeVecF64x2 */,\n  /** f64x2.lt */\n  LtF64x2 = 120 /* _BinaryenLtVecF64x2 */,\n  /** f64x2.gt */\n  GtF64x2 = 121 /* _BinaryenGtVecF64x2 */,\n  /** f64x2.le */\n  LeF64x2 = 122 /* _BinaryenLeVecF64x2 */,\n  /** f64x2.ge */\n  GeF64x2 = 123 /* _BinaryenGeVecF64x2 */,\n  /** v128.and */\n  AndV128 = 124 /* _BinaryenAndVec128 */,\n  /** v128.or */\n  OrV128 = 125 /* _BinaryenOrVec128 */,\n  /** v128.xor */\n  XorV128 = 126 /* _BinaryenXorVec128 */,\n  /** v128.andnot */\n  AndnotV128 = 127 /* _BinaryenAndNotVec128 */,\n  /** i8x16.add */\n  AddI8x16 = 128 /* _BinaryenAddVecI8x16 */,\n  /** i8x16.add_sat_s */\n  AddSatI8x16 = 129 /* _BinaryenAddSatSVecI8x16 */,\n  /** i8x16.add_sat_u */\n  AddSatU8x16 = 130 /* _BinaryenAddSatUVecI8x16 */,\n  /** i8x16.sub */\n  SubI8x16 = 131 /* _BinaryenSubVecI8x16 */,\n  /** i8x16.sub_sat_s */\n  SubSatI8x16 = 132 /* _BinaryenSubSatSVecI8x16 */,\n  /** i8x16.sub_sat_u */\n  SubSatU8x16 = 133 /* _BinaryenSubSatUVecI8x16 */,\n  /** i8x16.min_s */\n  MinI8x16 = 134 /* _BinaryenMinSVecI8x16 */,\n  /** i8x16.min_u */\n  MinU8x16 = 135 /* _BinaryenMinUVecI8x16 */,\n  /** i8x16.max_s */\n  MaxI8x16 = 136 /* _BinaryenMaxSVecI8x16 */,\n  /** i8x16.max_u */\n  MaxU8x16 = 137 /* _BinaryenMaxUVecI8x16 */,\n  /** i8x16.avgr_u */\n  AvgrU8x16 = 138 /* _BinaryenAvgrUVecI8x16 */,\n  /** i16x8.add */\n  AddI16x8 = 139 /* _BinaryenAddVecI16x8 */,\n  /** i16x8.add_sat_s */\n  AddSatI16x8 = 140 /* _BinaryenAddSatSVecI16x8 */,\n  /** i16x8.add_sat_u */\n  AddSatU16x8 = 141 /* _BinaryenAddSatUVecI16x8 */,\n  /** i16x8.sub */\n  SubI16x8 = 142 /* _BinaryenSubVecI16x8 */,\n  /** i16x8.sub_sat_s */\n  SubSatI16x8 = 143 /* _BinaryenSubSatSVecI16x8 */,\n  /** i16x8.sub_sat_u */\n  SubSatU16x8 = 144 /* _BinaryenSubSatUVecI16x8 */,\n  /** i16x8.mul */\n  MulI16x8 = 145 /* _BinaryenMulVecI16x8 */,\n  /** i16x8.min_s */\n  MinI16x8 = 146 /* _BinaryenMinSVecI16x8 */,\n  /** i16x8.min_u */\n  MinU16x8 = 147 /* _BinaryenMinUVecI16x8 */,\n  /** i16x8.max_s */\n  MaxI16x8 = 148 /* _BinaryenMaxSVecI16x8 */,\n  /** i16x8.max_u */\n  MaxU16x8 = 149 /* _BinaryenMaxUVecI16x8 */,\n  /** i16x8.avgr_u */\n  AvgrU16x8 = 150 /* _BinaryenAvgrUVecI16x8 */,\n  /** i16x8.q15mulr_sat_s */\n  Q15mulrSatI16x8 = 151 /* _BinaryenQ15MulrSatSVecI16x8 */,\n  /** i16x8.extmul_low_i8x16_s */\n  ExtmulLowI16x8 = 152 /* _BinaryenExtMulLowSVecI16x8 */,\n  /** i16x8.extmul_high_i8x16_s */\n  ExtmulHighI16x8 = 153 /* _BinaryenExtMulHighSVecI16x8 */,\n  /** i16x8.extmul_low_i8x16_u */\n  ExtmulLowU16x8 = 154 /* _BinaryenExtMulLowUVecI16x8 */,\n  /** i16x8.extmul_high_i8x16_u */\n  ExtmulHighU16x8 = 155 /* _BinaryenExtMulHighUVecI16x8 */,\n  /** i32x4.add */\n  AddI32x4 = 156 /* _BinaryenAddVecI32x4 */,\n  /** i32x4.sub */\n  SubI32x4 = 157 /* _BinaryenSubVecI32x4 */,\n  /** i32x4.mul */\n  MulI32x4 = 158 /* _BinaryenMulVecI32x4 */,\n  /** i32x4.min_s */\n  MinI32x4 = 159 /* _BinaryenMinSVecI32x4 */,\n  /** i32x4.min_u */\n  MinU32x4 = 160 /* _BinaryenMinUVecI32x4 */,\n  /** i32x4.max_s */\n  MaxI32x4 = 161 /* _BinaryenMaxSVecI32x4 */,\n  /** i32x4.max_u */\n  MaxU32x4 = 162 /* _BinaryenMaxUVecI32x4 */,\n  /** i32x4.dot_i16x8_s */\n  DotI16x8 = 163 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  /** i32x4.extmul_low_i16x8_s */\n  ExtmulLowI32x4 = 164 /* _BinaryenExtMulLowSVecI32x4 */,\n  /** i32x4.extmul_high_i16x8_s */\n  ExtmulHighI32x4 = 165 /* _BinaryenExtMulHighSVecI32x4 */,\n  /** i32x4.extmul_low_i16x8_u */\n  ExtmulLowU32x4 = 166 /* _BinaryenExtMulLowUVecI32x4 */,\n  /** i32x4.extmul_high_i16x8_u */\n  ExtmulHighU32x4 = 167 /* _BinaryenExtMulHighUVecI32x4 */,\n  /** i64x2.add */\n  AddI64x2 = 168 /* _BinaryenAddVecI64x2 */,\n  /** i64x2.sub */\n  SubI64x2 = 169 /* _BinaryenSubVecI64x2 */,\n  /** i64x2.mul */\n  MulI64x2 = 170 /* _BinaryenMulVecI64x2 */,\n  /** i64x2.extmul_low_i32x4_s */\n  ExtmulLowI64x2 = 171 /* _BinaryenExtMulLowSVecI64x2 */,\n  /** i64x2.extmul_high_i32x4_s */\n  ExtmulHighI64x2 = 172 /* _BinaryenExtMulHighSVecI64x2 */,\n  /** i64x2.extmul_low_i32x4_u */\n  ExtmulLowU64x2 = 173 /* _BinaryenExtMulLowUVecI64x2 */,\n  /** i64x2.extmul_high_i32x4_u */\n  ExtmulHighU64x2 = 174 /* _BinaryenExtMulHighUVecI64x2 */,\n  /** f32x4.add */\n  AddF32x4 = 175 /* _BinaryenAddVecF32x4 */,\n  /** f32x4.sub */\n  SubF32x4 = 176 /* _BinaryenSubVecF32x4 */,\n  /** f32x4.mul */\n  MulF32x4 = 177 /* _BinaryenMulVecF32x4 */,\n  /** f32x4.div */\n  DivF32x4 = 178 /* _BinaryenDivVecF32x4 */,\n  /** f32x4.min */\n  MinF32x4 = 179 /* _BinaryenMinVecF32x4 */,\n  /** f32x4.max */\n  MaxF32x4 = 180 /* _BinaryenMaxVecF32x4 */,\n  /** f32x4.pmin */\n  PminF32x4 = 181 /* _BinaryenPMinVecF32x4 */,\n  /** f32x4.pmax */\n  PmaxF32x4 = 182 /* _BinaryenPMaxVecF32x4 */,\n  /** f64x2.add */\n  AddF64x2 = 183 /* _BinaryenAddVecF64x2 */,\n  /** f64x2.sub */\n  SubF64x2 = 184 /* _BinaryenSubVecF64x2 */,\n  /** f64x2.mul */\n  MulF64x2 = 185 /* _BinaryenMulVecF64x2 */,\n  /** f64x2.div */\n  DivF64x2 = 186 /* _BinaryenDivVecF64x2 */,\n  /** f64x2.min */\n  MinF64x2 = 187 /* _BinaryenMinVecF64x2 */,\n  /** f64x2.max */\n  MaxF64x2 = 188 /* _BinaryenMaxVecF64x2 */,\n  /** f64x2.pmin */\n  PminF64x2 = 189 /* _BinaryenPMinVecF64x2 */,\n  /** f64x2.pmax */\n  PmaxF64x2 = 190 /* _BinaryenPMaxVecF64x2 */,\n  /** i8x16.narrow_i16x8_s */\n  NarrowI16x8ToI8x16 = 191 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  /** i8x16.narrow_i16x8_u */\n  NarrowU16x8ToU8x16 = 192 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  /** i16x8.narrow_i32x4_s */\n  NarrowI32x4ToI16x8 = 193 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  /** i16x8.narrow_i32x4_u */\n  NarrowU32x4ToU16x8 = 194 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  /** i8x16.swizzle */\n  SwizzleI8x16 = 195 /* _BinaryenSwizzleVecI8x16 */,\n\n  _last = SwizzleI8x16,\n\n  // Target dependent\n\n  /** i32.add or i64.add, depending on target word size */\n  AddSize,\n  /** i32.sub or i64.sub, depending on target word size */\n  SubSize,\n  /** i32.mul or i64.mul, depending on target word size */\n  MulSize,\n  /** i32.div_s or i64.div_s, depending on target word size */\n  DivISize,\n  /** i32.div_u or i64.div_u, depending on target word size */\n  DivUSize,\n  /** i32.rem_s or i64.rem_s, depending on target word size */\n  RemISize,\n  /** i32.rem_u or i64.rem_u, depending on target word size */\n  RemUSize,\n  /** i32.and or i64.and, depending on target word size */\n  AndSize,\n  /** i32.or or i64.or, depending on target word size */\n  OrSize,\n  /** i32.xor or i64.xor, depending on target word size */\n  XorSize,\n  /** i32.shl or i64.shl, depending on target word size */\n  ShlSize,\n  /** i32.shr_s or i64.shr_s, depending on target word size */\n  ShrISize,\n  /** i32.shr_u or i64.shr_u, depending on target word size */\n  ShrUSize,\n  /** i32.rotl or i64.rotl, depending on target word size */\n  RotlSize,\n  /** i32.rotr or i64.rotr, depending on target word size */\n  RotrSize,\n  /** i32.eq or i64.eq, depending on target word size */\n  EqSize,\n  /** i32.ne or i64.ne, depending on target word size */\n  NeSize,\n  /** i32.lt_s or i64.lt_s, depending on target word size */\n  LtISize,\n  /** i32.lt_u or i64.lt_u, depending on target word size */\n  LtUSize,\n  /** i32.le_s or i64.le_s, depending on target word size */\n  LeISize,\n  /** i32.le_u or i64.le_u, depending on target word size */\n  LeUSize,\n  /** i32.gt_s or i64.gt_s, depending on target word size */\n  GtISize,\n  /** i32.gt_u or i64.gt_u, depending on target word size */\n  GtUSize,\n  /** i32.ge_s or i64.ge_s, depending on target word size */\n  GeISize,\n  /** i32.ge_u or i64.ge_u, depending on target word size */\n  GeUSize\n}\n\n/** Binaryen atomic read-modify-write operation constants. */\nexport const enum AtomicRMWOp {\n  /** i32.atomic.rmw.add, i32.atomic.rmw8.add_u, i32.atomic.rmw16.add_u, i64.atomic.rmw.add, i64.atomic.rmw8.add_u, i64.atomic.rmw16.add_u, i64.atomic.rmw32.add_u */\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  /** i32.atomic.rmw.sub, i32.atomic.rmw8.sub_u, i32.atomic.rmw16.sub_u, i64.atomic.rmw.sub, i64.atomic.rmw8.sub_u, i64.atomic.rmw16.sub_u, i64.atomic.rmw32.sub_u */\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  /** i32.atomic.rmw.and, i32.atomic.rmw8.and_u, i32.atomic.rmw16.and_u, i64.atomic.rmw.and, i64.atomic.rmw8.and_u, i64.atomic.rmw16.and_u, i64.atomic.rmw32.and_u */\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  /** i32.atomic.rmw.or, i32.atomic.rmw8.or_u, i32.atomic.rmw16.or_u, i64.atomic.rmw.or, i64.atomic.rmw8.or_u, i64.atomic.rmw16.or_u, i64.atomic.rmw32.or_u */\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  /** i32.atomic.rmw.xor, i32.atomic.rmw8.xor_u, i32.atomic.rmw16.xor_u, i64.atomic.rmw.xor, i64.atomic.rmw8.xor_u, i64.atomic.rmw16.xor_u, i64.atomic.rmw32.xor_u */\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  /** i32.atomic.rmw.xchg, i32.atomic.rmw8.xchg_u, i32.atomic.rmw16.xchg_u, i64.atomic.rmw.xchg, i64.atomic.rmw8.xchg_u, i64.atomic.rmw16.xchg_u, i64.atomic.rmw32.xchg_u */\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\n/** Binaryen SIMD extract operation constants. */\nexport const enum SIMDExtractOp {\n  /** i8x16.extract_lane_s */\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  /** i8x16.extract_lane_u */\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  /** i16x8.extract_lane_s */\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  /** i16x8.extract_lane_u */\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  /** i32x4.extract_lane_s */\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  /** i32x4.extract_lane_u */\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  /** i64x2.extract_lane_s */\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  /** i64x2.extract_lane_u */\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\n/** Binaryen SIMD replace operation constants. */\nexport const enum SIMDReplaceOp {\n  /** i8x16.replace_lane */\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  /** i16x8.replace_lane */\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  /** i32x4.replace_lane */\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  /** i64x2.replace_lane */\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  /** f32x4.replace_lane */\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  /** f64x2.replace_lane */\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\n/** Binaryen SIMD shift operation constants. */\nexport const enum SIMDShiftOp {\n  /** i8x16.shl */\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  /** i8x16.shr_s */\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  /** i8x16.shr_u */\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  /** i16x8.shl */\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  /** i16x8.shr_s */\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  /** i16x8.shr_u */\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  /** i16x8.shl */\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  /** i32x4.shr_s */\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  /** i32x4.shr_u */\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  /** i64x2.shl */\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  /** i64x2.shr_u */\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  /** i64x2.shr_u */\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\n/** Binaryen SIMD load operation constants. */\nexport const enum SIMDLoadOp {\n  /** v128.load8_splat */\n  Load8Splat = 0 /* _BinaryenLoad8SplatVec128 */,\n  /** v128.load16_splat */\n  Load16Splat = 1 /* _BinaryenLoad16SplatVec128 */,\n  /** v128.load32_splat */\n  Load32Splat = 2 /* _BinaryenLoad32SplatVec128 */,\n  /** v128.load64_splat */\n  Load64Splat = 3 /* _BinaryenLoad64SplatVec128 */,\n  /** v128.load8x8_s */\n  Load8x8S = 4 /* _BinaryenLoad8x8SVec128 */,\n  /** v128.load8x8_u */\n  Load8x8U = 5 /* _BinaryenLoad8x8UVec128 */,\n  /** v128.load16x4_s */\n  Load16x4S = 6 /* _BinaryenLoad16x4SVec128 */,\n  /** v128.load16x4_u */\n  Load16x4U = 7 /* _BinaryenLoad16x4UVec128 */,\n  /** v128.load32x2_s */\n  Load32x2S = 8 /* _BinaryenLoad32x2SVec128 */,\n  /** v128.load32x2_u */\n  Load32x2U = 9 /* _BinaryenLoad32x2UVec128 */,\n  /** v128.load32_zero */\n  Load32Zero = 10 /* _BinaryenLoad32ZeroVec128 */,\n  /** v128.load64_zero */\n  Load64Zero = 11 /* _BinaryenLoad64ZeroVec128 */,\n}\n\n/** Binaryen SIMD load/store lane operation constants. */\nexport const enum SIMDLoadStoreLaneOp {\n  /** v128.load8_lane */\n  Load8Lane = 0 /* _BinaryenLoad8LaneVec128 */,\n  /** v128.load16_lane */\n  Load16Lane = 1 /* _BinaryenLoad16LaneVec128 */,\n  /** v128.load32_lane */\n  Load32Lane = 2 /* _BinaryenLoad32LaneVec128 */,\n  /** v128.load64_lane */\n  Load64Lane = 3 /* _BinaryenLoad64LaneVec128 */,\n  /** v128.store8_lane */\n  Store8Lane = 4 /* _BinaryenStore8LaneVec128 */,\n  /** v128.store16_lane */\n  Store16Lane = 5 /* _BinaryenStore16LaneVec128 */,\n  /** v128.store32_lane */\n  Store32Lane = 6 /* _BinaryenStore32LaneVec128 */,\n  /** v128.store64_lane */\n  Store64Lane = 7 /* _BinaryenStore64LaneVec128 */,\n}\n\n/** Binaryen SIMD ternary operation constants. */\nexport const enum SIMDTernaryOp {\n  /** v128.bitselect */\n  Bitselect = 0 /* _BinaryenBitselectVec128 */\n}\n\n/** Binaryen RefIs operation constants. */\nexport const enum RefIsOp {\n  /** ref.is_null */\n  Null = 0 /* _BinaryenRefIsNull */,\n  /** ref.is_func */\n  Func = 1 /* _BinaryenRefIsFunc */,\n  /** ref.is_data */\n  Data = 2 /* _BinaryenRefIsData */,\n  /** ref.is_i31 */\n  I31 = 3 /* _BinaryenRefIsI31 */\n}\n\n/** Binaryen RefAs operation constants. */\nexport const enum RefAsOp {\n  /** ref.as_non_null */\n  NonNull = 0 /* _BinaryenRefAsNonNull */,\n  /** ref.as_func */\n  Func = 1 /* _BinaryenRefAsFunc */,\n  /** ref.as_data */\n  Data = 2 /* _BinaryenRefAsData */,\n  /** ref.as_i31 */\n  I31 = 3 /* _BinaryenRefAsI31 */,\n  /** extern.internalize */\n  ExternInternalize = 4 /* TODO_BinaryenExternInternalize */,\n  /** extern.externalize */\n  ExternExternalize = 5 /* TODO_BinaryenExternExternalize */\n}\n\n/** Binaryen BrOn operation constants. */\nexport const enum BrOnOp {\n  /** br_on_null */\n  Null = 0 /* TODO_BinaryenBrOnNull */,\n  /** br_on_non_null */\n  NonNull = 1 /* TODO_BinaryenBrOnNonNull */,\n  /** br_on_cast */\n  Cast = 2 /* TODO_BinaryenBrOnCast */,\n  /** br_on_cast_fail */\n  CastFail = 3 /* TODO_BinaryenBrOnCastFail */,\n  /** br_on_func */\n  Func = 4 /* TODO_BinaryenBrOnFunc */,\n  /** br_on_non_func */\n  NonFunc = 5 /* TODO_BinaryenBrOnNonFunc */,\n  /** br_on_data */\n  Data = 6 /* TODO_BinaryenBrOnData */,\n  /** br_on_non_data */\n  NonData = 7 /* TODO_BinaryenBrOnNonData */,\n  /** br_on_i31 */\n  I31 = 8 /* TODO_BinaryenBrOnI31 */,\n  /** br_on_non_i32 */\n  NonI31 = 9 /* TODO_BinaryenBrOnNonI31 */\n}\n\n/** Binaryen StringNew operation constants. */\nexport const enum StringNewOp {\n  /** string.new_wtf8 utf8 */\n  UTF8 = 0 /* TODO_BinaryenStringNewUTF8 */,\n  /** string.new_wtf8 wtf8 */\n  WTF8 = 1 /* TODO_BinaryenStringNewWTF8 */,\n  /** string.new_wtf8 replace */\n  Replace = 2 /* TODO_BinaryenStringNewReplace */,\n  /** string.new_wtf16 */\n  WTF16 = 3/* TODO_BinaryenStringNewWTF16 */,\n  /** string.new_wtf8_array utf8 */\n  UTF8Array = 4 /* TODO_BinaryenStringNewUTF8Array */,\n  /** string.new_wtf8_array wtf8 */\n  WTF8Array = 5 /* TODO_BinaryenStringNewWTF8Array */,\n  /** string.new_wtf8_array replace */\n  ReplaceArray = 6 /* TODO_BinaryenStringNewReplaceArray */,\n  /** string.new_wtf16_array */\n  WTF16Array = 7 /* TODO_BinaryenStringNewUTF16Array */\n}\n\n/** Binaryen StringMeasure operation constants. */\nexport const enum StringMeasureOp {\n  /** string.measure_wtf8 utf8 */\n  UTF8 = 0 /* TODO_BinaryenStringMeastureUTF8 */,\n  /** string.measure_wtf8 wtf8 */\n  WTF8 = 1 /* TODO_BinaryenStringMeastureWTF8 */,\n  /** string.measure_wtf16 */\n  WTF16 = 2 /* TODO_BinaryenStringMeastureWTF16 */,\n  /** string.is_usv_sequence */\n  IsUSV = 3 /* TODO_BinaryenStringMeasureIsUSV */,\n  /** stringview_wtf16.length */\n  WTF16View = 4 /* TODO_BinaryenStringMeasureWTF16View */\n}\n\n/** Binaryen StringEncode operation constants. */\nexport const enum StringEncodeOp {\n  /** string.encode_wtf8 utf8 */\n  UTF8 = 0 /* TODO_BinaryenStringEncodeUTF8 */,\n  /** string.encode_wtf8 wtf8 */\n  WTF8 = 1 /* TODO_BinaryenStringEncodeWTF8 */,\n  /** string.encode_wtf16 */\n  WTF16 = 2 /* TODO_BinaryenStringEncodeWTF16 */,\n  /** string.encode_wtf8_array utf8 */\n  UTF8Array = 3 /* TODO_BinaryenStringEncodeUTF8Array */,\n  /** string.encode_wtf8_array wtf8 */\n  WTF8Array = 4 /* TODO_BinaryenStringEncodeWTF8Array */,\n  /** string.encode_wtf16_array */\n  WTF16Array = 5 /* TODO_BinaryenStringEncodeWTF16Array */\n}\n\n/** Binaryen StringAs operation constants. */\nexport const enum StringAsOp {\n  /** string.as_wtf8 */\n  WTF8 = 0 /* TODO_BinaryenStringAsWTF8 */,\n  /** string.as_wtf16 */\n  WTF16 = 1 /* TODO_BinaryenStringAsWTF16 */,\n  /** string.as_iter */\n  Iter = 2 /* TODO_BinaryenStringAsIter */\n}\n\n/** Binaryen StringIterMove operation constants. */\nexport const enum StringIterMoveOp {\n  /** stringview_iter.advance */\n  Advance = 0 /* TODO_BinaryenStringIterMoveAdvance */,\n  /** stringview_iter.rewind */\n  Rewind = 1 /* TODO_BinaryenStringIterMoveRewind */\n}\n\n/** Binaryen StringSlice operation constants. */\nexport const enum StringSliceWTFOp {\n  /** stringview_wtf8.slice */\n  WTF8 = 0 /* TODO_BinaryenStringSliceWTF8 */,\n  /** stringview_wtf16.slice */\n  WTF16 = 1 /* TODO_BinaryenStringSliceWTF16 */\n}\n\n/** Binaryen expression runner flags. */\nexport const enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n  constructor(\n    /** Segment data. */\n    public buffer: Uint8Array,\n    /** Segment offset. */\n    public offset: i64\n  ) {}\n}\n\nexport class Module {\n  constructor(\n    /** Binaryen module reference. */\n    public ref: ModuleRef,\n    /** Whether a shadow stack is used. */\n    public useShadowStack: bool,\n    /** Architecture-dependent size type. */\n    public sizeType: TypeRef\n  ) {\n    assert(sizeType == TypeRef.I32 || sizeType == TypeRef.I64);\n    this.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n  }\n\n  private lit: usize;\n\n  static create(useShadowStack: bool, sizeType: TypeRef): Module {\n    return new Module(binaryen._BinaryenModuleCreate(), useShadowStack, sizeType);\n  }\n\n  static createFrom(buffer: Uint8Array, useShadowStack: bool, sizeType: TypeRef): Module {\n    var cArr = allocU8Array(buffer);\n    var module = new Module(binaryen._BinaryenModuleRead(cArr, buffer.length), useShadowStack, sizeType);\n    binaryen._free(changetype<usize>(cArr));\n    return module;\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  // isize<T>(value: T): ExpressionRef {\n  //   if (i64_is(value)) {\n  //     if (this.sizeType == TypeRef.I64) {\n  //       return this.i64(i64_low(value), i64_high(value));\n  //     }\n  //     assert(i64_is_i32(value));\n  //     return this.i32(i64_low(value));\n  //   }\n  //   return this.sizeType == TypeRef.I64\n  //     ? this.i64(i32(value), i32(value) < 0 ? -1 : 0)\n  //     : this.i32(i32(value));\n  // }\n\n  usize<T>(value: T): ExpressionRef {\n    if (i64_is(value)) {\n      if (this.sizeType == TypeRef.I64) {\n        return this.i64(i64_low(value), i64_high(value));\n      }\n      assert(i64_is_u32(value));\n      return this.i32(i64_low(value));\n    }\n    return this.sizeType == TypeRef.I64\n      ? this.i64(i32(value))\n      : this.i32(i32(value));\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) {\n      binaryen.__i32_store8(out + i, unchecked(bytes[i]));\n    }\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(type: TypeRef): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref, type);\n  }\n\n  ref_eq(left: ExpressionRef, right: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenRefEq(this.ref, left, right);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    value: ExpressionRef\n  ): ExpressionRef {\n    if (op > UnaryOp._last) {\n      let isWam64 = this.sizeType == TypeRef.I64;\n      switch (op) {\n        case UnaryOp.ClzSize:    op = isWam64 ? UnaryOp.ClzI64    : UnaryOp.ClzI32; break;\n        case UnaryOp.CtzSize:    op = isWam64 ? UnaryOp.CtzI64    : UnaryOp.CtzI32; break;\n        case UnaryOp.PopcntSize: op = isWam64 ? UnaryOp.PopcntI64 : UnaryOp.PopcntI32; break;\n        case UnaryOp.EqzSize:    op = isWam64 ? UnaryOp.EqzI64    : UnaryOp.EqzI32; break;\n        default: assert(false);\n      }\n    }\n    return binaryen._BinaryenUnary(this.ref, op, value);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    if (op > BinaryOp._last) {\n      let isWasm64 = this.sizeType == TypeRef.I64;\n      switch (op) {\n        case BinaryOp.AddSize:  op = isWasm64 ? BinaryOp.AddI64  : BinaryOp.AddI32; break;\n        case BinaryOp.SubSize:  op = isWasm64 ? BinaryOp.SubI64  : BinaryOp.SubI32; break;\n        case BinaryOp.MulSize:  op = isWasm64 ? BinaryOp.MulI64  : BinaryOp.MulI32; break;\n        case BinaryOp.DivISize: op = isWasm64 ? BinaryOp.DivI64  : BinaryOp.DivI32; break;\n        case BinaryOp.DivUSize: op = isWasm64 ? BinaryOp.DivU64  : BinaryOp.DivU32; break;\n        case BinaryOp.RemISize: op = isWasm64 ? BinaryOp.RemI64  : BinaryOp.RemI32; break;\n        case BinaryOp.RemUSize: op = isWasm64 ? BinaryOp.RemU64  : BinaryOp.RemU32; break;\n        case BinaryOp.AndSize:  op = isWasm64 ? BinaryOp.AndI64  : BinaryOp.AndI32; break;\n        case BinaryOp.OrSize:   op = isWasm64 ? BinaryOp.OrI64   : BinaryOp.OrI32; break;\n        case BinaryOp.XorSize:  op = isWasm64 ? BinaryOp.XorI64  : BinaryOp.XorI32; break;\n        case BinaryOp.ShlSize:  op = isWasm64 ? BinaryOp.ShlI64  : BinaryOp.ShlI32; break;\n        case BinaryOp.ShrISize: op = isWasm64 ? BinaryOp.ShrI64  : BinaryOp.ShrI32; break;\n        case BinaryOp.ShrUSize: op = isWasm64 ? BinaryOp.ShrU64  : BinaryOp.ShrU32; break;\n        case BinaryOp.RotlSize: op = isWasm64 ? BinaryOp.RotlI64 : BinaryOp.RotlI32; break;\n        case BinaryOp.RotrSize: op = isWasm64 ? BinaryOp.RotrI64 : BinaryOp.RotrI32; break;\n        case BinaryOp.EqSize:   op = isWasm64 ? BinaryOp.EqI64   : BinaryOp.EqI32; break;\n        case BinaryOp.NeSize:   op = isWasm64 ? BinaryOp.NeI64   : BinaryOp.NeI32; break;\n        case BinaryOp.LtISize:  op = isWasm64 ? BinaryOp.LtI64   : BinaryOp.LtI32; break;\n        case BinaryOp.LtUSize:  op = isWasm64 ? BinaryOp.LtU64   : BinaryOp.LtU32; break;\n        case BinaryOp.LeISize:  op = isWasm64 ? BinaryOp.LeI64   : BinaryOp.LeI32; break;\n        case BinaryOp.LeUSize:  op = isWasm64 ? BinaryOp.LeU64   : BinaryOp.LeU32; break;\n        case BinaryOp.GtISize:  op = isWasm64 ? BinaryOp.GtI64   : BinaryOp.GtI32; break;\n        case BinaryOp.GtUSize:  op = isWasm64 ? BinaryOp.GtU64   : BinaryOp.GtU32; break;\n        case BinaryOp.GeISize:  op = isWasm64 ? BinaryOp.GeI64   : BinaryOp.GeI32; break;\n        case BinaryOp.GeUSize:  op = isWasm64 ? BinaryOp.GeU64   : BinaryOp.GeU32; break;\n        default: assert(false);\n      }\n    }\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  memory_size(name: string = CommonNames.DefaultMemory, is64: bool = false): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenMemorySize(this.ref, cStr, is64);\n  }\n\n  memory_grow(delta: ExpressionRef, name: string = CommonNames.DefaultMemory, is64: bool = false): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenMemoryGrow(this.ref, delta, cStr, is64);\n  }\n\n  table_size(name: string): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenTableSize(this.ref, cStr);\n  }\n\n  table_grow(name: string, delta: ExpressionRef, value: ExpressionRef = 0): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenTableGrow(this.ref, cStr, value, delta);\n  }\n\n  local_get(\n    index: i32,\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  tostack(value: ExpressionRef): ExpressionRef {\n    if (this.useShadowStack) {\n      let type = binaryen._BinaryenExpressionGetType(value);\n      assert(type == TypeRef.I32 || type == TypeRef.Unreachable);\n      return this.call(BuiltinNames.tostack, [ value ], type);\n    }\n    return value;\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    isManaged: bool,\n    type: TypeRef = TypeRef.Auto,\n  ): ExpressionRef {\n    if (type == TypeRef.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    if (isManaged && this.useShadowStack) {\n      value = this.tostack(value);\n    }\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: TypeRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  table_get(\n    name: string,\n    index: ExpressionRef,\n    type: TypeRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenTableGet(this.ref, cStr, index, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: TypeRef,\n    offset: Index = 0,\n    align: Index = bytes, // naturally aligned by default\n    name: string = CommonNames.DefaultMemory\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenLoad(this.ref, bytes, signed, offset, align, type, ptr, cStr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: TypeRef,\n    offset: Index = 0,\n    align: Index = bytes, // naturally aligned by default\n    name: string = CommonNames.DefaultMemory\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type, cStr);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: TypeRef,\n    offset: Index = 0,\n    name: string = CommonNames.DefaultMemory\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr, cStr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: TypeRef,\n    offset: Index = 0,\n    name: string = CommonNames.DefaultMemory\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type, cStr);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: TypeRef,\n    name: string = CommonNames.DefaultMemory\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type, cStr);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: TypeRef,\n    name: string = CommonNames.DefaultMemory\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type, cStr);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: TypeRef,\n    name: string = CommonNames.DefaultMemory\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType, cStr);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef,\n    name: string = CommonNames.DefaultMemory\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount, cStr);\n  }\n\n  atomic_fence(name: string | null = null): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAtomicFence(this.ref, cStr);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef,\n    isManaged: bool\n  ): ExpressionRef {\n    if (isManaged && this.useShadowStack) {\n      value = this.tostack(value);\n    }\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  table_set(\n    name: string,\n    index: ExpressionRef,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenTableSet(this.ref, cStr, index, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: TypeRef = TypeRef.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: TypeRef = TypeRef.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      if (singleType != TypeRef.Unreachable && singleType != type) {\n        // can happen when there was a diagnostic prior\n        return this.unreachable();\n      }\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  /** Drops an expression if it evaluates to a value. */\n  maybeDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    var type = binaryen._BinaryenExpressionGetType(expression);\n    if (type != TypeRef.None && type != TypeRef.Unreachable) {\n      return binaryen._BinaryenDrop(this.ref, expression);\n    }\n    return expression;\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition, this.ref) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<StringRef>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      unchecked(strs[i] = this.allocStringCached(names[i]));\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: TypeRef,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        )\n      : binaryen._BinaryenCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: TypeRef\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    tableName: string | null,\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: TypeRef,\n    results: TypeRef,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(tableName != null\n      ? tableName\n      : CommonNames.DefaultTable\n    );\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(\n          this.ref, cStr, index, cArr, operands ? operands.length : 0, params, results\n        )\n      : binaryen._BinaryenCallIndirect(\n          this.ref, cStr, index, cArr, operands ? operands.length : 0, params, results\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    tableName: string | null,\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: TypeRef,\n    results: TypeRef\n  ): ExpressionRef {\n    return this.call_indirect(tableName, index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef,\n    destName: string = CommonNames.DefaultMemory,\n    sourceName: string = CommonNames.DefaultMemory\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(destName);\n    var cStr2 = this.allocStringCached(sourceName);\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size, cStr1, cStr2);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef,\n    name: string = CommonNames.DefaultMemory\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size, cStr);\n  }\n\n  // exception handling\n\n  try(\n    name: string | null,\n    body: ExpressionRef,\n    catchTags: string[],\n    catchBodies: ExpressionRef[],\n    delegateTarget: string | null = null\n  ): ExpressionRef {\n    var numCatchTags = catchTags.length;\n    var strs = new Array<TagRef>(numCatchTags);\n    for (let i = 0; i < numCatchTags; ++i) {\n      strs[i] = this.allocStringCached(catchTags[i]);\n    }\n    var cArr1 = allocPtrArray(strs);\n    var cArr2 = allocPtrArray(catchBodies);\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(delegateTarget);\n    var ret = binaryen._BinaryenTry(\n      this.ref, cStr1, body, cArr1, numCatchTags, cArr2, catchBodies.length, cStr2\n    );\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    return ret;\n  }\n\n  throw(\n    tagName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(tagName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    target: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    return binaryen._BinaryenRethrow(this.ref, cStr);\n  }\n\n  // multi value (pseudo instructions)\n\n  pop(\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32,\n    name: string = CommonNames.DefaultMemory\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr, cStr);\n  }\n\n  simd_loadstorelane(\n    op: SIMDLoadStoreLaneOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32,\n    index: u8,\n    vec: ExpressionRef,\n    name: string = CommonNames.DefaultMemory\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenSIMDLoadStoreLane(this.ref, op, offset, align, index, ptr, vec, cStr);\n  }\n\n  // reference types / gc\n\n  ref_is(\n    op: RefIsOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIs(this.ref, op, expr);\n  }\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    if (isNullableType(getExpressionType(expr))) {\n      return binaryen._BinaryenRefIs(this.ref, RefIsOp.Null, expr);\n    } else {\n      return this.i32(0); // false literal\n    }\n  }\n\n  ref_as(\n    op: RefAsOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefAs(this.ref, op, expr);\n  }\n\n  ref_as_nonnull(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    if (isNullableType(getExpressionType(expr))) {\n      return binaryen._BinaryenRefAs(this.ref, RefAsOp.NonNull, expr);\n    } else {\n      return expr;\n    }\n  }\n\n  ref_func(\n    name: string,\n    type: TypeRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr, type);\n  }\n\n  i31_new(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenI31New(this.ref, value);\n  }\n\n  i31_get(\n    expr: ExpressionRef,\n    signed: bool\n  ): ExpressionRef {\n    return binaryen._BinaryenI31Get(this.ref, expr, signed);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: TypeRef,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // tags\n\n  addTag(\n    name: string,\n    params: TypeRef,\n    results: TypeRef\n  ): TagRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddTag(this.ref, cStr, params, results);\n  }\n\n  getTag(\n    name: string\n  ): TagRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetTag(this.ref, cStr);\n  }\n\n  removeTag(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveTag(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: TypeRef,\n    results: TypeRef,\n    varTypes: TypeRef[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(\n      this.ref,\n      cStr,\n      params,\n      results,\n      cArr,\n      varTypes ? varTypes.length : 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  setLocalName(funcRef: FunctionRef, index: u32, name: string): void {\n    binaryen._BinaryenFunctionSetLocalName(funcRef, index, this.allocStringCached(name));\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  hasFunction(name: string): bool {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr) != 0;\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(\n    result: TypeRef,\n    paramTypes: TypeRef[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addTagExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTagExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  hasExport(externalName: string): bool {\n    var cStr = this.allocStringCached(externalName);\n    return binaryen._BinaryenGetExport(this.ref, cStr) != 0;\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: TypeRef,\n    results: TypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: TypeRef,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addTagImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: TypeRef,\n    results: TypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTagImport(\n      this.ref, cStr1, cStr2, cStr3, params, results\n    );\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    name: string = CommonNames.DefaultMemory,\n    shared: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(exportName);\n    var cStr2 = this.allocStringCached(name);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let segment = unchecked(segments[i]);\n      let buffer = segment.buffer;\n      let offset = segment.offset;\n      unchecked(segs[i] = allocU8Array(buffer));\n      unchecked(psvs[i] = 0); // no passive segments currently\n      unchecked(offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset))\n      );\n      unchecked(sizs[i] = buffer.length);\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(\n      this.ref, initial, maximum, cStr1, cArr1, cArr2, cArr3, cArr4, k, shared, cStr2\n    );\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) {\n      binaryen._free(unchecked(segs[i]));\n    }\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  addFunctionTable(\n    name: string,\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var cStr = this.allocStringCached(name);\n    var numNames = funcs.length;\n    var names = new Array<StringRef>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      unchecked(names[i] = this.allocStringCached(funcs[i]));\n    }\n    var cArr = allocPtrArray(names);\n    var tableRef = binaryen._BinaryenGetTable(this.ref, cStr);\n    if (!tableRef) {\n      tableRef = binaryen._BinaryenAddTable(this.ref, cStr, initial, maximum, TypeRef.Funcref);\n    } else {\n      binaryen._BinaryenTableSetInitial(tableRef, initial);\n      binaryen._BinaryenTableSetMax(tableRef, maximum);\n    }\n    binaryen._BinaryenAddActiveElementSegment(this.ref, cStr, cStr, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  /* setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<CString>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(\n      this.ref, initial, maximum, cArr, numNames, offset\n    );\n    binaryen._free(cArr);\n  } */\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getZeroFilledMemory(): bool {\n    return binaryen._BinaryenGetZeroFilledMemory();\n  }\n\n  setZeroFilledMemory(on: bool): void {\n    binaryen._BinaryenSetZeroFilledMemory(on);\n  }\n\n  getFastMath(): bool {\n    return binaryen._BinaryenGetFastMath();\n  }\n\n  setFastMath(on: bool): void {\n    binaryen._BinaryenSetFastMath(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  getAllowInliningFunctionsWithLoops(): bool {\n    return binaryen._BinaryenGetAllowInliningFunctionsWithLoops();\n  }\n\n  setAllowInliningFunctionsWithLoops(enabled: bool): void {\n    binaryen._BinaryenSetAllowInliningFunctionsWithLoops(enabled);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<StringRef>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames - 1; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(\n    optimizeLevel: i32,\n    shrinkLevel: i32,\n    debugInfo: bool = false,\n    zeroFilledMemory: bool = false\n  ): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    this.setOptimizeLevel(optimizeLevel);\n    this.setShrinkLevel(shrinkLevel);\n    this.setDebugInfo(debugInfo);\n    this.setZeroFilledMemory(zeroFilledMemory);\n    this.setFastMath(true);\n    this.clearPassArguments();\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel == 0) {\n      this.setAlwaysInlineMaxSize(12);\n      this.setFlexibleInlineMaxSize(70);\n      this.setOneCallerInlineMaxSize(200);\n      this.setAllowInliningFunctionsWithLoops(optimizeLevel >= 3);\n    } else {\n      this.setAlwaysInlineMaxSize(\n        optimizeLevel <= 1 || shrinkLevel >= 2\n          ? 2\n          : 6\n      );\n      this.setFlexibleInlineMaxSize(65);\n      this.setOneCallerInlineMaxSize(80);\n      this.setAllowInliningFunctionsWithLoops(false);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n      if (optimizeLevel >= 2) {\n        passes.push(\"once-reduction\");\n        passes.push(\"inlining\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n        passes.push(\"code-folding\");\n        passes.push(\"ssa-nomerge\");\n        passes.push(\"local-cse\");\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"merge-blocks\");\n        passes.push(\"precompute-propagate\");\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"gufa-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"simplify-locals-nostructure\");\n        passes.push(\"flatten\");\n        passes.push(\"vacuum\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"vacuum\");\n        passes.push(\"licm\");\n        passes.push(\"merge-locals\");\n        passes.push(\"reorder-locals\");\n      }\n      passes.push(\"optimize-instructions\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"dce\");\n      }\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"inlining\");\n        passes.push(\"precompute-propagate\");\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n      }\n      passes.push(\"simplify-locals-notee-nostructure\");\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"local-cse\");\n      }\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n        passes.push(\"vacuum\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (this.getLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      if (optimizeLevel >= 2 && (this.getFeatures() & FeatureFlags.GC) != 0) {\n        passes.push(\"heap2local\");\n        passes.push(\"merge-locals\");\n        passes.push(\"local-subtyping\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n        passes.push(\"ssa-nomerge\");\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"precompute-propagate\");\n\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n          passes.push(\"local-cse\");\n\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"inlining\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"rse\");\n          passes.push(\"vacuum\");\n          passes.push(\"ssa-nomerge\");\n          passes.push(\"simplify-locals\");\n          passes.push(\"coalesce-locals\");\n        }\n        passes.push(\"optimize-instructions\");\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"merge-blocks\");\n        passes.push(\"vacuum\");\n\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"optimize-instructions\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      if (shrinkLevel >= 2) {\n        passes.push(\"merge-similar-functions\");\n      }\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null = null): BinaryModule {\n    assert(\n      binaryen._BinaryenSizeofLiteral() >=\n      binaryen._BinaryenSizeofAllocateAndWriteResult()\n    );\n\n    // now safely reuse lit buffer for BinaryenModuleAllocateAndWriteResult\n    var resPtr = this.lit;\n    var urlPtr = allocString(sourceMapUrl);\n\n    binaryen._BinaryenModuleAllocateAndWrite(resPtr, this.ref, urlPtr);\n\n    // read BinaryenModuleAllocateAndWriteResult struct\n    var binaryPtr = binaryen.__i32_load(resPtr + 0) as usize; // non-nullabe\n    var binaryLen = binaryen.__i32_load(resPtr + 4);\n    var srcMapPtr = binaryen.__i32_load(resPtr + 8) as usize; // nullable\n\n    var binary = new BinaryModule(\n      readBuffer(assert(binaryPtr), binaryLen),\n      readString(srcMapPtr)\n    );\n\n    if (urlPtr) binaryen._free(urlPtr);\n    if (srcMapPtr) binaryen._free(srcMapPtr);\n    binaryen._free(binaryPtr);\n\n    return binary;\n  }\n\n  toText(watFormat: bool = true): string {\n    var textPtr = watFormat\n      ? binaryen._BinaryenModuleAllocateAndWriteStackIR(this.ref, true)\n      : binaryen._BinaryenModuleAllocateAndWriteText(this.ref);\n    var text = readString(textPtr);\n    if (textPtr) binaryen._free(textPtr);\n    return text || \"\";\n  }\n\n  private cachedStringsToPointers: Map<string,usize> = new Map();\n  private cachedPointersToStrings: Map<usize,string | null> = new Map();\n\n  allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cached = this.cachedStringsToPointers;\n    if (cached.has(str)) return changetype<usize>(cached.get(str));\n    var ptr = allocString(str);\n    cached.set(str, ptr);\n    return ptr;\n  }\n\n  readStringCached(ptr: usize): string | null {\n    // Binaryen internalizes names, so using this method where it's safe can\n    // avoid quite a bit of unnecessary garbage.\n    if (ptr == 0) return null;\n    var cached = this.cachedPointersToStrings;\n    if (cached.has(ptr)) return changetype<string>(cached.get(ptr));\n    var str = readString(ptr);\n    cached.set(ptr, str);\n    return str;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStringsToPointers), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStringsToPointers.clear();\n    this.cachedPointersToStrings.clear();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  /** Makes a copy of a trivial expression (doesn't contain subexpressions). Returns `0` if non-trivial. */\n  tryCopyTrivialExpression(expr: ExpressionRef): ExpressionRef {\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.LocalGet:\n      case ExpressionId.GlobalGet:\n      case ExpressionId.Const:\n      case ExpressionId.MemorySize:\n      case ExpressionId.Nop:\n      case ExpressionId.Unreachable:\n      case ExpressionId.DataDrop:\n      case ExpressionId.RefNull: return this.copyExpression(expr);\n    }\n    return 0;\n  }\n\n  /** Makes a copy of any expression including all subexpressions. */\n  copyExpression(expr: ExpressionRef): ExpressionRef {\n    // TODO: Copy debug location as well (needs Binaryen support)\n    return binaryen._BinaryenExpressionCopy(expr, this.ref);\n  }\n\n  runExpression(\n    expr: ExpressionRef,\n    flags: ExpressionRunnerFlags,\n    maxDepth: i32 = 50,\n    maxLoopIterations: i32 = 1\n  ): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp = binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      if (!this.isConstExpression(precomp)) return 0;\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  isConstExpression(expr: ExpressionRef): bool {\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Const:\n      case ExpressionId.RefNull:\n      case ExpressionId.RefFunc:\n      case ExpressionId.I31New: return true;\n      case ExpressionId.Binary: {\n        if (this.getFeatures() & FeatureFlags.ExtendedConst) {\n          switch (getBinaryOp(expr)) {\n            case BinaryOp.AddI32:\n            case BinaryOp.SubI32:\n            case BinaryOp.MulI32:\n            case BinaryOp.AddI64:\n            case BinaryOp.SubI64:\n            case BinaryOp.MulI64:\n              return (\n                this.isConstExpression(getBinaryLeft(expr)) &&\n                this.isConstExpression(getBinaryRight(expr))\n              );\n          }\n        }\n        break;\n      }\n    }\n    return false;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: TypeRef[] | null): TypeRef {\n  if (!types) return TypeRef.None;\n  switch (types.length) {\n    case 0: return TypeRef.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: TypeRef): TypeRef[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<TypeRef>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    unchecked(types[i] = binaryen.__i32_load(cArr + (<usize>i << 2)));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\nexport function isNullableType(type: TypeRef): bool {\n  return binaryen._BinaryenTypeIsNullable(type);\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): TypeRef {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getConstValueV128(expr: ExpressionRef): Uint8Array {\n  let cArr = binaryen._malloc(16);\n  binaryen._BinaryenConstGetValueV128(expr, cArr);\n  let out = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    out[i] = binaryen.__i32_load8_u(cArr + i);\n  }\n  binaryen._free(cArr);\n  return out;\n}\n\nexport function isConstZero(expr: ExpressionRef): bool {\n  if (getExpressionId(expr) != ExpressionId.Const) return false;\n  var type = getExpressionType(expr);\n  if (type == TypeRef.I32) return getConstValueI32(expr) == 0;\n  if (type == TypeRef.I64) return (getConstValueI64Low(expr) | getConstValueI64High(expr)) == 0;\n  if (type == TypeRef.F32) return getConstValueF32(expr) == 0;\n  if (type == TypeRef.F64) return getConstValueF64(expr) == 0;\n  return false;\n}\n\nexport function isConstNonZero(expr: ExpressionRef): bool {\n  if (getExpressionId(expr) != ExpressionId.Const) return false;\n  var type = getExpressionType(expr);\n  if (type == TypeRef.I32) return getConstValueI32(expr) != 0;\n  if (type == TypeRef.I64) return (getConstValueI64Low(expr) | getConstValueI64High(expr)) != 0;\n  if (type == TypeRef.F32) return getConstValueF32(expr) != 0;\n  if (type == TypeRef.F64) return getConstValueF64(expr) != 0;\n  return false;\n}\n\nexport function isConstNegZero(expr: ExpressionRef): bool {\n  if (getExpressionId(expr) != ExpressionId.Const) return false;\n  var type = getExpressionType(expr);\n  if (type == TypeRef.F32) {\n    let d = getConstValueF32(expr);\n    return d == 0 && f32_as_i32(d) < 0;\n  }\n  if (type == TypeRef.F64) {\n    let d = getConstValueF64(expr);\n    return d == 0 && i64_signbit(f64_as_i64(d));\n  }\n  return false;\n}\n\nexport function isConstNaN(expr: ExpressionRef): bool {\n  if (getExpressionId(expr) != ExpressionId.Const) return false;\n  var type = getExpressionType(expr);\n  if (type == TypeRef.F32) return isNaN(getConstValueF32(expr));\n  if (type == TypeRef.F64) return isNaN(getConstValueF64(expr));\n  return false;\n}\n\nexport function isConstExpressionNaN(module: Module, expr: ExpressionRef): bool {\n  var id = getExpressionId(expr);\n  var type = getExpressionType(expr);\n  if (type == TypeRef.F32 || type == TypeRef.F64) {\n    if (id == ExpressionId.Const) {\n      return isNaN(\n        type == TypeRef.F32\n          ? getConstValueF32(expr)\n          : getConstValueF64(expr)\n      );\n    } else if (id == ExpressionId.GlobalGet) {\n      let precomp = module.runExpression(expr, ExpressionRunnerFlags.Default, 8);\n      if (precomp) {\n        return isNaN(\n          type == TypeRef.F32\n            ? getConstValueF32(precomp)\n            : getConstValueF64(precomp)\n        );\n      }\n    }\n  }\n  return false;\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChildAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChildAt(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperandAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperandAt(expr, index);\n}\n\nexport function getMemoryGrowDelta(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenMemoryGrowGetDelta(expr);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): TypeRef {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): TypeRef {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): TypeRef[] {\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<TypeRef>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    unchecked(types[i] = binaryen._BinaryenFunctionGetVar(func, i));\n  }\n  return types;\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): TypeRef {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// tags\n\nexport function getTagName(tag: TagRef): string | null {\n  return readString(binaryen._BinaryenTagGetName(tag));\n}\n\nexport function getTagParams(tag: TagRef): TypeRef {\n  return binaryen._BinaryenTagGetParams(tag);\n}\n\nexport function getTagResults(tag: TagRef): TypeRef {\n  return binaryen._BinaryenTagGetResults(tag);\n}\n\nexport class Relooper {\n  constructor(\n    /** Module this relooper belongs to. */\n    public module: Module,\n    /** Binaryen relooper reference. */\n    public ref: RelooperRef\n  ) {}\n\n  static create(module: Module): Relooper {\n    return new Relooper(module, binaryen._RelooperCreate(module.ref));\n  }\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n/** Builds a switch using a sequence of `br_if`s. */\nexport class SwitchBuilder {\n  // This is useful because Binaryen understands sequences of `br_if`s and\n  // knows how to make a `br_table` from such a sequence if switched over\n  // values are considered dense enough, respectively a size-efficient sequence\n  // of `if`s if not, depending on optimization levels.\n\n  private module: Module;\n  private condition: ExpressionRef;\n  private values: i32[] = new Array();\n  private indexes: i32[] = new Array();\n  private cases: ExpressionRef[][] = new Array();\n  private defaultIndex: i32 = -1;\n\n  /** Creates a new builder using the specified i32 condition. */\n  constructor(module: Module, condition: ExpressionRef) {\n    this.module = module;\n    this.condition = condition;\n  }\n\n  /** Links a case to the specified branch. */\n  addCase(value: i32, code: ExpressionRef[]): void {\n    var cases = this.cases;\n    var index = cases.indexOf(code);\n    if (index < 0) {\n      index = cases.length;\n      cases.push(code);\n    }\n    this.values.push(value);\n    this.indexes.push(index);\n  }\n\n  /** Links the default branch. */\n  addDefault(code: ExpressionRef[]): void {\n    assert(this.defaultIndex == -1);\n    var cases = this.cases;\n    this.defaultIndex = cases.length;\n    cases.push(code);\n  }\n\n  /** Renders the switch to a block. */\n  render(localIndex: i32, labelPostfix: string = \"\"): ExpressionRef {\n    var module = this.module;\n    var cases = this.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return module.drop(this.condition);\n    }\n    var values = this.values;\n    var numValues = values.length;\n    var indexes = this.indexes;\n    var entry = new Array<ExpressionRef>(1 + numValues + 1);\n    var labels = new Array<string>(numCases);\n    for (let i = 0; i < numCases; ++i) {\n      unchecked(labels[i] = `case${i}${labelPostfix}`);\n    }\n    entry[0] = module.local_set(localIndex, this.condition, false); // u32\n    for (let i = 0; i < numValues; ++i) {\n      let index = unchecked(indexes[i]);\n      unchecked(entry[1 + i] = module.br(labels[index],\n        module.binary(BinaryOp.EqI32,\n          module.local_get(localIndex, TypeRef.I32),\n          module.i32(values[i])\n        )\n      ));\n    }\n    var defaultIndex = this.defaultIndex;\n    var defaultLabel = `default${labelPostfix}`;\n    entry[1 + numValues] = module.br(\n      ~defaultIndex\n        ? labels[defaultIndex]\n        : defaultLabel\n    );\n    var current = module.block(labels[0], entry);\n    for (let i = 1; i < numCases; ++i) {\n      let block = cases[i - 1];\n      block.unshift(current);\n      current = module.block(unchecked(labels[i]), block);\n    }\n    var lastCase = cases[numCases - 1];\n    lastCase.unshift(current);\n    return module.block(\n      ~defaultIndex\n        ? null\n        : defaultLabel,\n      lastCase\n    );\n  }\n}\n\nexport const enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ReadsTable = 256 /* _BinaryenSideEffectReadsTable */,\n  WritesTable = 512 /* _BinaryenSideEffectWritesTable */,\n  ImplicitTrap = 1024 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 2048 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 4096 /* _BinaryenSideEffectThrows */,\n  DanglingPop = 8192 /* _BinaryenSideEffectDanglingPop */,\n  TrapsNeverHappen = 16384 /* _BinaryenSideEffectTrapsNeverHappen */,\n  Any = 32767 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, module: ModuleRef): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, module);\n}\n\nexport function mustPreserveSideEffects(expr: ExpressionRef, module: ModuleRef): bool {\n  return (getSideEffects(expr, module) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var len = u8s.length;\n  var ptr = binaryen._malloc(len);\n  for (let i = 0; i < len; ++i) {\n    binaryen.__i32_store8(ptr + i, unchecked(u8s[i]));\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var len = i32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = unchecked(i32s[i]);\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var len = u32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = unchecked(u32s[i]);\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nexport function allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var len = ptrs.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0, k = len; i < k; ++i) {\n    let val = unchecked(ptrs[i]);\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let c1 = str.charCodeAt(i) >>> 0;\n    if (c1 <= 0x7F) {\n      len += 1;\n    } else if (c1 <= 0x7FF) {\n      len += 2;\n    } else if (\n      isHighSurrogate(c1) && i + 1 < k &&\n      isLowSurrogate(str.charCodeAt(i + 1))\n    ) {\n      i++;\n      len += 4;\n    } else {\n      len += 3;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var len = stringLengthUTF8(str);\n  var ptr = binaryen._malloc(len + 1) >>> 0;\n  var idx = ptr;\n  if (len == str.length) {\n    // fast path when all chars are ascii\n    for (let i = 0, k = str.length; i < k; ++i) {\n      let u = str.charCodeAt(i) >>> 0;\n      binaryen.__i32_store8(idx++, u as u8);\n    }\n  } else {\n    for (let i = 0, k = str.length; i < k; ++i) {\n      let c1 = str.charCodeAt(i) >>> 0, c2: i32;\n      if (c1 <= 0x7F) {\n        binaryen.__i32_store8(idx++, c1 as u8);\n      } else if (c1 <= 0x7FF) {\n        binaryen.__i32_store8(idx++, (0xC0 |  (c1 >>> 6)       ) as u8);\n        binaryen.__i32_store8(idx++, (0x80 | ( c1         & 63)) as u8);\n      } else if (\n        isHighSurrogate(c1) && i + 1 < k &&\n        isLowSurrogate(c2 = str.charCodeAt(i + 1))\n      ) {\n        c1 = combineSurrogates(c1, c2);\n        ++i;\n        binaryen.__i32_store8(idx++, (0xF0 |  (c1 >>> 18)      ) as u8);\n        binaryen.__i32_store8(idx++, (0x80 | ((c1 >>> 12) & 63)) as u8);\n        binaryen.__i32_store8(idx++, (0x80 | ((c1 >>>  6) & 63)) as u8);\n        binaryen.__i32_store8(idx++, (0x80 | ( c1         & 63)) as u8);\n      } else {\n        binaryen.__i32_store8(idx++, (0xE0 |  (c1 >>> 12)      ) as u8);\n        binaryen.__i32_store8(idx++, (0x80 | ((c1 >>>  6) & 63)) as u8);\n        binaryen.__i32_store8(idx++, (0x80 | ( c1         & 63)) as u8);\n      }\n    }\n  }\n  binaryen.__i32_store8(idx, 0); // \\0\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, len: i32): Uint8Array {\n  var ret = new Uint8Array(len);\n  for (let i = 0; i < len; ++i) {\n    unchecked(ret[i] = binaryen.__i32_load8_u(ptr + <usize>i));\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        assert(false, \"Invalid UTF8 sequence during readString\");\n      }\n    }\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(SURROGATE_HIGH | (ch >>> 10));\n      arr.push(SURROGATE_LOW | (ch & 0x3FF));\n    }\n  }\n  // TODO: implement and use String.fromCodePoints\n  return String.fromCharCodes(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  constructor(\n    /** WebAssembly binary. */\n    public output: Uint8Array,\n    /** Source map, if generated. */\n    public sourceMap: string | null\n  ) {}\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != TypeRef.Unreachable) {\n    return false;\n  }\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: {\n      return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    }\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return (\n          numChildren > 0 &&\n          needsExplicitUnreachable(binaryen._BinaryenBlockGetChildAt(expr, numChildren - 1))\n        );\n      }\n    }\n  }\n  return true;\n}\n", "/**\n * @fileoverview Infrastructure for custom Binaryen passes.\n * @license Apache-2.0\n */\n\nimport {\n  Module,\n  ExpressionId,\n  ExpressionRef,\n  FunctionRef,\n  GlobalRef,\n  Index,\n  StringRef\n} from \"../module\";\n\nimport {\n  _BinaryenExpressionGetId,\n  _BinaryenBlockGetNumChildren,\n  _BinaryenBlockGetChildAt,\n  _BinaryenIfGetCondition,\n  _BinaryenIfGetIfTrue,\n  _BinaryenIfGetIfFalse,\n  _BinaryenLoopGetBody,\n  _BinaryenBreakGetCondition,\n  _BinaryenBreakGetValue,\n  _BinaryenGetNumFunctions,\n  _BinaryenGetFunctionByIndex,\n  _BinaryenGetNumGlobals,\n  _BinaryenGetGlobalByIndex,\n  _BinaryenFunctionGetBody,\n  _BinaryenSwitchGetCondition,\n  _BinaryenSwitchGetValue,\n  _BinaryenCallGetNumOperands,\n  _BinaryenCallGetOperandAt,\n  _BinaryenCallIndirectGetNumOperands,\n  _BinaryenCallIndirectGetOperandAt,\n  _BinaryenLocalSetGetValue,\n  _BinaryenGlobalSetGetValue,\n  _BinaryenGlobalGetInitExpr,\n  _BinaryenLoadGetPtr,\n  _BinaryenStoreGetPtr,\n  _BinaryenStoreGetValue,\n  _BinaryenUnaryGetValue,\n  _BinaryenBinaryGetLeft,\n  _BinaryenBinaryGetRight,\n  _BinaryenSelectGetIfTrue,\n  _BinaryenSelectGetIfFalse,\n  _BinaryenSelectGetCondition,\n  _BinaryenDropGetValue,\n  _BinaryenBlockSetChildAt,\n  _BinaryenCallIndirectGetTarget,\n  _BinaryenReturnGetValue,\n  _BinaryenMemoryGrowGetDelta,\n  _BinaryenAtomicRMWGetPtr,\n  _BinaryenAtomicRMWGetValue,\n  _BinaryenAtomicCmpxchgGetPtr,\n  _BinaryenAtomicCmpxchgGetExpected,\n  _BinaryenAtomicCmpxchgGetReplacement,\n  _BinaryenAtomicWaitGetPtr,\n  _BinaryenAtomicWaitGetExpected,\n  _BinaryenAtomicWaitGetTimeout,\n  _BinaryenAtomicNotifyGetPtr,\n  _BinaryenSIMDExtractGetVec,\n  _BinaryenSIMDReplaceGetVec,\n  _BinaryenSIMDReplaceGetValue,\n  _BinaryenSIMDShuffleGetLeft,\n  _BinaryenSIMDShuffleGetRight,\n  _BinaryenSIMDTernaryGetA,\n  _BinaryenSIMDTernaryGetB,\n  _BinaryenSIMDTernaryGetC,\n  _BinaryenSIMDShiftGetVec,\n  _BinaryenSIMDShiftGetShift,\n  _BinaryenSIMDLoadGetPtr,\n  _BinaryenMemoryInitGetDest,\n  _BinaryenMemoryInitGetOffset,\n  _BinaryenMemoryInitGetSize,\n  _BinaryenMemoryCopyGetDest,\n  _BinaryenMemoryCopyGetSource,\n  _BinaryenMemoryCopyGetSize,\n  _BinaryenMemoryFillGetDest,\n  _BinaryenMemoryFillGetValue,\n  _BinaryenMemoryFillGetSize,\n  _BinaryenRefIsGetValue,\n  _BinaryenRefAsGetValue,\n  _BinaryenTryGetBody,\n  _BinaryenTryGetNumCatchBodies,\n  _BinaryenTryGetCatchBodyAt,\n  _BinaryenThrowGetNumOperands,\n  _BinaryenThrowGetOperandAt,\n  _BinaryenTupleMakeGetOperandAt,\n  _BinaryenTupleMakeGetNumOperands,\n  _BinaryenIfSetCondition,\n  _BinaryenIfSetIfTrue,\n  _BinaryenIfSetIfFalse,\n  _BinaryenLoopSetBody,\n  _BinaryenBreakSetCondition,\n  _BinaryenBreakSetValue,\n  _BinaryenSwitchSetCondition,\n  _BinaryenSwitchSetValue,\n  _BinaryenCallSetOperandAt,\n  _BinaryenCallIndirectSetTarget,\n  _BinaryenCallIndirectSetOperandAt,\n  _BinaryenLocalSetSetValue,\n  _BinaryenGlobalSetSetValue,\n  _BinaryenLoadSetPtr,\n  _BinaryenStoreSetPtr,\n  _BinaryenStoreSetValue,\n  _BinaryenUnarySetValue,\n  _BinaryenExpressionFinalize,\n  _BinaryenBinarySetLeft,\n  _BinaryenBinarySetRight,\n  _BinaryenSelectSetIfTrue,\n  _BinaryenSelectSetIfFalse,\n  _BinaryenSelectSetCondition,\n  _BinaryenDropSetValue,\n  _BinaryenReturnSetValue,\n  _BinaryenMemoryGrowSetDelta,\n  _BinaryenAtomicRMWSetPtr,\n  _BinaryenAtomicRMWSetValue,\n  _BinaryenAtomicCmpxchgSetPtr,\n  _BinaryenAtomicCmpxchgSetExpected,\n  _BinaryenAtomicCmpxchgSetReplacement,\n  _BinaryenAtomicWaitSetPtr,\n  _BinaryenAtomicWaitSetExpected,\n  _BinaryenAtomicWaitSetTimeout,\n  _BinaryenAtomicNotifySetPtr,\n  _BinaryenSIMDExtractSetVec,\n  _BinaryenSIMDReplaceSetVec,\n  _BinaryenSIMDReplaceSetValue,\n  _BinaryenSIMDShuffleSetLeft,\n  _BinaryenSIMDShuffleSetRight,\n  _BinaryenSIMDTernarySetA,\n  _BinaryenSIMDTernarySetB,\n  _BinaryenSIMDTernarySetC,\n  _BinaryenSIMDShiftSetVec,\n  _BinaryenSIMDShiftSetShift,\n  _BinaryenSIMDLoadSetPtr,\n  _BinaryenSIMDLoadStoreLaneGetPtr,\n  _BinaryenSIMDLoadStoreLaneGetVec,\n  _BinaryenSIMDLoadStoreLaneSetPtr,\n  _BinaryenSIMDLoadStoreLaneSetVec,\n  _BinaryenMemoryInitSetDest,\n  _BinaryenMemoryInitSetOffset,\n  _BinaryenMemoryInitSetSize,\n  _BinaryenMemoryCopySetDest,\n  _BinaryenMemoryCopySetSource,\n  _BinaryenMemoryCopySetSize,\n  _BinaryenMemoryFillSetDest,\n  _BinaryenMemoryFillSetValue,\n  _BinaryenMemoryFillSetSize,\n  _BinaryenRefIsSetValue,\n  _BinaryenTrySetBody,\n  _BinaryenTrySetCatchBodyAt,\n  _BinaryenThrowSetOperandAt,\n  _BinaryenTupleMakeSetOperandAt,\n  _BinaryenBlockGetName,\n  _BinaryenLoopGetName,\n  _BinaryenBreakGetName,\n  _BinaryenSwitchGetDefaultName,\n  _BinaryenSwitchGetNumNames,\n  _BinaryenSwitchGetNameAt,\n  _BinaryenCallGetTarget,\n  _BinaryenLocalGetGetIndex,\n  _BinaryenLocalSetGetIndex,\n  _BinaryenGlobalGetGetName,\n  _BinaryenGlobalSetGetName,\n  _BinaryenAtomicNotifyGetNotifyCount,\n  _BinaryenAtomicNotifySetNotifyCount,\n  _BinaryenRefFuncGetFunc,\n  _BinaryenThrowGetTag,\n  _BinaryenTupleExtractGetTuple,\n  _BinaryenTupleExtractSetTuple,\n  _BinaryenRefEqGetLeft,\n  _BinaryenRefEqGetRight,\n  _BinaryenRefEqSetLeft,\n  _BinaryenRefEqSetRight,\n  _BinaryenFunctionSetBody,\n  _BinaryenI31NewGetValue,\n  _BinaryenI31GetGetI31,\n  _BinaryenI31NewSetValue,\n  _BinaryenI31GetSetI31\n} from \"../glue/binaryen\";\n\n/** Base class of custom Binaryen visitors. */\nexport abstract class Visitor {\n  /** Expression stack. */\n  private stack: ExpressionRef[] = new Array<ExpressionRef>();\n\n  /** Gets the current expression being walked. */\n  get currentExpression(): ExpressionRef {\n    var currentExpression = this._currentExpression;\n    if (!currentExpression) throw new Error(\"not walking expressions\");\n    return currentExpression;\n  }\n  _currentExpression: ExpressionRef = 0;\n\n  /** Gets the parent expression of the current expression being walked. Returns zero if already the top-most expression. */\n  get parentExpressionOrNull(): ExpressionRef {\n    var stack = this.stack;\n    var length = stack.length;\n    return length ? stack[length - 1] : 0;\n  }\n\n  // Expressions\n\n  visitBlock(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitIf(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLoop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBreak(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSwitch(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallPre(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCall(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallIndirectPre(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallIndirect(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLocalGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLocalSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitGlobalGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitGlobalSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLoad(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStore(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitConst(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitUnary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBinary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSelect(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitDrop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitReturn(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemorySize(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryGrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitNop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitUnreachable(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicRMW(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicCmpxchg(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicWait(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicNotify(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicFence(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDExtract(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDReplace(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDShuffle(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDTernary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDShift(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDLoad(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDLoadStoreLane(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryInit(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitDataDrop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryCopy(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryFill(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitPop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefNull(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefIs(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefFunc(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefEq(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTry(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitThrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRethrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTupleMake(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTupleExtract(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitI31New(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitI31Get(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallRef(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefTest(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefCast(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBrOn(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructNew(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayNew(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArraySet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayLen(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefAs(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  // Immediates\n\n  visitName(name: StringRef): void {\n    // unimp\n  }\n\n  visitLabel(name: StringRef): void {\n    // unimp\n  }\n\n  visitIndex(index: Index): void {\n    // unimp\n  }\n\n  visitTag(name: StringRef): void {\n    // unimp\n  }\n\n  // Delegate\n\n  /** Visits any expression, delegating to the respective visitor methods. */\n  visit(expr: ExpressionRef): void {\n    let previousExpression = this._currentExpression;\n    this._currentExpression = assert(expr);\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Block: {\n        this.stack.push(expr);\n        let name = _BinaryenBlockGetName(expr);\n        if (name) this.visitLabel(name);\n        for (let i: Index = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n          this.visit(_BinaryenBlockGetChildAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitBlock(expr);\n        break;\n      }\n      case ExpressionId.If: {\n        this.stack.push(expr);\n        this.visit(_BinaryenIfGetCondition(expr));\n        this.visit(_BinaryenIfGetIfTrue(expr));\n        let ifFalse = _BinaryenIfGetIfFalse(expr);\n        if (ifFalse) this.visit(ifFalse);\n        assert(this.stack.pop() == expr);\n        this.visitIf(expr);\n        break;\n      }\n      case ExpressionId.Loop: {\n        this.stack.push(expr);\n        let name = _BinaryenLoopGetName(expr);\n        if (name) this.visitLabel(name);\n        this.visit(_BinaryenLoopGetBody(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLoop(expr);\n        break;\n      }\n      case ExpressionId.Break: {\n        this.stack.push(expr);\n        this.visitLabel(_BinaryenBreakGetName(expr));\n        let condition = _BinaryenBreakGetCondition(expr);\n        if (condition) this.visit(condition);\n        let value = _BinaryenBreakGetValue(expr);\n        if (value) this.visit(value);\n        assert(this.stack.pop() == expr);\n        this.visitBreak(expr);\n        break;\n      }\n      case ExpressionId.Switch: {\n        this.stack.push(expr);\n        let defaultName = _BinaryenSwitchGetDefaultName(expr);\n        if (defaultName) this.visitLabel(defaultName);\n        let numNames = _BinaryenSwitchGetNumNames(expr);\n        for (let i: Index = 0; i < numNames; ++i) {\n          this.visitLabel(_BinaryenSwitchGetNameAt(expr, i));\n        }\n        this.visit(_BinaryenSwitchGetCondition(expr));\n        let value = _BinaryenSwitchGetValue(expr);\n        if (value) this.visit(value);\n        assert(this.stack.pop() == expr);\n        this.visitSwitch(expr);\n        break;\n      }\n      case ExpressionId.Call: {\n        this.visitCallPre(expr);\n        this.stack.push(expr);\n        this.visitName(_BinaryenCallGetTarget(expr));\n        let numOperands = _BinaryenCallGetNumOperands(expr);\n        for (let i: Index = 0; i < numOperands; ++i) {\n          this.visit(_BinaryenCallGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitCall(expr);\n        break;\n      }\n      case ExpressionId.CallIndirect: {\n        this.visitCallIndirectPre(expr);\n        this.stack.push(expr);\n        this.visit(_BinaryenCallIndirectGetTarget(expr));\n        for (let i: Index = 0, k = _BinaryenCallIndirectGetNumOperands(expr); i < k; ++i) {\n          this.visit(_BinaryenCallIndirectGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitCallIndirect(expr);\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        this.stack.push(expr);\n        this.visitIndex(_BinaryenLocalGetGetIndex(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLocalGet(expr);\n        break;\n      }\n      case ExpressionId.LocalSet: {\n        this.stack.push(expr);\n        this.visitIndex(_BinaryenLocalSetGetIndex(expr));\n        this.visit(_BinaryenLocalSetGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLocalSet(expr);\n        break;\n      }\n      case ExpressionId.GlobalGet: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenGlobalGetGetName(expr));\n        assert(this.stack.pop() == expr);\n        this.visitGlobalGet(expr);\n        break;\n      }\n      case ExpressionId.GlobalSet: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenGlobalSetGetName(expr));\n        this.visit(_BinaryenGlobalSetGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitGlobalSet(expr);\n        break;\n      }\n      case ExpressionId.Load: {\n        this.stack.push(expr);\n        this.visit(_BinaryenLoadGetPtr(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLoad(expr);\n        break;\n      }\n      case ExpressionId.Store: {\n        this.stack.push(expr);\n        this.visit(_BinaryenStoreGetPtr(expr));\n        this.visit(_BinaryenStoreGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitStore(expr);\n        break;\n      }\n      case ExpressionId.Const: {\n        this.visitConst(expr);\n        break;\n      }\n      case ExpressionId.Unary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenUnaryGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitUnary(expr);\n        break;\n      }\n      case ExpressionId.Binary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenBinaryGetLeft(expr));\n        this.visit(_BinaryenBinaryGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitBinary(expr);\n        break;\n      }\n      case ExpressionId.Select: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSelectGetIfTrue(expr));\n        this.visit(_BinaryenSelectGetIfFalse(expr));\n        this.visit(_BinaryenSelectGetCondition(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSelect(expr);\n        break;\n      }\n      case ExpressionId.Drop: {\n        this.stack.push(expr);\n        this.visit(_BinaryenDropGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitDrop(expr);\n        break;\n      }\n      case ExpressionId.Return: {\n        let value = _BinaryenReturnGetValue(expr);\n        if (value) {\n          this.stack.push(expr);\n          this.visit(value);\n          assert(this.stack.pop() == expr);\n        }\n        this.visitReturn(expr);\n        break;\n      }\n      case ExpressionId.MemorySize: {\n        this.visitMemorySize(expr);\n        break;\n      }\n      case ExpressionId.MemoryGrow: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryGrowGetDelta(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryGrow(expr);\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.visitNop(expr);\n        break;\n      }\n      case ExpressionId.Unreachable: {\n        this.visitUnreachable(expr);\n        break;\n      }\n      case ExpressionId.AtomicRMW: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicRMWGetPtr(expr));\n        this.visit(_BinaryenAtomicRMWGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicRMW(expr);\n        break;\n      }\n      case ExpressionId.AtomicCmpxchg: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicCmpxchgGetPtr(expr));\n        this.visit(_BinaryenAtomicCmpxchgGetExpected(expr));\n        this.visit(_BinaryenAtomicCmpxchgGetReplacement(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicCmpxchg(expr);\n        break;\n      }\n      case ExpressionId.AtomicWait: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicWaitGetPtr(expr));\n        this.visit(_BinaryenAtomicWaitGetExpected(expr));\n        this.visit(_BinaryenAtomicWaitGetTimeout(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicWait(expr);\n        break;\n      }\n      case ExpressionId.AtomicNotify: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicNotifyGetPtr(expr));\n        this.visit(_BinaryenAtomicNotifyGetNotifyCount(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicNotify(expr);\n        break;\n      }\n      case ExpressionId.AtomicFence: {\n        this.visitAtomicFence(expr);\n        break;\n      }\n      case ExpressionId.SIMDExtract: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDExtractGetVec(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDExtract(expr);\n        break;\n      }\n      case ExpressionId.SIMDReplace: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDReplaceGetVec(expr));\n        this.visit(_BinaryenSIMDReplaceGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDReplace(expr);\n        break;\n      }\n      case ExpressionId.SIMDShuffle: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDShuffleGetLeft(expr));\n        this.visit(_BinaryenSIMDShuffleGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDShuffle(expr);\n        break;\n      }\n      case ExpressionId.SIMDTernary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDTernaryGetA(expr));\n        this.visit(_BinaryenSIMDTernaryGetB(expr));\n        this.visit(_BinaryenSIMDTernaryGetC(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDTernary(expr);\n        break;\n      }\n      case ExpressionId.SIMDShift: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDShiftGetVec(expr));\n        this.visit(_BinaryenSIMDShiftGetShift(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDShift(expr);\n        break;\n      }\n      case ExpressionId.SIMDLoad: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDLoadGetPtr(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDLoad(expr);\n        break;\n      }\n      case ExpressionId.SIMDLoadStoreLane: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDLoadStoreLaneGetPtr(expr));\n        this.visit(_BinaryenSIMDLoadStoreLaneGetVec(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDLoadStoreLane(expr);\n        break;\n      }\n      case ExpressionId.MemoryInit: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryInitGetDest(expr));\n        this.visit(_BinaryenMemoryInitGetOffset(expr));\n        this.visit(_BinaryenMemoryInitGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryInit(expr);\n        break;\n      }\n      case ExpressionId.DataDrop: {\n        this.visitDataDrop(expr);\n        break;\n      }\n      case ExpressionId.MemoryCopy: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryCopyGetDest(expr));\n        this.visit(_BinaryenMemoryCopyGetSource(expr));\n        this.visit(_BinaryenMemoryCopyGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryCopy(expr);\n        break;\n      }\n      case ExpressionId.MemoryFill: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryFillGetDest(expr));\n        this.visit(_BinaryenMemoryFillGetValue(expr));\n        this.visit(_BinaryenMemoryFillGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryFill(expr);\n        break;\n      }\n      case ExpressionId.Pop: {\n        this.visitPop(expr);\n        break;\n      }\n      case ExpressionId.RefNull: {\n        this.visitRefNull(expr);\n        break;\n      }\n      case ExpressionId.RefIs: {\n        this.stack.push(expr);\n        this.visit(_BinaryenRefIsGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefIs(expr);\n        break;\n      }\n      case ExpressionId.RefFunc: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenRefFuncGetFunc(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefFunc(expr);\n        break;\n      }\n      case ExpressionId.RefEq: {\n        this.stack.push(expr);\n        this.visit(_BinaryenRefEqGetLeft(expr));\n        this.visit(_BinaryenRefEqGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefEq(expr);\n        break;\n      }\n      case ExpressionId.Try: {\n        this.stack.push(expr);\n        this.visit(_BinaryenTryGetBody(expr));\n        let numCatchBodies = _BinaryenTryGetNumCatchBodies(expr);\n        for (let i: Index = 0; i < numCatchBodies; ++i) {\n          this.visit(_BinaryenTryGetCatchBodyAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitTry(expr);\n        break;\n      }\n      case ExpressionId.Throw: {\n        this.stack.push(expr);\n        this.visitTag(_BinaryenThrowGetTag(expr));\n        let numOperands = _BinaryenThrowGetNumOperands(expr);\n        for (let i: Index = 0; i < numOperands; ++i) {\n          this.visit(_BinaryenThrowGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitThrow(expr);\n        break;\n      }\n      case ExpressionId.Rethrow: {\n        this.visitRethrow(expr);\n        break;\n      }\n      case ExpressionId.TupleMake: {\n        let numOperands = _BinaryenTupleMakeGetNumOperands(expr);\n        if (numOperands) {\n          this.stack.push(expr);\n          for (let i: Index = 0; i < numOperands; ++i) {\n            this.visit(_BinaryenTupleMakeGetOperandAt(expr, i));\n          }\n          assert(this.stack.pop() == expr);\n        }\n        this.visitTupleMake(expr);\n        break;\n      }\n      case ExpressionId.TupleExtract: {\n        this.stack.push(expr);\n        this.visit(_BinaryenTupleExtractGetTuple(expr));\n        assert(this.stack.pop() == expr);\n        this.visitTupleExtract(expr);\n        break;\n      }\n      case ExpressionId.I31New: {\n        this.stack.push(expr);\n        this.visit(_BinaryenI31NewGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitI31New(expr);\n        break;\n      }\n      case ExpressionId.I31Get: {\n        this.stack.push(expr);\n        this.visit(_BinaryenI31GetGetI31(expr));\n        assert(this.stack.pop() == expr);\n        this.visitI31Get(expr);\n        break;\n      }\n      case ExpressionId.CallRef: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitCallRef(expr);\n        break;\n      }\n      case ExpressionId.RefTest: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefTest(expr);\n        break;\n      }\n      case ExpressionId.RefCast: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefCast(expr);\n        break;\n      }\n      case ExpressionId.BrOn: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitBrOn(expr);\n        break;\n      }\n      case ExpressionId.StructNew: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructNew(expr);\n        break;\n      }\n      case ExpressionId.StructGet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructGet(expr);\n        break;\n      }\n      case ExpressionId.StructSet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructSet(expr);\n        break;\n      }\n      case ExpressionId.ArrayNew: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayNew(expr);\n        break;\n      }\n      case ExpressionId.ArrayGet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayGet(expr);\n        break;\n      }\n      case ExpressionId.ArraySet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArraySet(expr);\n        break;\n      }\n      case ExpressionId.ArrayLen: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayLen(expr);\n        break;\n      }\n      case ExpressionId.RefAs: {\n        this.stack.push(expr);\n        this.visit(_BinaryenRefAsGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefAs(expr);\n        break;\n      }\n      default: throw new Error(\"unexpected expression kind\");\n    }\n    this._currentExpression = previousExpression;\n  }\n}\n\n/** Base class of custom Binaryen passes. */\nexport abstract class Pass extends Visitor {\n\n  /** Gets the current function being walked. */\n  get currentFunction(): FunctionRef {\n    var currentFunction = this._currentFunction;\n    if (!currentFunction) throw new Error(\"not walking a function\");\n    return currentFunction;\n  }\n  private _currentFunction: FunctionRef = 0;\n\n  /** Gets the current global being walked. */\n  get currentGlobal(): GlobalRef {\n    var currentGlobal = this._currentGlobal;\n    if (!currentGlobal) throw new Error(\"not walking a global\");\n    return currentGlobal;\n  }\n  private _currentGlobal: GlobalRef = 0;\n\n  /** Constructs a new Binaryen pass. */\n  constructor(readonly module: Module) {\n    super();\n  }\n\n  // Walking\n\n  /** Walks the entire module. */\n  walkModule(): void {\n    this.walkFunctions();\n    this.walkGlobals();\n  }\n\n  /** Walks all functions. */\n  walkFunctions(): void {\n    var moduleRef = this.module.ref;\n    for (let i: Index = 0, k = _BinaryenGetNumFunctions(moduleRef); i < k; ++i) {\n      this.walkFunction(_BinaryenGetFunctionByIndex(moduleRef, i));\n    }\n  }\n\n  /** Walks a specific function. */\n  walkFunction(func: FunctionRef): void {\n    var body = _BinaryenFunctionGetBody(func);\n    if (body) {\n      this._currentFunction = func;\n      this.visit(body);\n      this._currentFunction = 0;\n    }\n  }\n\n  /** Walks all global variables. */\n  walkGlobals(): void {\n    var moduleRef = this.module.ref;\n    for (let i: Index = 0, k = _BinaryenGetNumGlobals(moduleRef); i < k; ++i) {\n      this.walkGlobal(_BinaryenGetGlobalByIndex(moduleRef, i));\n    }\n  }\n\n  /** Walks a specific global variable. */\n  walkGlobal(global: GlobalRef): void {\n    this._currentGlobal = global;\n    var init = _BinaryenGlobalGetInitExpr(global);\n    if (init) this.visit(init);\n    this._currentGlobal = 0;\n  }\n\n  // Utility\n\n  /** Replaces the current expression with the specified replacement. */\n  replaceCurrent(replacement: ExpressionRef): void {\n    var search = this.currentExpression;\n    var func = this.currentFunction;\n    var body = _BinaryenFunctionGetBody(func);\n    if (body == search) {\n      _BinaryenFunctionSetBody(func, replacement);\n    } else {\n      var parent = assert(this.parentExpressionOrNull);\n      var replaced = replaceChild(parent, search, replacement);\n      if (!replaced) throw Error(\"failed to replace expression\");\n      _BinaryenExpressionFinalize(parent);\n    }\n  }\n}\n\n/** Replaces an expression within a parent expression. Returns the replaced expression on success, otherwise `0`. */\nexport function replaceChild(\n  /** Parent expression containing `search`. */\n  parent: ExpressionRef,\n  /** Expression to replace. */\n  search: ExpressionRef,\n  /** Expression to replace `search` with. */\n  replacement: ExpressionRef\n): ExpressionRef {\n  switch (_BinaryenExpressionGetId(parent)) {\n    case ExpressionId.Block: {\n      let numChildren = _BinaryenBlockGetNumChildren(parent);\n      for (let i: Index = 0; i < numChildren; ++i) {\n        let child = _BinaryenBlockGetChildAt(parent, i);\n        if (child == search) {\n          _BinaryenBlockSetChildAt(parent, i, replacement);\n          return child;\n        }\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      let condition = _BinaryenIfGetCondition(parent);\n      if (condition == search) {\n        _BinaryenIfSetCondition(parent, replacement);\n        return condition;\n      }\n      let ifTrue = _BinaryenIfGetIfTrue(parent);\n      if (ifTrue == search) {\n        _BinaryenIfSetIfTrue(parent, replacement);\n        return ifTrue;\n      }\n      let ifFalse = _BinaryenIfGetIfFalse(parent);\n      if (ifFalse == search) {\n        _BinaryenIfSetIfFalse(parent, replacement);\n        return ifFalse;\n      }\n      break;\n    }\n    case ExpressionId.Loop: {\n      let body = _BinaryenLoopGetBody(parent);\n      if (body == search) {\n        _BinaryenLoopSetBody(parent, replacement);\n        return body;\n      }\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(parent);\n      if (condition == search) {\n        _BinaryenBreakSetCondition(parent, replacement);\n        return condition;\n      }\n      let value = _BinaryenBreakGetValue(parent);\n      if (value == search) {\n        _BinaryenBreakSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Switch: {\n      let condition = _BinaryenSwitchGetCondition(parent);\n      if (condition == search) {\n        _BinaryenSwitchSetCondition(parent, replacement);\n        return condition;\n      }\n      let value = _BinaryenSwitchGetValue(parent);\n      if (value == search) {\n        _BinaryenSwitchSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Call: {\n      let numOperands = _BinaryenCallGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenCallGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenCallSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      let target = _BinaryenCallIndirectGetTarget(parent);\n      if (target == search) {\n        _BinaryenCallIndirectSetTarget(parent, replacement);\n        return target;\n      }\n      let numOperands = _BinaryenCallIndirectGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenCallIndirectGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenCallIndirectSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      let value = _BinaryenLocalSetGetValue(parent);\n      if (value == search) {\n        _BinaryenLocalSetSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      let value = _BinaryenGlobalSetGetValue(parent);\n      if (value == search) {\n        _BinaryenGlobalSetSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Load: {\n      let ptr = _BinaryenLoadGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenLoadSetPtr(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    case ExpressionId.Store: {\n      let ptr = _BinaryenStoreGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenStoreSetPtr(parent, replacement);\n        return ptr;\n      }\n      let value = _BinaryenStoreGetValue(parent);\n      if (value == search) {\n        _BinaryenStoreSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      let value = _BinaryenUnaryGetValue(parent);\n      if (value == search) {\n        _BinaryenUnarySetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Binary: {\n      let left = _BinaryenBinaryGetLeft(parent);\n      if (left == search) {\n        _BinaryenBinarySetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenBinaryGetRight(parent);\n      if (right == search) {\n        _BinaryenBinarySetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.Select: {\n      let ifTrue = _BinaryenSelectGetIfTrue(parent);\n      if (ifTrue == search) {\n        _BinaryenSelectSetIfTrue(parent, replacement);\n        return ifTrue;\n      }\n      let ifFalse = _BinaryenSelectGetIfFalse(parent);\n      if (ifFalse == search) {\n        _BinaryenSelectSetIfFalse(parent, replacement);\n        return ifFalse;\n      }\n      let condition = _BinaryenSelectGetCondition(parent);\n      if (condition == search) {\n        _BinaryenSelectSetCondition(parent, replacement);\n        return condition;\n      }\n      break;\n    }\n    case ExpressionId.Drop: {\n      let value = _BinaryenDropGetValue(parent);\n      if (value == search) {\n        _BinaryenDropSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Return: {\n      let value = _BinaryenReturnGetValue(parent);\n      if (value == search) {\n        _BinaryenReturnSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.MemorySize: {\n      break;\n    }\n    case ExpressionId.MemoryGrow: {\n      let delta = _BinaryenMemoryGrowGetDelta(parent);\n      if (delta == search) {\n        _BinaryenMemoryGrowSetDelta(parent, replacement);\n        return delta;\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      let ptr = _BinaryenAtomicRMWGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicRMWSetPtr(parent, replacement);\n        return ptr;\n      }\n      let value = _BinaryenAtomicRMWGetValue(parent);\n      if (value == search) {\n        _BinaryenAtomicRMWSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      let ptr = _BinaryenAtomicCmpxchgGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicCmpxchgSetPtr(parent, replacement);\n        return ptr;\n      }\n      let expected = _BinaryenAtomicCmpxchgGetExpected(parent);\n      if (expected == search) {\n        _BinaryenAtomicCmpxchgSetExpected(parent, replacement);\n        return expected;\n      }\n      let repl = _BinaryenAtomicCmpxchgGetReplacement(parent);\n      if (repl == search) {\n        _BinaryenAtomicCmpxchgSetReplacement(parent, replacement);\n        return repl;\n      }\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      let ptr = _BinaryenAtomicWaitGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicWaitSetPtr(parent, replacement);\n        return ptr;\n      }\n      let expected = _BinaryenAtomicWaitGetExpected(parent);\n      if (expected == search) {\n        _BinaryenAtomicWaitSetExpected(parent, replacement);\n        return expected;\n      }\n      let timeout = _BinaryenAtomicWaitGetTimeout(parent);\n      if (timeout == search) {\n        _BinaryenAtomicWaitSetTimeout(parent, replacement);\n        return timeout;\n      }\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      let ptr = _BinaryenAtomicNotifyGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicNotifySetPtr(parent, replacement);\n        return ptr;\n      }\n      let notifyCount = _BinaryenAtomicNotifyGetNotifyCount(parent);\n      if (notifyCount == search) {\n        _BinaryenAtomicNotifySetNotifyCount(parent, replacement);\n        return notifyCount;\n      }\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      let vec = _BinaryenSIMDExtractGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDExtractSetVec(parent, replacement);\n        return vec;\n      }\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      let vec = _BinaryenSIMDReplaceGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDReplaceSetVec(parent, replacement);\n        return vec;\n      }\n      let value = _BinaryenSIMDReplaceGetValue(parent);\n      if (value == search) {\n        _BinaryenSIMDReplaceSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      let left = _BinaryenSIMDShuffleGetLeft(parent);\n      if (left == search) {\n        _BinaryenSIMDShuffleSetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenSIMDShuffleGetRight(parent);\n      if (right == search) {\n        _BinaryenSIMDShuffleSetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      let a = _BinaryenSIMDTernaryGetA(parent);\n      if (a == search) {\n        _BinaryenSIMDTernarySetA(parent, replacement);\n        return a;\n      }\n      let b = _BinaryenSIMDTernaryGetB(parent);\n      if (b == search) {\n        _BinaryenSIMDTernarySetB(parent, replacement);\n        return b;\n      }\n      let c = _BinaryenSIMDTernaryGetC(parent);\n      if (c == search) {\n        _BinaryenSIMDTernarySetC(parent, replacement);\n        return c;\n      }\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      let vec = _BinaryenSIMDShiftGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDShiftSetVec(parent, replacement);\n        return vec;\n      }\n      let shift = _BinaryenSIMDShiftGetShift(parent);\n      if (shift == search) {\n        _BinaryenSIMDShiftSetShift(parent, replacement);\n        return shift;\n      }\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      let ptr = _BinaryenSIMDLoadGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenSIMDLoadSetPtr(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    case ExpressionId.SIMDLoadStoreLane: {\n      let ptr = _BinaryenSIMDLoadStoreLaneGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenSIMDLoadStoreLaneSetPtr(parent, replacement);\n        return ptr;\n      }\n      let vec = _BinaryenSIMDLoadStoreLaneGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDLoadStoreLaneSetVec(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      let dest = _BinaryenMemoryInitGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryInitSetDest(parent, replacement);\n        return dest;\n      }\n      let offset = _BinaryenMemoryInitGetOffset(parent);\n      if (offset == search) {\n        _BinaryenMemoryInitSetOffset(parent, replacement);\n        return offset;\n      }\n      let size = _BinaryenMemoryInitGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryInitSetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      let dest = _BinaryenMemoryCopyGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryCopySetDest(parent, replacement);\n        return dest;\n      }\n      let source = _BinaryenMemoryCopyGetSource(parent);\n      if (source == search) {\n        _BinaryenMemoryCopySetSource(parent, replacement);\n        return source;\n      }\n      let size = _BinaryenMemoryCopyGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryCopySetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      let dest = _BinaryenMemoryFillGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryFillSetDest(parent, replacement);\n        return dest;\n      }\n      let value = _BinaryenMemoryFillGetValue(parent);\n      if (value == search) {\n        _BinaryenMemoryFillSetValue(parent, replacement);\n        return value;\n      }\n      let size = _BinaryenMemoryFillGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryFillSetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIs: {\n      let value = _BinaryenRefIsGetValue(parent);\n      if (value == search) {\n        _BinaryenRefIsSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.RefEq: {\n      let left = _BinaryenRefEqGetLeft(parent);\n      if (left == search) {\n        _BinaryenRefEqSetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenRefEqGetRight(parent);\n      if (right == search) {\n        _BinaryenRefEqSetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.Try: {\n      let body = _BinaryenTryGetBody(parent);\n      if (body == search) {\n        _BinaryenTrySetBody(parent, replacement);\n        return body;\n      }\n      let numCatchBodies = _BinaryenTryGetNumCatchBodies(parent);\n      for (let i: Index = 0; i < numCatchBodies; ++i) {\n        let catchBody = _BinaryenTryGetCatchBodyAt(parent, i);\n        if (catchBody == search) {\n          _BinaryenTrySetCatchBodyAt(parent, i, replacement);\n          return catchBody;\n        }\n      }\n      break;\n    }\n    case ExpressionId.Throw: {\n      let numOperands = _BinaryenThrowGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenThrowGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenThrowSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      let numOperands = _BinaryenTupleMakeGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenTupleMakeGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenTupleMakeSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      let tuple = _BinaryenTupleExtractGetTuple(parent);\n      if (tuple == search) {\n        _BinaryenTupleExtractSetTuple(parent, replacement);\n        return tuple;\n      }\n      break;\n    }\n    case ExpressionId.I31New: {\n      let value = _BinaryenI31NewGetValue(parent);\n      if (value == search) {\n        _BinaryenI31NewSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.I31Get: {\n      let i31Expr = _BinaryenI31GetGetI31(parent);\n      if (i31Expr == search) {\n        _BinaryenI31GetSetI31(parent, replacement);\n        return i31Expr;\n      }\n      break;\n    }\n    case ExpressionId.CallRef: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefTest: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefCast: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.BrOn: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructNew: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructGet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructSet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayNew: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayGet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArraySet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayLen: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefAs: {\n      assert(false); // TODO\n      break;\n    }\n    default: throw new Error(\"unexpected expression id\");\n  }\n  return 0;\n}\n", "/**\n * @fileoverview Utility to find all locals used in an expression.\n * @license Apache-2.0\n */\n\nimport {\n  BitSet\n} from \"../util\";\n\nimport {\n  Visitor\n} from \"./pass\";\n\nimport {\n  ExpressionRef\n} from \"../module\";\n\nimport {\n  _BinaryenLocalGetGetIndex,\n  _BinaryenLocalSetGetIndex\n} from \"../glue/binaryen\";\n\nclass FindUsedLocalsVisitor extends Visitor {\n  used: BitSet;\n\n  constructor(used: BitSet = new BitSet()) {\n    super();\n    this.used = used;\n  }\n\n  /** @override */\n  visitLocalGet(localGet: ExpressionRef): void {\n    this.used.add(<i32>_BinaryenLocalGetGetIndex(localGet));\n  }\n\n  /** @override */\n  visitLocalSet(localSet: ExpressionRef): void {\n    this.used.add(<i32>_BinaryenLocalSetGetIndex(localSet));\n  }\n}\n\nvar singleton: FindUsedLocalsVisitor | null = null;\n\n/** Finds the indexes of all locals used in the specified expression. */\nexport function findUsedLocals(\n  expr: ExpressionRef,\n  used: BitSet = new BitSet()\n): BitSet {\n  var visitor = singleton;\n  if (!visitor) singleton = visitor = new FindUsedLocalsVisitor(used);\n  else visitor.used = used;\n  visitor.visit(expr);\n  return used;\n}\n", "/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Field,\n  Class,\n  TypedElement\n} from \"./program\";\n\nimport {\n  TypeRef,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChildAt,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getUnaryValue,\n  getCallOperandAt,\n  getCallOperandCount,\n  isConstZero,\n  isConstNonZero\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  BitSet,\n  cloneMap\n} from \"./util\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always accesses `this`. Constructors only. */\n  ACCESSES_THIS = 1 << 6,\n  /** This flow always calls `super`. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n  CONDITIONALLY_ACCESSES_THIS = 1 << 13,\n  /** This flow may return a non-this value. Constructors only. */\n  MAY_RETURN_NONTHIS = 1 << 14,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n  /** This is a flow compiling a constructor parameter. */\n  CTORPARAM_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ACCESSES_THIS\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ACCESSES_THIS\n}\n\n/** Flags indicating the current state of a local. */\nexport const enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3\n}\n\n/** Flags indicating the current state of a field. */\nexport const enum FieldFlags {\n  NONE = 0,\n  INITIALIZED = 1 << 0\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Creates the parent flow of the specified function. */\n  static createParent(parentFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    if (parentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = `${inlineFunction.internalName}|inlined.${(inlineFunction.nextInlineId++)}`;\n    if (inlineFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  private constructor(\n    /** Function this flow belongs to. */\n    public parentFunction: Function\n  ) {\n    /* nop */\n  }\n\n  /** Parent flow. */\n  parent: Flow | null = null;\n  /** Outer flow. Only relevant for first-class functions. */\n  outer: Flow | null = null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags = FlowFlags.NONE;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null = null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null = null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[] = [];\n  /** Field flags on `this`. Constructors only. */\n  thisFieldFlags: Map<Field,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null = null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null = null;\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction != null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Gets the current return type. */\n  get returnType(): Type {\n    return this.actualFunction.signature.returnType;\n  }\n\n  /** Gets the current contextual type arguments. */\n  get contextualTypeArguments(): Map<string,Type> | null {\n    return this.actualFunction.contextualTypeArguments;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  deriveConditionalFlags(): FlowFlags {\n    let condiFlags = this.flags & FlowFlags.ANY_CONDITIONAL;\n    if (this.is(FlowFlags.RETURNS)) {\n      condiFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    }\n    if (this.is(FlowFlags.THROWS)) {\n      condiFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    }\n    if (this.is(FlowFlags.BREAKS)) {\n      condiFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    }\n    if (this.is(FlowFlags.CONTINUES)) {\n      condiFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n    if (this.is(FlowFlags.ACCESSES_THIS)) {\n      condiFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n    return condiFlags;\n  }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow(this.parentFunction);\n    branch.parent = this;\n    branch.outer = this.outer;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.localFlags = this.localFlags.slice();\n    if (this.actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let thisFieldFlags = assert(this.thisFieldFlags);\n      branch.thisFieldFlags = cloneMap(thisFieldFlags);\n    } else {\n      assert(!this.thisFieldFlags);\n    }\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: BitSet | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toRef()) {\n      case <u32>TypeRef.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>TypeRef.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>TypeRef.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>TypeRef.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>TypeRef.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>TypeRef.Funcref: { temps = parentFunction.tempFuncrefs; break; }\n      case <u32>TypeRef.Externref: { temps = parentFunction.tempExternrefs; break; }\n      case <u32>TypeRef.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case <u32>TypeRef.Eqref: { temps = parentFunction.tempEqrefs; break; }\n      case <u32>TypeRef.I31ref: { temps = parentFunction.tempI31refs; break; }\n      case <u32>TypeRef.Dataref: { temps = parentFunction.tempDatarefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    local.resetTemporaryName();\n    switch (<u32>local.type.toRef()) {\n      case <u32>TypeRef.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Funcref: {\n        let tempFuncrefs = parentFunction.tempFuncrefs;\n        if (tempFuncrefs) temps = tempFuncrefs;\n        else parentFunction.tempFuncrefs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Externref: {\n        let tempExternrefs = parentFunction.tempExternrefs;\n        if (tempExternrefs) temps = tempExternrefs;\n        else parentFunction.tempExternrefs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Eqref: {\n        let tempEqrefs = parentFunction.tempEqrefs;\n        if (tempEqrefs) temps = tempEqrefs;\n        else parentFunction.tempEqrefs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.I31ref: {\n        let tempI31refs = parentFunction.tempI31refs;\n        if (tempI31refs) temps = tempI31refs;\n        else parentFunction.tempI31refs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Dataref: {\n        let tempDatarefs = parentFunction.tempDatarefs;\n        if (tempDatarefs) temps = tempDatarefs;\n        else parentFunction.tempDatarefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: BitSet | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    scopedLocal.setTemporaryName(name);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped dummy local of the specified name. */\n  addScopedDummyLocal(name: string, type: Type, declarationNode: Node): Local {\n    var scopedDummy = new Local(name, -1, type, this.parentFunction);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else if (scopedLocals.has(name)) {\n      this.parentFunction.program.error(\n        DiagnosticCode.Cannot_redeclare_block_scoped_variable_0,\n        declarationNode.range, name\n      );\n    }\n    scopedDummy.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedDummy);\n    return scopedDummy;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) {\n      this.scopedLocals = scopedLocals = new Map();\n    } else if (scopedLocals.has(name)) {\n      let existingLocal = assert(scopedLocals.get(name));\n      if (reportNode) {\n        if (!existingLocal.declaration.range.source.isNative) {\n          this.parentFunction.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range,\n            existingLocal.declaration.name.range,\n            name\n          );\n        } else {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range, name\n          );\n        }\n      }\n      return existingLocal;\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees a single scoped local by its name. */\n  freeScopedDummyLocal(name: string): void {\n    var scopedLocals = assert(this.scopedLocals);\n    assert(scopedLocals.has(name));\n    let local = assert(scopedLocals.get(name));\n    assert(local.index == -1);\n    scopedLocals.delete(name);\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Initializes `this` field flags. */\n  initThisFieldFlags(): void {\n    var actualFunction = this.actualFunction;\n    assert(actualFunction.is(CommonFlags.CONSTRUCTOR));\n    var actualParent = actualFunction.parent;\n    assert(actualParent.kind == ElementKind.CLASS);\n    var actualClass = <Class>actualParent;\n    this.thisFieldFlags = new Map();\n    var members = actualClass.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = _values[i];\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          if (\n            // guaranteed by super\n            field.parent != actualClass ||\n            // has field initializer\n            field.initializerNode ||\n            // is initialized as a ctor parameter\n            field.prototype.parameterIndex != -1 ||\n            // is safe to initialize with zero\n            field.type.isAny(TypeFlags.VALUE | TypeFlags.NULLABLE)\n          ) {\n            this.setThisFieldFlag(field, FieldFlags.INITIALIZED);\n          }\n        }\n      }\n    }\n  }\n\n  /** Tests if the specified `this` field has the specified flag or flags. */\n  isThisFieldFlag(field: Field, flag: FieldFlags): bool {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags != null && fieldFlags.has(field)) {\n      return (changetype<FieldFlags>(fieldFlags.get(field)) & flag) == flag;\n    }\n    return false;\n  }\n\n  /** Sets the specified flag or flags on the given `this` field. */\n  setThisFieldFlag(field: Field, flag: FieldFlags): void {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags) {\n      assert(this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n      if (fieldFlags.has(field)) {\n        let flags = changetype<FieldFlags>(fieldFlags.get(field));\n        fieldFlags.set(field, flags | flag);\n      } else {\n        fieldFlags.set(field, flag);\n      }\n    } else {\n      assert(!this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n    }\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n    this.thisFieldFlags = other.thisFieldFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel == this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ACCESSES_THIS) { // can become conditional\n      if (otherFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (otherFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    // may be the case in any\n    newFlags |= (thisFlags | otherFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & (FlowFlags.UNCHECKED_CONTEXT | FlowFlags.CTORPARAM_CONTEXT));\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      thisLocalFlags[i] = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n    }\n\n    // field flags do not matter here since there's only INITIALIZED, which can\n    // only be set if it has been observed prior to entering the branch.\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ACCESSES_THIS) {\n      if (rightFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (rightFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    newFlags |= (leftFlags | rightFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & (FlowFlags.UNCHECKED_CONTEXT | FlowFlags.CTORPARAM_CONTEXT));\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        thisLocalFlags[i] = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n      }\n    }\n\n    // field flags (currently only INITIALIZED, so can simplify)\n    var leftFieldFlags = left.thisFieldFlags;\n    if (leftFieldFlags) {\n      let newFieldFlags = new Map<Field,FieldFlags>();\n      let rightFieldFlags = assert(right.thisFieldFlags);\n      for (let _keys = Map_keys(leftFieldFlags), i = 0, k = _keys.length; i < k; ++i) {\n        let key = _keys[i];\n        let leftFlags = changetype<FieldFlags>(leftFieldFlags.get(key));\n        if (\n          (leftFlags & FieldFlags.INITIALIZED) != 0 && rightFieldFlags.has(key) &&\n          (changetype<FieldFlags>(rightFieldFlags.get(key)) & FieldFlags.INITIALIZED)\n        ) {\n          newFieldFlags.set(key, FieldFlags.INITIALIZED);\n        }\n      }\n      this.thisFieldFlags = newFieldFlags;\n    } else {\n      assert(!right.thisFieldFlags);\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction == after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex == after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.isShortIntegerValue) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.isNullableReference) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.isNullableReference) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (ifFalse && isConstZero(ifFalse)) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n          this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (isConstNonZero(left)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (isConstNonZero(right)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (isConstZero(left)) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (isConstZero(right)) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        // handle string eq/ne/not overloads\n        let name = getCallTarget(expr);\n        if (name == BuiltinNames.String_eq) {\n          assert(getCallOperandCount(expr) == 2);\n          let left = getCallOperandAt(expr, 0);\n          let right = getCallOperandAt(expr, 1);\n          if (isConstNonZero(left)) {\n            this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n          } else if (isConstNonZero(right)) {\n            this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n          }\n        } else if (name == BuiltinNames.String_ne) {\n          assert(getCallOperandCount(expr) == 2);\n          let left = getCallOperandAt(expr, 0);\n          let right = getCallOperandAt(expr, 1);\n          if (isConstZero(left)) {\n            this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n          } else if (isConstZero(right)) {\n            this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n          }\n        } else if (name == BuiltinNames.String_not) {\n          assert(getCallOperandCount(expr) == 1);\n          this.inheritNonnullIfFalse(getCallOperandAt(expr, 0), iff); // !value -> value must have been false\n        } else if (name == BuiltinNames.tostack) {\n          assert(getCallOperandCount(expr) == 1);\n          this.inheritNonnullIfTrue(getCallOperandAt(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        let ifFalse = getIfFalse(expr);\n        if (ifFalse && isConstNonZero(ifTrue)) {\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n          this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (isConstZero(left)) {\n              this.inheritNonnullIfTrue(right, iff); // !(FALSE == right) -> right must have been true\n            } else if (isConstZero(right)) {\n              this.inheritNonnullIfTrue(left, iff); // !(left == FALSE) -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (isConstNonZero(left)) {\n              this.inheritNonnullIfTrue(right, iff); // !(TRUE != right) -> right must have been true\n            } else if (isConstNonZero(right)) {\n              this.inheritNonnullIfTrue(left, iff); // !(left != TRUE) -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        // handle string eq/ne/not overloads\n        let name = getCallTarget(expr);\n        if (name == BuiltinNames.String_eq) {\n          assert(getCallOperandCount(expr) == 2);\n          let left = getCallOperandAt(expr, 0);\n          let right = getCallOperandAt(expr, 1);\n          if (isConstZero(left)) {\n            this.inheritNonnullIfTrue(right, iff); // !(FALSE == right) -> right must have been true\n          } else if (isConstZero(right)) {\n            this.inheritNonnullIfTrue(left, iff); // !(left == FALSE) -> left must have been true\n          }\n        } else if (name == BuiltinNames.String_ne) {\n          assert(getCallOperandCount(expr) == 2);\n          let left = getCallOperandAt(expr, 0);\n          let right = getCallOperandAt(expr, 1);\n          if (isConstNonZero(left)) {\n            this.inheritNonnullIfTrue(right, iff); // !(TRUE != right) -> right must have been true\n          } else if (isConstNonZero(right)) {\n            this.inheritNonnullIfTrue(left, iff); // !(left != TRUE) -> left must have been true\n          }\n        } else if (name == BuiltinNames.String_not) {\n          assert(getCallOperandCount(expr) == 1);\n          this.inheritNonnullIfTrue(getCallOperandAt(expr, 0), iff); // !(!value) -> value must have been true\n        } else if (name == BuiltinNames.tostack) {\n          assert(getCallOperandCount(expr) == 1);\n          this.inheritNonnullIfFalse(getCallOperandAt(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.isShortIntegerValue) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL || global.kind == ElementKind.ENUMVALUE);\n        return canConversionOverflow((<TypedElement>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.isSignedIntegerValue\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) &&\n                !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n\n          // sign extensions overflow if result can have high garbage bits in the target type\n          case UnaryOp.Extend8I32: return type.size < (type.isUnsignedIntegerValue ? 32 : 8);\n          case UnaryOp.Extend8I64: return type.size < (type.isUnsignedIntegerValue ? 64 : 8);\n          case UnaryOp.Extend16I32: return type.size < (type.isUnsignedIntegerValue ? 32 : 16);\n          case UnaryOp.Extend16I64: return type.size < (type.isUnsignedIntegerValue ? 64 : 16);\n          case UnaryOp.Extend32I64: return type.size < (type.isUnsignedIntegerValue ? 64 : 32);\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>TypeRef.I32: { value = getConstValueI32(expr); break; }\n          case <u32>TypeRef.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>TypeRef.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>TypeRef.F64: { value = i32(getConstValueF64(expr)); break; }\n          case <u32>TypeRef.V128: return false;\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.BOOL: return (value & ~1) != 0;\n          case TypeKind.I8:   return value < <i32>i8.MIN_VALUE  || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16:  return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8:   return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16:  return value < 0 || value > <i32>u16.MAX_VALUE;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChildAt(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ACCESSES_THIS)) sb.push(\"ACCESSES_THIS\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ACCESSES_THIS)) sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n    if (this.is(FlowFlags.MAY_RETURN_NONTHIS)) sb.push(\"MAY_RETURN_NONTHIS\");\n    return `Flow(${this.actualFunction})[${levels}] ${sb.join(\" \")}`;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return toType.isShortIntegerValue && (\n    !fromType.isIntegerValue ||                                    // i.e. float to small int\n    fromType.size > toType.size ||                                 // larger int to small int\n    fromType.isSignedIntegerValue != toType.isSignedIntegerValue   // signedness mismatch\n  );\n}\n\nexport { findUsedLocals } from \"./passes/findusedlocals\";\n", "/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Range,\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Interface,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  IndexSignature,\n  isTypedElement,\n  InterfacePrototype,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression,\n  ArrowKind,\n  ExpressionStatement\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  cloneMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport const enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n  /** Whether a new overload has been discovered. */\n  discoveredOverload: bool = false;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, `${element.name}/i32`\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes and interfaces\n      if (\n        element.kind == ElementKind.CLASS_PROTOTYPE ||\n        element.kind == ElementKind.INTERFACE_PROTOTYPE\n      ) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          cloneMap(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native)   return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof)  return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof)  return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.nonnull)  return this.resolveBuiltinNotNullableType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = cloneMap(ctxTypes), // update\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (type.isInternalReference) return type.asNullable();\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_cannot_be_nullable,\n            nameNode.range, nameNode.identifier.text\n          );\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:  return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64:  return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64:  return Type.u64;\n      case TypeKind.F32:  return Type.f32;\n      case TypeKind.F64:  return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNode.range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      let parameterTypes = overload.signature.parameterTypes;\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(parameterTypes.length == 2);\n        return parameterTypes[1];\n      } else {\n        assert(parameterTypes.length == 1);\n        return parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNode.range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.getClassOrWrapper(this.program);\n    if (classReference) {\n      let overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n      if (overload) return overload.signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNode.range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.getSignature();\n    if (signatureReference) return signatureReference.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_has_no_call_signatures,\n        typeArgumentNode.range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinNotNullableType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    if (!typeArgument.isNullableReference) return typeArgument;\n    return typeArgument.nonNullableType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text, true);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.getMember(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. Updated in place with the new set of contextual types. */\n    ctxTypes: Map<string,Type> = new Map(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var\n      minParameterCount = 0,\n      maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    var oldCtxTypes = cloneMap(ctxTypes);\n    ctxTypes.clear();\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            oldCtxTypes, // update\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            cloneMap(ctxTypes), // don't update\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        cloneMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = cloneMap(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.args;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments\n          ? argumentNodes[i]\n          : parameterNodes[i].initializer;\n        if (!argumentExpression) {\n          // optional but not have initializer should be handled in the other place\n          if (parameterNodes[i].parameterKind == ParameterKind.OPTIONAL) {\n            continue;\n          }\n          // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) {\n            this.propagateInferredGenericTypes(\n              typeNode,\n              type,\n              prototype,\n              contextualTypeArguments,\n              typeParameterNames\n            );\n          }\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let typeParameterNode = typeParameterNodes[i];\n        let name = typeParameterNode.name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n          let defaultType = typeParameterNode.defaultType;\n          if (defaultType) {\n            // Default parameters are resolved in context of the called function, not the calling function\n            let parent = prototype.parent;\n            let defaultTypeContextualTypeArguments: Map<string, Type> | null = null;\n            if (parent.kind == ElementKind.CLASS) {\n              defaultTypeContextualTypeArguments = (<Class>parent).contextualTypeArguments;\n            } else if (parent.kind == ElementKind.FUNCTION) {\n              defaultTypeContextualTypeArguments = (<Function>parent).contextualTypeArguments;\n            }\n            let resolvedDefaultType = this.resolveType(\n              defaultType,\n              prototype,\n              defaultTypeContextualTypeArguments,\n              reportMode\n            );\n            if (!resolvedDefaultType) return null;\n            resolvedTypeArguments[i] = resolvedDefaultType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        cloneMap(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, new Map(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxElement);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(\n                  typeArgumentNodes[i],\n                  typeArguments[i],\n                  ctxElement,\n                  ctxTypes,\n                  typeParameterNames\n                );\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (\n            currentType == Type.auto ||\n            (typeParameterNames.has(name) && currentType.isAssignableTo(type))\n          ) ctxTypes.set(name, type);\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      let signatureReference = type.signatureReference;\n      if (signatureReference) {\n        let parameterTypes = signatureReference.parameterTypes;\n        for (let i = 0, k = min(parameterTypes.length, parameterNodes.length) ; i < k; ++i) {\n          this.propagateInferredGenericTypes(\n            parameterNodes[i].type,\n            parameterTypes[i],\n            ctxElement,\n            ctxTypes,\n            typeParameterNames\n          );\n        }\n        let returnType = signatureReference.returnType;\n        if (returnType != Type.void) {\n          this.propagateInferredGenericTypes(\n            functionTypeNode.returnType,\n            returnType,\n            ctxElement,\n            ctxTypes,\n            typeParameterNames\n          );\n        }\n        let thisType = signatureReference.thisType;\n        let explicitThisType = functionTypeNode.explicitThisType;\n        if (thisType && explicitThisType) {\n          this.propagateInferredGenericTypes(\n            explicitThisType,\n            thisType,\n            ctxElement,\n            ctxTypes,\n            typeParameterNames\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      let classReference = type.getClassOrWrapper(this.program);\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    let classReference = type.getClassOrWrapper(this.program);\n    if (classReference) return classReference;\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** resolving expressions */\n  private resolvingExpressions: Set<Expression> = new Set();\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const resolvingExpressions = this.resolvingExpressions;\n    if (resolvingExpressions.has(node)) return null;\n    resolvingExpressions.add(node);\n    const resolved = this.doResolveExpression(node, ctxFlow, ctxType, reportMode);\n    resolvingExpressions.delete(node);\n    return resolved;\n  }\n\n  /** Resolves an expression to its static type. (may cause stack overflow) */\n  private doResolveExpression(\n    node: Expression,\n    ctxFlow: Flow,\n    ctxType: Type = Type.auto,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    var outerFlow = ctxFlow.outer;\n    if (outerFlow) {\n      if (element = outerFlow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.getClass();\n        if (classReference) {\n          return classReference.type.asNullable();\n        } else {\n          let signatureReference = ctxType.getSignature();\n          if (signatureReference) {\n            return signatureReference.type.asNullable();\n          } else if (ctxType.isExternalReference) {\n            return ctxType; // TODO: nullable?\n          }\n        }\n        return this.program.options.usizeType;\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, new Map(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    var type = typeNode\n      ? this.resolveType(typeNode, global.parent, null, reportMode)\n      : this.resolveExpression(\n          assert(global.initializerNode),\n          global.file.startFunction.flow,\n          Type.auto,\n          reportMode\n        );\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, variableLikeElement.type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyInstance = this.resolveProperty(<PropertyPrototype>target, reportMode);\n        if (!propertyInstance) return null;\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, returnType.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // Function with shadow type, i.e. function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        } else if (!target.is(CommonFlags.GENERIC)) {\n          // Inherit from 'Function' if not overridden, i.e. fn.call\n          let ownMember = target.getMember(propertyName);\n          if (!ownMember) {\n            let functionInstance = this.resolveFunction(<FunctionPrototype>target, null, new Map(), ReportMode.SWALLOW);\n            if (functionInstance) {\n              let wrapper = functionInstance.type.getClassOrWrapper(this.program);\n              if (wrapper) target = wrapper;\n            }\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: {\n        do {\n          let member = target.getMember(propertyName);\n          if (member) {\n            if (member.kind == ElementKind.PROPERTY_PROTOTYPE) {\n              let propertyInstance = this.resolveProperty(<PropertyPrototype>member, reportMode);\n              if (!propertyInstance) return null;\n              member = propertyInstance;\n              if (propertyInstance.is(CommonFlags.STATIC)) {\n                this.currentThisExpression = null;\n              } else {\n                this.currentThisExpression = targetNode;\n              }\n            } else {\n              this.currentThisExpression = targetNode;\n            }\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (\n            target.kind == ElementKind.CLASS_PROTOTYPE ||\n            target.kind == ElementKind.INTERFACE_PROTOTYPE\n          ) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (\n            target.kind == ElementKind.CLASS ||\n            target.kind == ElementKind.INTERFACE\n          ) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let member = target.getMember(propertyName);\n        if (member) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    let classReference = targetType.getClassOrWrapper(this.program);\n    if (classReference) {\n      do {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    expr: IntegerLiteralExpression,\n    /** Has unary minus before literal. */\n    negate: bool,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    let intValue = expr.value;\n    if (negate) {\n      // x + i64.min > 0   ->   underflow\n      if (i64_gt(i64_add(intValue, i64_minimum), i64_zero)) {\n        let range = expr.range;\n        this.error(\n          DiagnosticCode.Literal_0_does_not_fit_into_i64_or_u64_types,\n          range, range.source.text.substring(range.start - 1, range.end)\n        );\n      } else if (i64_eq(intValue, i64_zero)) {\n        // Special handling for -0\n        if (ctxType.isFloatValue) {\n          return ctxType.kind == TypeKind.F32\n            ? Type.f32\n            : Type.f64;\n        } else if (!ctxType.isIntegerValue) {\n          // If it's unknown just always assume this is f64\n          return Type.f64;\n        }\n      }\n      intValue = i64_neg(intValue);\n    }\n    if (ctxType.isValue) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          node.range,\n          \"Const assertion\"\n        );\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(\n            <IntegerLiteralExpression>operand,\n            true,\n            ctxType\n          );\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      case Token.DOT_DOT_DOT: {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            node.range, \"Spread operator\"\n          );\n        }\n        return null;\n      }\n      case Token.TYPEOF: {\n        return this.program.stringInstance.type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: // mod has special logic, but also behaves like this\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          <IntegerLiteralExpression>node,\n          false,\n          ctxType\n        );\n        return assert(intType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        return assert(fltType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.STRING:\n      case LiteralKind.TEMPLATE: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.REGEXP: {\n        return this.program.regexpInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.getClass();\n        if (classReference && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n                node.range, \"T\"\n              );\n            }\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.isInternalReference\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n      case LiteralKind.OBJECT: {\n        if (ctxType.isClass) return ctxType.classReference;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            node.range\n          );\n        }\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.args.length > 0\n        ) {\n          return this.resolveExpression(node.args[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let varType = (<VariableLikeElement>target).type;\n        let varElement = this.getElementOfType(varType);\n        if (!varElement || varElement.kind != ElementKind.CLASS) {\n          break;\n        }\n        target = varElement;\n        // fall-through\n      }\n      case ElementKind.CLASS: {\n        let typeArguments = (<Class>target).getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          let signatureReference = assert(ftype.signatureReference);\n          return signatureReference.returnType;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    return assert(Type.bool.getClassOrWrapper(this.program));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        cloneMap(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const declaration = node.declaration;\n    const signature = declaration.signature;\n    const body = declaration.body;\n    let functionType = this.resolveFunctionType(signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n    if (\n      functionType &&\n      declaration.arrowKind != ArrowKind.NONE &&\n      body && body.kind == NodeKind.EXPRESSION &&\n      isTypeOmitted(signature.returnType)\n    ) {\n      // (x) => ret, infer return type accordingt to `ret`\n      const expr = (<ExpressionStatement>body).expression;\n      let signatureReference = assert(functionType.getSignature());\n      // create a temp flow to resolve expression\n      let tempFlow = Flow.createParent(ctxFlow.actualFunction);\n      let parameters = signature.parameters;\n      // return type of resolveFunctionType should have same parameter length with signature\n      assert(signatureReference.parameterTypes.length == parameters.length);\n      for (let i = 0, k = parameters.length; i < k; i++) {\n        const parameter = parameters[i];\n        const type = signatureReference.parameterTypes[i];\n        tempFlow.addScopedDummyLocal(parameter.name.text, type, parameter);\n      }\n      const type = this.resolveExpression(expr, tempFlow, ctxType, reportMode);\n      if (type) {\n        signatureReference.returnType = type;\n      }\n    }\n    return functionType;\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = new Map(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS || actualParent.kind == ElementKind.INTERFACE);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          // override contextual\n          ctxTypes.set(classTypeParameterName, classTypeArguments[i]);\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      if (parameterType == Type.void) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      parameterTypes[i] = parameterType;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += `<${instanceKey}>`;\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // remember discovered overloads for virtual stub finalization\n    if (classInstance) {\n      let methodOrPropertyName = instance.declaration.name.text;\n      let baseClass = classInstance.base;\n      while (baseClass) {\n        let baseMembers = baseClass.members;\n        if (baseMembers && baseMembers.has(methodOrPropertyName)) {\n          this.discoveredOverload = true;\n          break;\n        }\n        baseClass = baseClass.base;\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes, // update\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves reachable overloads of the given instance method. */\n  resolveOverloads(instance: Function): Function[] | null {\n    var overloadPrototypes = instance.prototype.overloads;\n    if (!overloadPrototypes) return null;\n\n    var parentClassInstance = assert(instance.getClassOrInterface());\n    var overloads = new Set<Function>();\n\n    // A method's `overloads` property contains its unbound overload prototypes\n    // so we first have to find the concrete classes it became bound to, obtain\n    // their bound prototypes and make sure these are resolved.\n    for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n      let unboundOverloadPrototype = _values[i];\n      assert(!unboundOverloadPrototype.isBound);\n      let unboundOverloadParent = unboundOverloadPrototype.parent;\n      let isProperty = unboundOverloadParent.kind == ElementKind.PROPERTY_PROTOTYPE;\n      let classInstances: Map<string,Class> | null;\n      if (isProperty) {\n        let propertyParent = (<PropertyPrototype>unboundOverloadParent).parent;\n        assert(propertyParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>propertyParent).instances;\n      } else {\n        assert(unboundOverloadParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>unboundOverloadParent).instances;\n      }\n      if (!classInstances) continue;\n      for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n        let classInstance = _values[j];\n        // Check if the parent class is a subtype of instance's class\n        if (!classInstance.isAssignableTo(parentClassInstance)) continue;\n        let overloadInstance: Function | null;\n        if (isProperty) {\n          let boundProperty = assert(classInstance.members!.get(unboundOverloadParent.name));\n          assert(boundProperty.kind == ElementKind.PROPERTY_PROTOTYPE);\n          let boundPropertyInstance = this.resolveProperty(<PropertyPrototype>boundProperty);\n          if (!boundPropertyInstance) continue;\n          if (instance.is(CommonFlags.GET)) {\n            overloadInstance = boundPropertyInstance.getterInstance;\n          } else {\n            assert(instance.is(CommonFlags.SET));\n            overloadInstance = boundPropertyInstance.setterInstance;\n          }\n        } else {\n          let boundPrototype = assert(classInstance.members!.get(unboundOverloadPrototype.name));\n          assert(boundPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          overloadInstance = this.resolveFunction(<FunctionPrototype>boundPrototype, instance.typeArguments);\n        }\n        if (overloadInstance) overloads.add(overloadInstance);\n      }\n    }\n    return Set_values(overloads);\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Set<Class> = new Set();\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = new Map(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += `<${instanceKey}>`;\n    if (prototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n      instance = new Interface(nameInclTypeParameters, <InterfacePrototype>prototype, typeArguments);\n    } else {\n      instance = new Class(nameInclTypeParameters, prototype, typeArguments);\n    }\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.add(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    var anyPending = false;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        cloneMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.has(base)) anyPending = true;\n    }\n\n    // Resolve interfaces if applicable\n    var interfacePrototypes = prototype.interfacePrototypes;\n    if (interfacePrototypes) {\n      for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n        let interfacePrototype = interfacePrototypes[i];\n        let current: ClassPrototype | null = interfacePrototype;\n        do {\n          if (current == prototype) {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              prototype.identifierNode.range,\n              prototype.internalName\n            );\n            return null;\n          }\n          current = current.basePrototype;\n        } while (current);\n        let implementsNode = assert(prototype.implementsNodes![i]);\n        let iface = this.resolveClassInclTypeArguments(\n          interfacePrototype,\n          implementsNode.typeArguments,\n          prototype.parent,\n          cloneMap(ctxTypes),\n          implementsNode,\n          reportMode\n        );\n        if (!iface) return null;\n        assert(iface.kind == ElementKind.INTERFACE);\n        instance.addInterface(<Interface>iface);\n\n        // Like above, if any implemented interface is still pending, yield\n        if (pendingClasses.has(iface)) anyPending = true;\n      }\n    }\n    if (anyPending) return instance;\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var members = instance.members;\n    if (!members) instance.members = members = new Map();\n\n    var pendingClasses = this.resolveClassPending;\n    var unimplemented = new Map<string,DeclaredElement>();\n\n    // Alias interface members\n    var interfaces = instance.interfaces;\n    if (interfaces) {\n      for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n        let iface = _values[i];\n        assert(!pendingClasses.has(iface));\n        let ifaceMembers = iface.members;\n        if (ifaceMembers) {\n          for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(ifaceMembers.get(memberName));\n            if (members.has(memberName)) {\n              let existing = assert(members.get(memberName));\n              if (!member.isCompatibleOverride(existing)) {\n                this.errorRelated(\n                  DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                  member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n                );\n                continue;\n              }\n            }\n            members.set(memberName, member);\n            unimplemented.set(memberName, member);\n          }\n        }\n      }\n    }\n\n    // Alias base members\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.has(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(baseMembers.get(memberName));\n          if (members.has(memberName)) {\n            let existing = assert(members.get(memberName));\n            if (!member.isCompatibleOverride(existing)) {\n              this.errorRelated(\n                DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n              );\n              continue;\n            }\n          }\n          members.set(memberName, member);\n          if (member.is(CommonFlags.ABSTRACT)) {\n            unimplemented.set(memberName, member);\n          } else {\n            unimplemented.delete(memberName);\n          }\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    var properties = new Array<Property>();\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        let memberName = member.name;\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            let existingField: Field | null = null;\n            if (base) {\n              let baseMembers = base.members;\n              if (baseMembers && baseMembers.has(fieldPrototype.name)) {\n                let baseField = assert(baseMembers.get(fieldPrototype.name));\n                if (baseField.kind == ElementKind.FIELD) {\n                  existingField = <Field>baseField;\n                } else {\n                  this.errorRelated(\n                    DiagnosticCode.Duplicate_identifier_0,\n                    fieldPrototype.identifierNode.range, baseField.identifierNode.range,\n                    fieldPrototype.name\n                  );\n                }\n              }\n            }\n            if (!fieldTypeNode) {\n              if (existingField && !existingField.is(CommonFlags.PRIVATE)) {\n                fieldType = existingField.type;\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n              if (fieldType == Type.void) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldTypeNode.range\n                  );\n                }\n                break;\n              }\n            }\n            if (!fieldType) break; // did report above\n            if (existingField) {\n              // visibility checks\n              /*\n                          existingField visibility on top\n                +==================+=========+===========+=========+\n                | Visibility Table | Private | Protected | Public  |\n                +==================+=========+===========+=========+\n                | Private          | error   | error     | error   |\n                +------------------+---------+-----------+---------+\n                | Protected        | error   | allowed   | error   |\n                +------------------+---------+-----------+---------+\n                | Public           | error   | allowed   | allowed |\n                +------------------+---------+-----------+---------+\n              */\n\n              let baseClass = <Class>base;\n\n              // handle cases row-by-row\n              if (fieldPrototype.is(CommonFlags.PRIVATE)) {\n                if (existingField.is(CommonFlags.PRIVATE)) {\n                  this.errorRelated(\n                    DiagnosticCode.Types_have_separate_declarations_of_a_private_property_0,\n                    fieldPrototype.identifierNode.range, existingField.identifierNode.range,\n                    fieldPrototype.name\n                  );\n                } else {\n                  this.errorRelated(\n                    DiagnosticCode.Property_0_is_private_in_type_1_but_not_in_type_2,\n                    fieldPrototype.identifierNode.range, existingField.identifierNode.range,\n                    fieldPrototype.name, instance.internalName, baseClass.internalName\n                  );\n                }\n              } else if (fieldPrototype.is(CommonFlags.PROTECTED)) {\n                if (existingField.is(CommonFlags.PRIVATE)) {\n                  this.errorRelated(\n                    DiagnosticCode.Property_0_is_private_in_type_1_but_not_in_type_2,\n                    fieldPrototype.identifierNode.range, existingField.identifierNode.range,\n                    fieldPrototype.name, baseClass.internalName, instance.internalName\n                  );\n                } else if (!existingField.is(CommonFlags.PROTECTED)) {\n                  // may be implicitly public\n                  this.errorRelated(\n                    DiagnosticCode.Property_0_is_protected_in_type_1_but_public_in_type_2,\n                    fieldPrototype.identifierNode.range, existingField.identifierNode.range,\n                    fieldPrototype.name, instance.internalName, baseClass.internalName\n                  );\n                }\n              } else {\n                // fieldPrototype is public here\n                if (existingField.is(CommonFlags.PRIVATE)) {\n                  this.errorRelated(\n                    DiagnosticCode.Property_0_is_private_in_type_1_but_not_in_type_2,\n                    fieldPrototype.identifierNode.range, existingField.identifierNode.range,\n                    fieldPrototype.name, baseClass.internalName, instance.internalName\n                  );\n                }\n              }\n\n              // assignability\n              if (!fieldType.isStrictlyAssignableTo(existingField.type)) {\n                this.errorRelated(\n                  DiagnosticCode.Property_0_in_type_1_is_not_assignable_to_the_same_property_in_base_type_2,\n                  fieldPrototype.identifierNode.range, existingField.identifierNode.range,\n                  fieldPrototype.name, instance.internalName, baseClass.internalName\n                );\n              }\n            }\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            if (existingField) {\n              fieldInstance.memoryOffset = existingField.memoryOffset;\n            } else {\n              let mask = fieldType.byteSize - 1;\n              if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n              fieldInstance.memoryOffset = memoryOffset;\n              memoryOffset += fieldType.byteSize;\n            }\n            instance.add(memberName, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let boundPrototype = (<PropertyPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          default: assert(false);\n        }\n        if (!member.is(CommonFlags.ABSTRACT)) {\n          unimplemented.delete(memberName);\n        }\n      }\n    }\n\n    // Check that property getters and setters match\n    for (let i = 0, k = properties.length; i < k; ++i) {\n      let property = properties[i];\n      let propertyGetter = property.getterInstance;\n      if (!propertyGetter) {\n        this.error(\n          DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter,\n          property.identifierNode.range, property.name\n        );\n      } else {\n        let propertySetter = property.setterInstance;\n        if (propertySetter && !propertyGetter.visibilityEquals(propertySetter)) {\n          this.errorRelated(\n            DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility,\n            propertyGetter.identifierNode.range, propertySetter.identifierNode.range\n          );\n        }\n      }\n    }\n\n    if (instance.kind != ElementKind.INTERFACE) {\n\n      // Check that all required members are implemented\n      if (!instance.is(CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n        for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = _keys[i];\n          let member = assert(unimplemented.get(memberName));\n          this.errorRelated(\n            DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2,\n            instance.identifierNode.range, member.identifierNode.range,\n            instance.internalName, memberName, member.parent.internalName\n          );\n        }\n      }\n\n      // Finalize memory offset\n      instance.nextMemoryOffset = memoryOffset;\n\n      // Link _own_ constructor if present\n      {\n        let ctorPrototype = instance.getMember(CommonNames.constructor);\n        if (ctorPrototype && ctorPrototype.parent == instance) {\n          assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let ctorInstance = this.resolveFunction(\n            <FunctionPrototype>ctorPrototype,\n            null,\n            assert(instance.contextualTypeArguments),\n            reportMode\n          );\n          if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      if (overloadPrototype.is(CommonFlags.GENERIC)) {\n        // Already errored during initialization: AS212: Decorator '@operator' is not valid here\n        continue;\n      }\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          new Map(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          new Map(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    assert(pendingClasses.has(instance)); // must be pending\n    pendingClasses.delete(instance);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n      let pending = _values[i];\n      let dependsOnInstance = pending.base == instance;\n      let interfaces = pending.interfaces;\n      if (interfaces) {\n        let anyPending = false;\n        for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n          let iface = _values2[j];\n          if (iface == instance) dependsOnInstance = true;\n          else if (pendingClasses.has(iface)) anyPending = true;\n        }\n        if (anyPending) continue;\n      }\n      if (dependsOnInstance) this.finishResolveClass(pending, reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes, // update\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a property prototype. */\n  resolveProperty(\n    /** The prototype of the property. */\n    prototype: PropertyPrototype,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Property | null {\n    var instance = prototype.instance;\n    if (instance) return instance;\n    prototype.instance = instance = new Property(prototype, prototype);\n    var getterPrototype = prototype.getterPrototype;\n    if (getterPrototype) {\n      let getterInstance = this.resolveFunction(\n        getterPrototype,\n        null,\n        new Map(),\n        reportMode\n      );\n      if (getterInstance) {\n        instance.getterInstance = getterInstance;\n        instance.setType(getterInstance.signature.returnType);\n      }\n    }\n    var setterPrototype = prototype.setterPrototype;\n    if (setterPrototype) {\n      let setterInstance = this.resolveFunction(\n        setterPrototype,\n        null,\n        new Map(),\n        reportMode\n      );\n      if (setterInstance) {\n        instance.setterInstance = setterInstance;\n        if (!instance.is(CommonFlags.RESOLVED)) {\n          assert(setterInstance.signature.parameterTypes.length == 1);\n          instance.setType(setterInstance.signature.parameterTypes[0]);\n        }\n      }\n    }\n    return instance;\n  }\n\n  private ensureOneTypeArgument(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): TypeNode | null {\n    var typeArgumentNodes = node.typeArguments;\n    let numTypeArguments = 0;\n    if (!typeArgumentNodes || (numTypeArguments = typeArgumentNodes.length) != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    return typeArgumentNodes[0];\n  }\n}\n", "/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  Range,\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  CharCode,\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureNode,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n  ModuleDeclaration,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Represents a dependee. */\nclass Dependee {\n  constructor(\n    public source: Source,\n    public reportNode: Node\n  ) {}\n}\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source | null = null;\n  /** Map of dependees being depended upon by a source, by path. */\n  dependees: Map<string, Dependee> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n  /** Current overridden module name. */\n  currentModuleName: string | null = null;\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] = []\n  ) {\n    super(diagnostics);\n    this.sources = sources;\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file, or `null` to indicate not found. */\n    text: string | null,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // check if this is an error\n    if (text == null) {\n      let dependees = this.dependees;\n      let dependee: Dependee | null = null;\n      if (dependees.has(internalPath)) dependee = assert(dependees.get(internalPath));\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        dependee\n          ? dependee.reportNode.range\n          : null,\n        path\n      );\n      return;\n    }\n\n    // create the source element\n    var source = new Source(\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER,\n      normalizedPath,\n      text\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n    this.currentModuleName = null;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) {\n        statements.push(statement);\n      } else {\n        this.skipStatement(tn);\n      }\n    }\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = namespace ? namespace.flags & CommonFlags.AMBIENT : CommonFlags.NONE;\n    var startPos = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart = 0;\n    var exportEnd = 0;\n    var defaultStart = 0;\n    var defaultEnd = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart = 0;\n    var declareEnd = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        let abstractStart = tn.tokenPos;\n        let abstractEnd = tn.pos;\n        let next = tn.peek(true);\n        if (tn.nextTokenOnNewLine) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        }\n        if (next != Token.CLASS) {\n          if (next == Token.INTERFACE) {\n            this.error(\n              DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration,\n              tn.range(abstractStart, abstractEnd)\n            );\n          }\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.MODULE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(true) == Token.STRINGLITERAL && !tn.nextTokenOnNewLine) {\n          tn.discard(state);\n          statement = this.parseModuleDeclaration(tn, flags);\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement != null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the path of the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var dependees = this.dependees;\n    if (dependees.has(dependent)) {\n      let dependee = assert(dependees.get(dependent));\n      return dependee.source.internalPath;\n    }\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'null'\n    } else if (token == Token.NULL) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"null\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, false, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... | null\n    while (tn.skip(Token.BAR)) {\n      if (tn.skip(Token.NULL)) {\n        type.isNullable = true;\n      } else {\n        let notNullStart = tn.pos;\n        let notNull = this.parseType(tn, false, true);\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            notNull ? notNull.range : tn.range(notNullStart), \"null\"\n          );\n        }\n        return null;\n      }\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let paramStart = -1;\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          paramStart = tn.tokenPos;\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn, false);\n            if (!type) return null;\n            if (type.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                type.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>type;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = Node.createParameter(kind, name, type, null, tn.range(paramStart, tn.pos));\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = Node.createParameter(kind, name, Node.createOmittedType(tn.range(tn.pos)), null, tn.range(paramStart, tn.pos));\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = Node.createParameter(\n            firstParamKind,\n            firstParamNameNoType,\n            Node.createOmittedType(firstParamNameNoType.range.atEnd),\n            null,\n            firstParamNameNoType.range\n          );\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n\n    if (!parameters) parameters = [];\n\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var declarations = new Array<VariableDeclaration>();\n    do {\n      let declaration = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!declaration) return null;\n      declaration.overriddenModuleName = this.currentModuleName;\n      declarations.push(declaration);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(decorators, declarations, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITELY_ASSIGNED;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if (initializer && (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      parentDecorators,\n      flags,\n      type,\n      initializer,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      decorators,\n      flags,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    ret.overriddenModuleName = this.currentModuleName;\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      parentFlags,\n      value,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>type;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>type;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        identifier,\n        type,\n        initializer,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      decorators,\n      flags,\n      typeParameters,\n      signature,\n      body,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    ret.overriddenModuleName = this.currentModuleName;\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n      // or at '(' of arrow function:\n      //  Parameters (':' Type)?\n      //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, this.parseParametersThis, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    explicitThis: NamedTypeNode | null,\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      explicitThis,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      signature,\n      body,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let type = this.parseType(tn);\n      if (!type) return null;\n      if (type.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          type.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>type;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        null,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(member instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    declaration.overriddenModuleName = this.currentModuleName;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      null,\n      null,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(declaration instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): Node | null {\n\n    // before:\n    //   'declare'?\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'override'?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface && decorators) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var declareStart = 0;\n    var declareEnd = 0;\n    var contextIsAmbient = parent.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"declare\"\n        );\n      } else {\n        if (contextIsAmbient) {\n          this.error(\n            DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n            tn.range()\n          ); // recoverable\n        } else {\n          flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n          declareStart = tn.tokenPos;\n          declareEnd = tn.pos;\n        }\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      } else {\n        flags |= CommonFlags.PUBLIC;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      } else {\n        flags |= CommonFlags.PRIVATE;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      } else {\n        flags |= CommonFlags.PROTECTED;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      } else {\n        flags |= CommonFlags.STATIC;\n        staticStart = tn.tokenPos;\n        staticEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface || !parent.is(CommonFlags.ABSTRACT)) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        } else {\n          flags |= CommonFlags.ABSTRACT;\n          abstractStart = tn.tokenPos;\n          abstractEnd = tn.pos;\n        }\n        if (!startPos) startPos = tn.tokenPos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var overrideStart = 0;\n    var overrideEnd = 0;\n    if (tn.skip(Token.OVERRIDE)) {\n      if (isInterface || parent.extendsType == null) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"override\"\n        );\n      } else {\n        flags |= CommonFlags.OVERRIDE;\n        overrideStart = tn.tokenPos;\n        overrideEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var readonlyStart = 0;\n    var readonlyEnd = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart = 0;\n    var getEnd = 0;\n    var isSetter = false;\n    var setStart = 0;\n    var setEnd = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var isGetterOrSetter = isGetter || isSetter;\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!isGetterOrSetter && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"private\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.OVERRIDE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(overrideStart, overrideEnd), \"override\"\n          );\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignature(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetterOrSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      if (flags & CommonFlags.DECLARE) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_appear_on_class_elements_of_this_kind,\n          tn.range(declareStart, declareEnd), \"declare\"\n        ); // recoverable\n      }\n\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.type,\n              null, // initialized via parameter\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      } else if (name.text == \"constructor\") {\n        this.error(\n          DiagnosticCode._0_keyword_cannot_be_used_here,\n          name.range, \"constructor\"\n        );\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, isSetter || name.kind == NodeKind.CONSTRUCTOR);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        } else if (isInterface) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!isInterface && !(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT))) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        decorators,\n        flags,\n        typeParameters,\n        signature,\n        body,\n        tn.range(startPos, tn.pos)\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetterOrSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.DECLARE) {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          tn.range(declareStart, declareEnd), \"Ambient fields\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITELY_ASSIGNED;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        }\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if (\n        (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0 &&\n        (isInterface || initializer || (flags & CommonFlags.STATIC) != 0)\n      ) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        decorators,\n        flags,\n        type,\n        initializer,\n        range\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignature(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureNode | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignature(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          decorators,\n          flags,\n          members,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) {\n            if (member.kind == NodeKind.EXPORT) {\n              this.error(\n                DiagnosticCode.A_default_export_can_only_be_used_in_a_module,\n                member.range,\n              );\n              return null;\n            }\n            members.push(member);\n          } else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        declaration.overriddenModuleName = this.currentModuleName;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    var currentSource = assert(this.currentSource);\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      if (path) {\n        let internalPath = assert(ret.internalPath);\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(currentSource, path));\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, new Dependee(currentSource, path));\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          tn.range(),\n          \"Mixed default and named imports\"\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createWildcardImportStatement(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(assert(this.currentSource), path));\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n      // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  private getRecursiveDepthForTypeDeclaration(\n    identifierName: string,\n    type: TypeNode,\n    depth: i32 = 0\n  ): i32 {\n    switch (type.kind) {\n      case NodeKind.NAMEDTYPE: {\n        let typeArguments = (<NamedTypeNode>type).typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; i++) {\n            let res = this.getRecursiveDepthForTypeDeclaration(identifierName, typeArguments[i], depth + 1);\n            if (res != -1) return res;\n          }\n        }\n        if ((<NamedTypeNode>type).name.identifier.text == identifierName) {\n          return depth;\n        }\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        let fnType = <FunctionTypeNode>type;\n        let res = this.getRecursiveDepthForTypeDeclaration(identifierName, fnType.returnType, depth + 1);\n        if (res != -1) return res;\n        let params = fnType.parameters;\n        for (let i = 0, k = params.length; i < k; i++) {\n          res = this.getRecursiveDepthForTypeDeclaration(identifierName, params[i].type, depth + 1);\n          if (res != -1) return res;\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' '|'? Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        tn.skip(Token.BAR);\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let depth = this.getRecursiveDepthForTypeDeclaration(name.text, type);\n        if (depth >= 0) {\n          if (depth == 0) {\n            this.error(\n              DiagnosticCode.Type_alias_0_circularly_references_itself,\n              tn.range(), name.text\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Not_implemented_0,\n              tn.range(), \"Recursion in type aliases\"\n            );\n          }\n          return null;\n        }\n        let ret = Node.createTypeDeclaration(\n          name,\n          decorators,\n          flags,\n          typeParameters,\n          type,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        ret.overriddenModuleName = this.currentModuleName;\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseModuleDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags\n  ): ModuleDeclaration | null {\n\n    // at 'module': StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    assert(tn.next() == Token.STRINGLITERAL); // checked earlier\n    var moduleName = tn.readString();\n    var ret = Node.createModuleDeclaration(moduleName, flags, tn.range(startPos, tn.pos));\n    this.currentModuleName = moduleName;\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN) ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn))\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            null,\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = Node.createOmittedExpression(tn.range(tn.pos));\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.skip(Token.TEMPLATELITERAL)) {\n          return this.parseTemplateLiteral(tn, identifier);\n        }\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                identifier.range\n              )\n            ],\n            null,\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.TEMPLATELITERAL: {\n        return this.parseTemplateLiteral(tn);\n      }\n      case Token.INTEGERLITERAL: {\n        let value = tn.readInteger();\n        tn.checkForIdentifierStartAfterNumericLiteral();\n        return Node.createIntegerLiteralExpression(value, tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        let value = tn.readFloat();\n        tn.checkForIdentifierStartAfterNumericLiteral();\n        return Node.createFloatLiteralExpression(value, tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() == Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          if (tn.skip(Token.TEMPLATELITERAL)) {\n            expr = this.parseTemplateLiteral(tn, expr);\n            if (!expr) return null;\n          } else {\n            expr = this.maybeParseCallExpression(tn, expr, true);\n          }\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private parseTemplateLiteral(tn: Tokenizer, tag: Expression | null = null): Expression | null {\n    // at '`': ... '`'\n    var startPos = tag ? tag.range.start : tn.tokenPos;\n    var parts = new Array<string>();\n    var rawParts = new Array<string>();\n    var exprs = new Array<Expression>();\n    parts.push(tn.readString(0, tag != null));\n    rawParts.push(tn.source.text.substring(tn.readStringStart, tn.readStringEnd));\n    while (tn.readingTemplateString) {\n      let expr = this.parseExpression(tn);\n      if (!expr) return null;\n      exprs.push(expr);\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"}\"\n        );\n        return null;\n      }\n      parts.push(tn.readString(CharCode.BACKTICK, tag != null));\n      rawParts.push(tn.source.text.substring(tn.readStringStart, tn.readStringEnd));\n    }\n    return Node.createTemplateLiteralExpression(tag, parts, rawParts, exprs, tn.range(startPos, tn.pos));\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN) ||\n      potentiallyGeneric &&\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn))\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL:\n        case Token.TEMPLATELITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n    tn.readingTemplateString = false;\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL:{\n          tn.readString();\n          break;\n        }\n        case Token.TEMPLATELITERAL: {\n          tn.readString();\n          while(tn.readingTemplateString){\n            this.skipBlock(tn);\n            tn.readString(CharCode.BACKTICK);\n          }\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n", "/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// \u251C\u2500DeclaredElement          Base class of elements with a declaration\n// \u2502 \u251C\u2500TypedElement           Base class of elements resolving to a type\n// \u2502 \u2502 \u251C\u2500TypeDefinition       Type alias declaration\n// \u2502 \u2502 \u251C\u2500VariableLikeElement  Base class of all variable-like elements\n// \u2502 \u2502 \u2502 \u251C\u2500EnumValue          Enum value\n// \u2502 \u2502 \u2502 \u251C\u2500Global             File global\n// \u2502 \u2502 \u2502 \u251C\u2500Local              Function local\n// \u2502 \u2502 \u2502 \u251C\u2500Field              Class field (instance only)\n// \u2502 \u2502 \u2502 \u2514\u2500Property           Class property\n// \u2502 \u2502 \u251C\u2500IndexSignature       Class index signature\n// \u2502 \u2502 \u251C\u2500Function             Concrete function instance\n// \u2502 \u2502 \u2514\u2500Class                Concrete class instance\n// \u2502 \u251C\u2500Namespace              Namespace with static members\n// \u2502 \u251C\u2500FunctionPrototype      Prototype of concrete function instances\n// \u2502 \u251C\u2500FieldPrototype         Prototype of concrete field instances\n// \u2502 \u251C\u2500PropertyPrototype      Prototype of concrete property instances\n// \u2502 \u2514\u2500ClassPrototype         Prototype of concrete classe instances\n// \u2514\u2500File                     File, analogous to Source in the AST\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_PREFIX,\n  INDEX_SUFFIX,\n  STUB_DELIMITER,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  Range,\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  Signature,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n  ParameterKind\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef,\n  MemorySegment\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  writeI64,\n  writeI32AsI64,\n  writeI64AsI32\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n// Memory manager constants\nconst AL_SIZE = 16;\nconst AL_MASK = AL_SIZE - 1;\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b, a === b\n  NE,                     // a != b, a !== b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    public options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(SourceKind.LIBRARY_ENTRY, LIBRARY_PREFIX + \"native.ts\", \"[native code]\");\n    this.nativeSource = nativeSource;\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n  }\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver!: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code range. */\n  get nativeRange(): Range { return this.nativeSource.range; }\n  /** Special native code file. */\n  nativeFile!: File;\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  // Lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n  /** Module exports. */\n  moduleExports: Map<string,Element> = new Map();\n  /** Module imports. */\n  moduleImports: Map<string,Map<string,Element>> = new Map();\n\n  // Standard library\n\n  /** Gets the standard `ArrayBufferView` instance. */\n  get arrayBufferViewInstance(): Class {\n    var cached = this._arrayBufferViewInstance;\n    if (!cached) this._arrayBufferViewInstance = cached = this.requireClass(CommonNames.ArrayBufferView);\n    return cached;\n  }\n  private _arrayBufferViewInstance: Class | null = null;\n\n  /** Gets the standard `ArrayBuffer` instance. */\n  get arrayBufferInstance(): Class {\n    var cached = this._arrayBufferInstance;\n    if (!cached) this._arrayBufferInstance = cached = this.requireClass(CommonNames.ArrayBuffer);\n    return cached;\n  }\n  private _arrayBufferInstance: Class | null = null;\n\n  /** Gets the standard `Array` prototype. */\n  get arrayPrototype(): ClassPrototype {\n    var cached = this._arrayPrototype;\n    if (!cached) this._arrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _arrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `StaticArray` prototype. */\n  get staticArrayPrototype(): ClassPrototype {\n    var cached = this._staticArrayPrototype;\n    if (!cached) this._staticArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _staticArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Set` prototype. */\n  get setPrototype(): ClassPrototype {\n    var cached = this._setPrototype;\n    if (!cached) this._setPrototype = cached = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _setPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Map` prototype. */\n  get mapPrototype(): ClassPrototype {\n    var cached = this._mapPrototype;\n    if (!cached) this._mapPrototype = cached = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _mapPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Function` prototype. */\n  get functionPrototype(): ClassPrototype {\n    var cached = this._functionPrototype;\n    if (!cached) this._functionPrototype = cached = <ClassPrototype>this.require(CommonNames.Function, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _functionPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int8Array` prototype. */\n  get int8ArrayPrototype(): ClassPrototype {\n    var cached = this._int8ArrayPrototype;\n    if (!cached) this._int8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int16Array` prototype. */\n  get int16ArrayPrototype(): ClassPrototype {\n    var cached = this._int16ArrayPrototype;\n    if (!cached) this._int16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int32Array` prototype. */\n  get int32ArrayPrototype(): ClassPrototype {\n    var cached = this._int32ArrayPrototype;\n    if (!cached) this._int32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int64Array` prototype. */\n  get int64ArrayPrototype(): ClassPrototype {\n    var cached = this._int64ArrayPrototype;\n    if (!cached) this._int64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8Array` prototype. */\n  get uint8ArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ArrayPrototype;\n    if (!cached) this._uint8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8ClampedArray` prototype. */\n  get uint8ClampedArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ClampedArrayPrototype;\n    if (!cached) this._uint8ClampedArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ClampedArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint16Array` prototype. */\n  get uint16ArrayPrototype(): ClassPrototype {\n    var cached = this._uint16ArrayPrototype;\n    if (!cached) this._uint16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint32Array` prototype. */\n  get uint32ArrayPrototype(): ClassPrototype {\n    var cached = this._uint32ArrayPrototype;\n    if (!cached) this._uint32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint64Array` prototype. */\n  get uint64ArrayPrototype(): ClassPrototype {\n    var cached = this._uint64ArrayPrototype;\n    if (!cached) this._uint64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float32Array` prototype. */\n  get float32ArrayPrototype(): ClassPrototype {\n    var cached = this._float32ArrayPrototype;\n    if (!cached) this._float32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float64Array` prototype. */\n  get float64ArrayPrototype(): ClassPrototype {\n    var cached = this._float64ArrayPrototype;\n    if (!cached) this._float64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `String` instance. */\n  get stringInstance(): Class {\n    var cached = this._stringInstance;\n    if (!cached) this._stringInstance = cached = this.requireClass(CommonNames.String);\n    return cached;\n  }\n  private _stringInstance: Class | null = null;\n\n  /** Gets the standard `RegExp` instance. */\n  get regexpInstance(): Class {\n    var cached = this._regexpInstance;\n    if (!cached) this._regexpInstance = cached = this.requireClass(CommonNames.RegExp);\n    return cached;\n  }\n  private _regexpInstance: Class | null = null;\n\n  /** Gets the standard `Object` instance. */\n  get objectInstance(): Class {\n    var cached = this._objectInstance;\n    if (!cached) this._objectInstance = cached = this.requireClass(CommonNames.Object);\n    return cached;\n  }\n  private _objectInstance: Class | null = null;\n\n  /** Gets the standard `TemplateStringsArray` instance. */\n  get templateStringsArrayInstance(): Class {\n    var cached = this._templateStringsArrayInstance;\n    if (!cached) this._templateStringsArrayInstance = cached = this.requireClass(CommonNames.TemplateStringsArray);\n    return cached;\n  }\n  private _templateStringsArrayInstance: Class | null = null;\n\n  /** Gets the standard `abort` instance, if not explicitly disabled. */\n  get abortInstance(): Function | null {\n    var prototype = this.lookup(CommonNames.abort);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  // Runtime interface\n\n  /** Gets the runtime `__alloc(size: usize): usize` instance. */\n  get allocInstance(): Function {\n    var cached = this._allocInstance;\n    if (!cached) this._allocInstance = cached = this.requireFunction(CommonNames.alloc);\n    return cached;\n  }\n  private _allocInstance: Function | null = null;\n\n  /** Gets the runtime `__realloc(ptr: usize, newSize: usize): usize` instance. */\n  get reallocInstance(): Function {\n    var cached = this._reallocInstance;\n    if (!cached) this._reallocInstance = cached = this.requireFunction(CommonNames.realloc);\n    return cached;\n  }\n  private _reallocInstance: Function | null = null;\n\n  /** Gets the runtime `__free(ptr: usize): void` instance. */\n  get freeInstance(): Function {\n    var cached = this._freeInstance;\n    if (!cached) this._freeInstance = cached = this.requireFunction(CommonNames.free);\n    return cached;\n  }\n  private _freeInstance: Function | null = null;\n\n  /** Gets the runtime `__new(size: usize, id: u32): usize` instance. */\n  get newInstance(): Function {\n    var cached = this._newInstance;\n    if (!cached) this._newInstance = cached = this.requireFunction(CommonNames.new_);\n    return cached;\n  }\n  private _newInstance: Function | null = null;\n\n  /** Gets the runtime `__renew(ptr: usize, size: usize): usize` instance. */\n  get renewInstance(): Function {\n    var cached = this._renewInstance;\n    if (!cached) this._renewInstance = cached = this.requireFunction(CommonNames.renew);\n    return cached;\n  }\n  private _renewInstance: Function | null = null;\n\n  /** Gets the runtime `__link(parentPtr: usize, childPtr: usize, expectMultiple: bool): void` instance. */\n  get linkInstance(): Function {\n    var cached = this._linkInstance;\n    if (!cached) this._linkInstance = cached = this.requireFunction(CommonNames.link);\n    return cached;\n  }\n  private _linkInstance: Function | null = null;\n\n  /** Gets the runtime `__collect(): void` instance. */\n  get collectInstance(): Function {\n    var cached = this._collectInstance;\n    if (!cached) this._collectInstance = cached = this.requireFunction(CommonNames.collect);\n    return cached;\n  }\n  private _collectInstance: Function | null = null;\n\n  /** Gets the runtime `__visit(ptr: usize, cookie: u32): void` instance. */\n  get visitInstance(): Function {\n    var cached = this._visitInstance;\n    if (!cached) this._visitInstance = cached = this.requireFunction(CommonNames.visit);\n    return cached;\n  }\n  private _visitInstance: Function | null = null;\n\n  /** Gets the runtime `__typeinfo(id: u32): RTTIFlags` instance. */\n  get typeinfoInstance(): Function {\n    var cached = this._typeinfoInstance;\n    if (!cached) this._typeinfoInstance = cached = this.requireFunction(CommonNames.typeinfo);\n    return cached;\n  }\n  private _typeinfoInstance: Function | null = null;\n\n  /** Gets the runtime `__instanceof(ptr: usize, superId: u32): bool` instance. */\n  get instanceofInstance(): Function {\n    var cached = this._instanceofInstance;\n    if (!cached) this._instanceofInstance = cached = this.requireFunction(CommonNames.instanceof_);\n    return cached;\n  }\n  private _instanceofInstance: Function | null = null;\n\n  /** Gets the runtime `__newBuffer(size: usize, id: u32, data: usize = 0): usize` instance. */\n  get newBufferInstance(): Function {\n    var cached = this._newBufferInstance;\n    if (!cached) this._newBufferInstance = cached = this.requireFunction(CommonNames.newBuffer);\n    return cached;\n  }\n  private _newBufferInstance: Function | null = null;\n\n  /** Gets the runtime `__newArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` instance. */\n  get newArrayInstance(): Function {\n    var cached = this._newArrayInstance;\n    if (!cached) this._newArrayInstance = cached = this.requireFunction(CommonNames.newArray);\n    return cached;\n  }\n  private _newArrayInstance: Function | null = null;\n\n  /** Gets the runtime's internal `BLOCK` instance. */\n  get BLOCKInstance(): Class {\n    var cached = this._BLOCKInstance;\n    if (!cached) this._BLOCKInstance = cached = this.requireClass(CommonNames.BLOCK);\n    return cached;\n  }\n  private _BLOCKInstance: Class | null = null;\n\n  /** Gets the runtime's internal `OBJECT` instance. */\n  get OBJECTInstance(): Class {\n    var cached = this._OBJECTInstance;\n    if (!cached) this._OBJECTInstance = cached = this.requireClass(CommonNames.OBJECT);\n    return cached;\n  }\n  private _OBJECTInstance: Class | null = null;\n\n  // Utility\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Gets the overhead of a memory manager block. */\n  get blockOverhead(): i32 {\n    // BLOCK | data...\n    //       ^ 16b alignment\n    return this.BLOCKInstance.nextMemoryOffset;\n  }\n\n  /** Gets the overhead of a managed object, excl. block overhead, incl. alignment. */\n  get objectOverhead(): i32 {\n    // OBJECT+align | data...\n    //        \u2514 0 \u2518 ^ 16b alignment\n    return (this.OBJECTInstance.nextMemoryOffset - this.blockOverhead + AL_MASK) & ~AL_MASK;\n  }\n\n  /** Gets the total overhead of a managed object, incl. block overhead. */\n  get totalOverhead(): i32 {\n    // BLOCK | OBJECT+align | data...\n    // \u2514     = TOTAL      \u2518 ^ 16b alignment\n    return this.blockOverhead + this.objectOverhead;\n  }\n\n  /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n  computeBlockStart(currentOffset: i32): i32 {\n    var blockOverhead = this.blockOverhead;\n    return ((currentOffset + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n  }\n\n  /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n  computeBlockStart64(currentOffset: i64): i64 {\n    var blockOverhead = i64_new(this.blockOverhead);\n    return i64_sub(i64_align(i64_add(currentOffset, blockOverhead), AL_SIZE), blockOverhead);\n  }\n\n  /** Computes the size of a memory manager block, excl. block overhead. */\n  computeBlockSize(payloadSize: i32, isManaged: bool): i32 {\n    // see: std/rt/tlsf.ts, computeSize; becomes mmInfo\n    if (isManaged) payloadSize += this.objectOverhead;\n    // we know that payload must be aligned, and that block sizes must be chosen\n    // so that blocks are adjacent with the next payload aligned. hence, block\n    // size is payloadSize rounded up to where the next block would start:\n    var blockSize = this.computeBlockStart(payloadSize);\n    // make sure that block size is valid according to TLSF requirements\n    var blockOverhead = this.blockOverhead;\n    var blockMinsize = ((3 * this.options.usizeType.byteSize + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n    if (blockSize < blockMinsize) blockSize = blockMinsize;\n    const blockMaxsize = 1 << 30; // 1 << (FL_BITS + SB_BITS - 1), exclusive\n    const tagsMask = 3;\n    if (blockSize >= blockMaxsize || (blockSize & tagsMask) != 0) {\n      throw new Error(\"invalid block size\");\n    }\n    return blockSize;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, null, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null, flags, null,\n      Node.createOmittedType(range),\n      range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, signature, null, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, [], range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      null,\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(): void {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    var options = this.options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.nonnull, new TypeDefinition(\n      CommonNames.nonnull,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.nonnull, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.funcref, Type.funcref);\n    this.registerNativeType(CommonNames.externref, Type.externref);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n    this.registerNativeType(CommonNames.eqref, Type.eqref);\n    this.registerNativeType(CommonNames.i31ref, Type.i31ref);\n    this.registerNativeType(CommonNames.dataref, Type.dataref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_RUNTIME, Type.i32,\n      i64_new(options.runtime));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n    this.registerConstantInteger(CommonNames.ASC_EXPORT_RUNTIME, Type.bool,\n      i64_new(options.exportRuntime ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_VERSION_MAJOR, Type.i32,\n      i64_new(options.bundleMajorVersion));\n    this.registerConstantInteger(CommonNames.ASC_VERSION_MINOR, Type.i32,\n      i64_new(options.bundleMinorVersion));\n    this.registerConstantInteger(CommonNames.ASC_VERSION_PATCH, Type.i32,\n      i64_new(options.bundlePatchVersion));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_GC, Type.bool,\n      i64_new(options.hasFeature(Feature.GC) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MEMORY64, Type.bool,\n      i64_new(options.hasFeature(Feature.MEMORY64) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_FUNCTION_REFERENCES, Type.bool,\n      i64_new(options.hasFeature(Feature.FUNCTION_REFERENCES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_RELAXED_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.RELAXED_SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXTENDED_CONST, Type.bool,\n      i64_new(options.hasFeature(Feature.EXTENDED_CONST)? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file, queuedExtends);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports.\n    // note that imports may depend upon imports, so repeat until there's no more progress.\n    do {\n      let i = 0, madeProgress = false;\n      while (i < queuedImports.length) {\n        let queuedImport = queuedImports[i];\n        let localIdentifier = queuedImport.localIdentifier;\n        let foreignIdentifier = queuedImport.foreignIdentifier;\n        // File must be found here, as it would otherwise already have been reported by the parser\n        let foreignFile = assert(this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt));\n        if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            foreignIdentifier.text,\n            foreignFile,\n            queuedExports\n          );\n          if (element) {\n            queuedImport.localFile.add(\n              localIdentifier.text,\n              element,\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n          }\n        } else { // i.e. import * as bar from \"./bar\"\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asAliasNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n          queuedImports.splice(i, 1);\n          madeProgress = true;\n        }\n      }\n      if (!madeProgress) {\n        // report queued imports we were unable to resolve\n        for (let j = 0, l = queuedImports.length; j < l; ++j) {\n          let queuedImport = queuedImports[j];\n          let foreignIdentifier = queuedImport.foreignIdentifier;\n          if (foreignIdentifier) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n            );\n          }\n        }\n        break;\n      }\n    } while (true);\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          // File must be found here, as it would otherwise already have been reported by the parser\n          let foreignFile = assert(this.lookupForeignFile(foreignPath, assert(queuedExport.foreignPathAlt)));\n          let element = this.lookupForeign(localName, foreignFile, queuedExports);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.getMember(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookup(localName);\n            if (globalElement && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.arrayBufferInstance.id == 0);\n    assert(this.stringInstance.id == 1);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) {\n      this.registerWrapperClass(Type.funcref, CommonNames.Funcref);\n      this.registerWrapperClass(Type.externref, CommonNames.Externref);\n      if (options.hasFeature(Feature.GC)) {\n        this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n        this.registerWrapperClass(Type.eqref, CommonNames.Eqref);\n        this.registerWrapperClass(Type.i31ref, CommonNames.I31ref);\n        this.registerWrapperClass(Type.dataref, CommonNames.Dataref);\n      }\n    }\n\n    // resolve prototypes of extended classes or interfaces\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n      if (!baseElement) continue;\n      if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n          let basePrototype = <ClassPrototype>baseElement;\n          if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n            this.error(\n              DiagnosticCode.Class_0_is_final_and_cannot_be_extended,\n              extendsNode.range, basePrototype.identifierNode.text\n            );\n          }\n          if (\n            basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n            thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n          ) {\n            this.error(\n              DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n              Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n            );\n          }\n          if (!thisPrototype.extends(basePrototype)) {\n            thisPrototype.basePrototype = basePrototype;\n          } else {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              basePrototype.identifierNode.range,\n              basePrototype.identifierNode.text,\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            extendsNode.range\n          );\n        }\n      } else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          const basePrototype = <InterfacePrototype>baseElement;\n          if (!thisPrototype.extends(basePrototype)) {\n            thisPrototype.basePrototype = basePrototype;\n          } else {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              basePrototype.identifierNode.range,\n              basePrototype.identifierNode.text,\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode.An_interface_can_only_extend_an_interface,\n            extendsNode.range\n          );\n        }\n      }\n    }\n\n    // resolve prototypes of implemented interfaces\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n      for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n        let implementsNode = implementsNodes[j];\n        let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n        if (!interfaceElement) continue;\n        if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          let interfacePrototype = <InterfacePrototype>interfaceElement;\n          let interfacePrototypes = thisPrototype.interfacePrototypes;\n          if (!interfacePrototypes) thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n          interfacePrototypes.push(interfacePrototype);\n        } else {\n          this.error(\n            DiagnosticCode.A_class_can_only_implement_an_interface,\n            implementsNode.range\n          );\n        }\n      }\n    }\n\n    // check for virtual overloads in extended classes and implemented interfaces\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let basePrototype = thisPrototype.basePrototype;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n    }\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let basePrototype = thisPrototype.basePrototype;\n      let interfacePrototypes = thisPrototype.interfacePrototypes;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n      if (interfacePrototypes) {\n        for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n          this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n        }\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort, BuiltinNames.abort);\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace, BuiltinNames.trace);\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed, BuiltinNames.seed);\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) {\n          this.elementsByName.delete(alias);\n          continue;\n        }\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            this.error(DiagnosticCode.Element_0_not_found, null, name);\n          }\n        }\n      }\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Marks virtual members in a base class overloaded in this class. */\n  private markVirtuals(thisPrototype: ClassPrototype, basePrototype: ClassPrototype): void {\n    // TODO: make this work with interfaaces as well\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n            let thisMember = _values[j];\n            if (\n              !thisMember.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.PRIVATE) &&\n              baseInstanceMembers.has(thisMember.name)\n            ) {\n              let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n              if (\n                thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE\n              ) {\n                let thisMethod = <FunctionPrototype>thisMember;\n                let baseMethod = <FunctionPrototype>baseMember;\n                if (!thisMethod.visibilityEquals(baseMethod)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisMethod.identifierNode.range, baseMethod.identifierNode.range\n                  );\n                }\n                baseMember.set(CommonFlags.VIRTUAL);\n                let overloads = baseMethod.overloads;\n                if (!overloads) baseMethod.overloads = overloads = new Set();\n                overloads.add(<FunctionPrototype>thisMember);\n                let baseMethodInstances = baseMethod.instances;\n                if (baseMethodInstances) {\n                  for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                    let baseMethodInstance = _values[a];\n                    baseMethodInstance.set(CommonFlags.VIRTUAL);\n                  }\n                }\n              } else if (\n                thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE\n              ) {\n                let thisProperty = <PropertyPrototype>thisMember;\n                let baseProperty = <PropertyPrototype>baseMember;\n                if (!thisProperty.visibilityEquals(baseProperty)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisProperty.identifierNode.range, baseProperty.identifierNode.range\n                  );\n                }\n                baseProperty.set(CommonFlags.VIRTUAL);\n                let baseGetter = baseProperty.getterPrototype;\n                if (baseGetter) {\n                  baseGetter.set(CommonFlags.VIRTUAL);\n                  let thisGetter = thisProperty.getterPrototype;\n                  if (thisGetter) {\n                    let overloads = baseGetter.overloads;\n                    if (!overloads) baseGetter.overloads = overloads = new Set();\n                    overloads.add(thisGetter);\n                  }\n                  let baseGetterInstances = baseGetter.instances;\n                  if (baseGetterInstances) {\n                    for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseGetterInstance = _values[a];\n                      baseGetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n                let baseSetter = baseProperty.setterPrototype;\n                if (baseSetter && thisProperty.setterPrototype) {\n                  baseSetter.set(CommonFlags.VIRTUAL);\n                  let thisSetter = thisProperty.setterPrototype;\n                  if (thisSetter) {\n                    let overloads = baseSetter.overloads;\n                    if (!overloads) baseSetter.overloads = overloads = new Set();\n                    overloads.add(thisSetter);\n                  }\n                  let baseSetterInstances = baseSetter.instances;\n                  if (baseSetterInstances) {\n                    for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseSetterInstance = _values[a];\n                      baseSetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n              }\n            }\n            if (thisMember.is(CommonFlags.OVERRIDE) && !baseInstanceMembers.has(thisMember.name)) {\n              this.error(\n                DiagnosticCode.This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0,\n                thisMember.identifierNode.range, basePrototype.name\n              );\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookup(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookup(name);\n    if (!element) throw new Error(`Missing standard library component: ${name}`);\n    if (element.kind != kind) throw Error(`Invalid standard library component kind: ${name}`);\n    return element;\n  }\n\n  /** Requires that a global variable is present and returns it. */\n  requireGlobal(name: string): Global {\n    return <Global>this.require(name, ElementKind.GLOBAL);\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(`Invalid standard library class: ${name}`);\n    return resolved;\n  }\n\n  /** Requires that a global function is present and returns it. */\n  requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(`Invalid standard library function: ${name}`);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Marks an element as a module import. */\n  markModuleImport(moduleName: string, name: string, element: Element): void {\n    element.set(CommonFlags.MODULE_IMPORT);\n    var moduleImports = this.moduleImports;\n    var module: Map<string,Element>;\n    if (moduleImports.has(moduleName)) {\n      module = assert(moduleImports.get(moduleName));\n    } else {\n      module = new Map();\n      moduleImports.set(moduleName, module);\n    }\n    module.set(name, element);\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the wrapper class of a non-class type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.isInternalReference && !wrapperClasses.has(type));\n    var element = assert(this.lookup(className));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = assert(this.resolver.resolveClass(<ClassPrototype>element, null));\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.isIntegerInclReference);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.isFloatValue);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing != element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n      ? assert(filesByName.get(foreignPath))\n      : filesByName.has(foreignPathAlt)\n        ? assert(filesByName.get(foreignPathAlt))\n        : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** The other file. */\n    foreignFile: File,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      // check if already resolved\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // follow queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n\n          // re-exported from another file\n          if (queuedExportForeignPath) {\n            let otherFile = this.lookupForeignFile(queuedExportForeignPath, assert(queuedExport.foreignPathAlt));\n            if (!otherFile) return null;\n            foreignName = queuedExport.localIdentifier.text;\n            foreignFile = otherFile;\n            continue;\n          }\n\n          // exported from this file\n          element = foreignFile.getMember(queuedExport.localIdentifier.text);\n          if (element) return element;\n        }\n      }\n      break;\n    } while (true);\n\n    // follow star exports\n    var exportsStar = foreignFile.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = this.lookupForeign(foreignName, exportsStar[i], queuedExports);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.FINAL |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember classes that implement interfaces\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        // cannot implement interfaces when unmanaged\n        if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        } else {\n          queuedImplements.push(element);\n        }\n      }\n    }\n\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATURE: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.args;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.args)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath == null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.getMember(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent, queuedExtends);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n    if (foreignFile) {\n      var element = this.lookupForeign(declaration.foreignName.text, foreignFile, queuedExports);\n      if (element) {\n        parent.add(declaration.name.text, element, declaration.name /* isImport */);\n        return;\n      }\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL | DecoratorFlags.EXTERNAL_JS;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary || declaration.is(CommonFlags.EXPORT)) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember interfaces that extend another interface\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeFieldAsProperty(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of an interface, as a property. */\n  private initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration: FieldDeclaration,\n    /** Parent interface. */\n    parent: InterfacePrototype\n  ): void {\n    var typeNode = declaration.type;\n    if (!typeNode) typeNode = Node.createOmittedType(declaration.name.range.atEnd);\n    this.initializeProperty(\n      Node.createMethodDeclaration(\n        declaration.name,\n        declaration.decorators,\n        declaration.flags | CommonFlags.GET,\n        null,\n        Node.createFunctionType(\n          [],\n          typeNode,\n          null,\n          false,\n          declaration.range\n        ),\n        null,\n        declaration.range\n      ),\n      parent\n    );\n    if (!declaration.is(CommonFlags.READONLY)) {\n      this.initializeProperty(\n        Node.createMethodDeclaration(\n          declaration.name,\n          declaration.decorators,\n          declaration.flags | CommonFlags.SET,\n          null,\n          Node.createFunctionType(\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                declaration.name,\n                typeNode,\n                null,\n                declaration.name.range\n              )\n            ],\n            Node.createOmittedType(declaration.name.range.atEnd),\n            null,\n            false,\n            declaration.range\n          ),\n          null,\n          declaration.range\n        ),\n        parent\n      );\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.getMember(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original, queuedExtends);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // keep original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.AMBIENT)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport const enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a final class. */\n  FINAL = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Has external JavaScript code. */\n  EXTERNAL_JS = 1 << 8,\n  /** Is a builtin. */\n  BUILTIN = 1 << 9,\n  /** Is compiled lazily. */\n  LAZY = 1 << 10,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 11\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.EXTERNAL_JS: return DecoratorFlags.EXTERNAL_JS;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent!: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n  /** Tests if this element has any of the specified decorator flags. */\n  hasAnyDecorator(flags: DecoratorFlags): bool { return (this.decoratorFlags & flags) != 0; }\n\n  /** Get the member with the specified name, if any. */\n  getMember(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element. */\n  lookup(name: string, isType: bool = false): Element | null {\n    return this.parent.lookup(name, isType);\n  }\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent != this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Checks if this element is public, explicitly or implicitly. */\n  get isPublic(): bool {\n    return !this.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED);\n  }\n\n  /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n  get isImplicitlyPublic(): bool {\n    return this.isPublic && !this.is(CommonFlags.PUBLIC);\n  }\n\n  /** Checks if the visibility of this element equals the specified. */\n  visibilityEquals(other: Element): bool {\n    if (this.isPublic == other.isPublic) return true;\n    const vis = CommonFlags.PRIVATE | CommonFlags.PROTECTED;\n    return (this.flags & vis) == (other.flags & vis);\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return `${this.internalName}, kind=${this.kind}`;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the signature node, if applicable, along the identifier node. */\n  get identifierAndSignatureRange(): Range {\n    var declaration = this.declaration;\n    var identifierNode = declaration.name;\n    if (declaration.kind == NodeKind.FUNCTIONDECLARATION || declaration.kind == NodeKind.METHODDECLARATION) {\n      let signatureNode = (<FunctionDeclaration>declaration).signature;\n      return Range.join(identifierNode.range, signatureNode.range);\n    }\n    return identifierNode.range;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n\n  /** Checks if this element is a compatible override of the specified. */\n  isCompatibleOverride(base: DeclaredElement): bool {\n    var self: DeclaredElement = this; // TS\n    var kind = self.kind;\n    if (kind == base.kind) {\n      switch (kind) {\n        case ElementKind.FUNCTION: {\n          return (<Function>self).signature.isAssignableTo((<Function>base).signature);\n        }\n        case ElementKind.PROPERTY: {\n          let selfProperty = <Property>self;\n          let baseProperty = <Property>base;\n          let selfGetter = selfProperty.getterInstance;\n          let baseGetter = baseProperty.getterInstance;\n          if (selfGetter) {\n            if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature)) {\n              return false;\n            }\n          } else if (baseGetter) {\n            return false;\n          }\n          let selfSetter = selfProperty.setterInstance;\n          let baseSetter = baseProperty.setterInstance;\n          if (selfSetter) {\n            if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature)) {\n              return false;\n            }\n          } else if (baseSetter) {\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction!: Function;\n  /** Array of `import * as X` alias namespaces of this file. */\n  aliasNamespaces: Array<Namespace> = new Array<Namespace>();\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      `start:${this.internalName}`,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.getMember(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  getMember(name: string): DeclaredElement | null {\n    var element = super.getMember(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].getMember(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string, isType: bool = false): Element | null {\n    var element = this.getMember(name);\n    if (element) return element;\n    return this.program.lookup(name); // has no meaningful parent\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n\n    // Also, add to the namespaces that capture our exports\n    for(let i = 0; i < this.aliasNamespaces.length; i++) {\n      let ns = this.aliasNamespaces[i];\n      ns.add(name, element);\n    }\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asAliasNamespace(\n    name: string,\n    parent: Element,\n    localIdentifier: IdentifierExpression\n  ): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    // NOTE: Some exports are still queued, and can't yet be added here,\n    // so we remember all the alias namespaces and add to them as well\n    // when adding an element to the file.\n    this.aliasNamespaces.push(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string, isType: bool = false): Element | null {\n    var member = this.getMember(name);\n    if (member) return member;\n    return super.lookup(name, isType);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string, isType: bool = false): Element | null {\n    var member = this.getMember(name);\n    if (member) return member;\n    return super.lookup(name, isType);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64 = i64_zero;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64 = 0;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.isIntegerInclReference);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.isFloatValue);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Original name of the (temporary) local. */\n  private originalName: string;\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.originalName = name;\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n\n  /** Sets the temporary name of this local. */\n  setTemporaryName(name: string): void {\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n\n  /** Resets the temporary name of this local. */\n  resetTemporaryName(): void {\n    var name = this.originalName;\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n  /** Methods overloading this one, if any. These are unbound. */\n  overloads: Set<FunctionPrototype> | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    var parentKind = parent.kind;\n    if (parentKind == ElementKind.PROPERTY_PROTOTYPE) parentKind = parent.parent.kind;\n    return parentKind == ElementKind.CLASS || parentKind == ElementKind.INTERFACE;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    bound.overloads = this.overloads;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Concrete type arguments. */\n  typeArguments: Type[] | null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow!: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Varargs stub for calling with omitted arguments. */\n  varargsStub: Function | null = null;\n  /** Virtual stub for calling overloads. */\n  virtualStub: Function | null = null;\n  /** Runtime memory segment, if created. */\n  memorySegment: MemorySegment | null = null;\n  /** Original function, if a stub. Otherwise `this`. */\n  original!: Function;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.typeArguments = typeArguments;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.original = this;\n    var program = prototype.program;\n    this.type = signature.type;\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          thisType,\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = this.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.createParent(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Gets the name of the parameter at the specified index. */\n  getParameterName(index: i32): string {\n    var parameters = (<FunctionDeclaration>this.declaration).signature.parameters;\n    return parameters.length > index\n      ? parameters[index].name.text\n      : getDefaultParameterName(index);\n  }\n\n  /** Gets the class or interface this function belongs to, if an instance method. */\n  getClassOrInterface(): Class | null {\n    var parent = this.parent;\n    if (parent.kind == ElementKind.PROPERTY) parent = parent.parent;\n    if (parent.kind == ElementKind.CLASS || parent.kind == ElementKind.INTERFACE) {\n      return <Class>parent;\n    }\n    return null;\n  }\n\n  /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n  newStub(postfix: string): Function {\n    var stub = new Function(\n      this.original.name + STUB_DELIMITER + postfix,\n      this.prototype,\n      this.typeArguments,\n      this.signature.clone(),\n      this.contextualTypeArguments\n    );\n    stub.original = this.original;\n    stub.set(this.flags & ~CommonFlags.COMPILED | CommonFlags.STUB);\n    return stub;\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name != null ? name : `var$${localIndex}`;\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string, isType: bool = false): Element | null {\n    if (!isType) {\n      let locals = this.localsByName;\n      if (locals.has(name)) return assert(locals.get(name));\n    }\n    return super.lookup(name, isType);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempFuncrefs: Local[] | null = null;\n  tempExternrefs: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempEqrefs: Local[] | null = null;\n  tempI31refs: Local[] | null = null;\n  tempDatarefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    var breakStack = this.breakStack;\n    assert(!breakStack || !breakStack.length); // internal error\n    this.breakStack = breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt() - 1 // source maps are 0-based\n        );\n      }\n    }\n    if (this.program.options.debugInfo) {\n      let localNameMap = new Set<string>();\n      let localsByIndex = this.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; i++) {\n        let localName = localsByIndex[i].name;\n        if (localNameMap.has(localName)) {\n          let repeat = 0;\n          while (localNameMap.has(`${localName}_${repeat}`)) {\n            repeat++;\n          }\n          localName = `${localName}_${repeat}`;\n        }\n        localNameMap.add(localName);\n        module.setLocalName(ref, i, localName);\n      }\n    }\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the field's `this` type. */\n  get thisType(): Type {\n    var parent = this.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    return (<Class>parent).type;\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    var cached = this._internalGetterName;\n    if (cached == null) {\n      this._internalGetterName = cached = `${this.parent.internalName}${INSTANCE_DELIMITER}${GETTER_PREFIX}${this.name}`;\n    }\n    return cached;\n  }\n  private _internalGetterName: string | null = null;\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    var cached = this._internalSetterName;\n    if (cached == null) {\n      this._internalSetterName = cached = `${this.parent.internalName}${INSTANCE_DELIMITER}${SETTER_PREFIX}${this.name}`;\n    }\n    return cached;\n  }\n  private _internalSetterName: string | null = null;\n\n  /** Gets the signature of the respective getter function. */\n  get internalGetterSignature(): Signature {\n    var cached = this._internalGetterSignature;\n    if (!cached) {\n      this._internalGetterSignature = cached = new Signature(this.program, null, this.type, this.thisType);\n    }\n    return cached;\n  }\n  private _internalGetterSignature: Signature | null = null;\n\n  /** Gets the signature of the respective setter function. */\n  get internalSetterSignature(): Signature {\n    var cached = this._internalSetterSignature;\n    if (!cached) {\n      this._internalGetterSignature = cached = new Signature(this.program, [ this.type ], Type.void, this.thisType);\n    }\n    return cached;\n  }\n  private _internalSetterSignature: Signature | null = null;\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n  /** Property instance, if resolved. */\n  instance: Property | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,PropertyPrototype> | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element. Either a class prototype or instance. */\n    parent: Element,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    switch (this.parent.kind) {\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: return true;\n    }\n    return false;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): PropertyPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var firstDeclaration = this.declaration;\n    assert(firstDeclaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new PropertyPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>firstDeclaration\n    );\n    bound.flags = this.flags;\n    var getterPrototype = this.getterPrototype;\n    if (getterPrototype) {\n      bound.getterPrototype = getterPrototype.toBound(classInstance);\n    }\n    var setterPrototype = this.setterPrototype;\n    if (setterPrototype) {\n      bound.setterPrototype = setterPrototype.toBound(classInstance);\n    }\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      Node.createVariableDeclaration(\n        prototype.identifierNode,\n        null,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE,\n        null, null,\n        prototype.identifierNode.range\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    if (this.is(CommonFlags.INSTANCE)) {\n      registerConcreteElement(this.program, this);\n    }\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,DeclaredElement> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null;\n  /** Interface prototypes, if applicable. */\n  interfacePrototypes: InterfacePrototype[] | null = null;\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current == basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Implemented interfaces, if applicable. */\n  interfaces: Set<Interface> | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n  /** Classes directly extending this class. */\n  extendees: Set<Class> | null = null;\n  /** Classes implementing this interface. */\n  implementers: Set<Class> | null = null;\n  /** Whether the field initialization check has already been performed. */\n  didCheckFieldInitialization: bool = false;\n  /** Runtime visitor function reference. */\n  visitRef: FunctionRef = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.getMember(\"length\");\n    if (!lengthField) return false;\n    return (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n        (<PropertyPrototype>lengthField).getterPrototype != null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) != null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) != null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    type.classReference = this;\n    this.setType(type);\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n    var extendees = base.extendees;\n    if (!extendees) base.extendees = extendees = new Set();\n    extendees.add(this);\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Adds an interface. */\n  addInterface(iface: Interface): void {\n    var interfaces = this.interfaces;\n    if (!interfaces) this.interfaces = interfaces = new Set();\n    interfaces.add(iface);\n    var implementers = iface.implementers;\n    if (!implementers) iface.implementers = implementers = new Set();\n    implementers.add(this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      if (target.kind == ElementKind.INTERFACE) {\n        let interfaces = current.interfaces;\n        if (interfaces) {\n          for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n            let iface = _values[i];\n            if (iface.isAssignableTo(target)) return true;\n          }\n        }\n      }\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads != null && overloads.has(kind)) {\n        return assert(overloads.get(kind));\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /** Gets the method of the specified name, resolved with the given type arguments. */\n  getMethod(name: string, typeArguments: Type[] | null = null): Function | null {\n    var member = this.getMember(name);\n    if (member && member.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      return this.program.resolver.resolveFunction(<FunctionPrototype>member, typeArguments);\n    }\n    return null;\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var member = assert(this.getMember(fieldName));\n    assert(member.kind == ElementKind.FIELD);\n    return (<Field>member).memoryOffset;\n  }\n\n  /** Creates a buffer suitable to hold a runtime instance of this class. */\n  createBuffer(overhead: i32 = 0): Uint8Array {\n    var program = this.program;\n    var payloadSize = this.nextMemoryOffset + overhead;\n    var blockSize = program.computeBlockSize(payloadSize, true); // excl. overhead\n    var buffer = new Uint8Array(program.blockOverhead + blockSize);\n    var OBJECT = program.OBJECTInstance;\n    OBJECT.writeField(\"mmInfo\", blockSize, buffer, 0);\n    OBJECT.writeField(\"gcInfo\", 0, buffer, 0);\n    OBJECT.writeField(\"gcInfo2\", 0, buffer, 0);\n    OBJECT.writeField(\"rtId\", this.id, buffer, 0);\n    OBJECT.writeField(\"rtSize\", payloadSize, buffer, 0);\n    return buffer;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32 = this.program.totalOverhead): i32 {\n    var member = this.getMember(name);\n    if (member && member.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>member;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      let typeKind = fieldInstance.type.kind;\n      switch (typeKind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          assert(!i64_is(value));\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          assert(!i64_is(value));\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          assert(!i64_is(value));\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (this.program.options.isWasm64) {\n            if (i64_is(value)) {\n              writeI64(value, buffer, offset);\n            } else {\n              writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.USIZE);\n            }\n            return 8;\n          } else {\n            if (i64_is(value)) {\n              writeI64AsI32(value, buffer, offset, typeKind == TypeKind.USIZE);\n            } else {\n              writeI32(i32(value), buffer, offset);\n            }\n            return 4;\n          }\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          if (i64_is(value)) {\n            writeI64(value, buffer, offset);\n          } else {\n            writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.U64);\n          }\n          return 8;\n        }\n        case TypeKind.F32: {\n          assert(!i64_is(value));\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          assert(!i64_is(value));\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype == extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base != abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.float32ArrayPrototype) return Type.f32;\n        if (prototype == program.float64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.int8ArrayPrototype) return Type.i8;\n        if (prototype == program.int16ArrayPrototype) return Type.i16;\n        if (prototype == program.int32ArrayPrototype) return Type.i32;\n        if (prototype == program.int64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.uint8ArrayPrototype) return Type.u8;\n        if (prototype == program.uint8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.uint16ArrayPrototype) return Type.u16;\n        if (prototype == program.uint32ArrayPrototype) return Type.u32;\n        if (prototype == program.uint64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is pointerfree. Useful to know for the GC. */\n  get isPointerfree(): bool {\n    var program = this.program;\n\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n\n      // Check that there are no managed instance fields\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.isManaged) return false;\n        }\n      }\n\n      // Check that this isn't a managed collection\n      if (instanceMembers.has(CommonNames.visit)) {\n        let prototype = this.prototype;\n        if (\n          prototype == program.arrayPrototype ||\n          prototype == program.staticArrayPrototype ||\n          prototype == program.setPrototype ||\n          prototype == program.mapPrototype\n        ) {\n          // Note that we cannot know for sure anymore as soon as the collection\n          // is extended, because user code may implement a custom visitor.\n          let typeArguments = assert(this.getTypeArgumentsTo(prototype));\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (typeArguments[i].isManaged) return false;\n          }\n          return true;\n        }\n        return false; // has a custom __visit\n      }\n    }\n    return true;\n  }\n\n  /** Gets all extendees of this class (that do not have the specified instance member). */\n  getAllExtendees(exceptIfMember: string | null = null, out: Set<Class> = new Set()): Set<Class> {\n    var extendees = this.extendees;\n    if (extendees) {\n      for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n        let extendee = _values[i];\n        if (exceptIfMember) {\n          let instanceMembers = extendee.prototype.instanceMembers;\n          if (instanceMembers && instanceMembers.has(exceptIfMember)) continue;\n        }\n        out.add(extendee);\n        extendee.getAllExtendees(exceptIfMember, out);\n      }\n    }\n    return out;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: InterfacePrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program == newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(\n  name: string,\n  parent: Element,\n  isInstance: bool,\n  asGlobal: bool = false\n): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n    case ElementKind.PROPERTY: {         //\n      parent = parent.parent;\n      // fall-through\n    }\n    default: {\n      return (\n        mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal) +\n        (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name\n      );\n    }\n  }\n}\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(`$${i}`);\n  }\n  return cachedDefaultParameterNames[index];\n}\n", "/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  TypeRef,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n  /** A 1-bit unsigned integer. */\n  BOOL,\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Function reference. */\n  FUNCREF,\n  /** External reference. */\n  EXTERNREF,\n  /** Any reference. */\n  ANYREF,\n  /** Equatable reference. */\n  EQREF,\n  /** 31-bit integer reference. */\n  I31REF,\n  /** Data reference. */\n  DATAREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a varying (in size) type. */\n  VARYING = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is an external type. */\n  EXTERNAL = 1 << 11,\n  /** Is a class. */\n  CLASS = 1 << 12,\n  /** Is a function. */\n  FUNCTION = 1 << 13\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null = null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null = null;\n  /** Respective non-nullable type, if nullable. */\n  private _nonNullableType: Type | null = null;\n  /** Respective nullable type, if non-nullable. */\n  private _nullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    if (!(flags & TypeFlags.NULLABLE)) {\n      this._nonNullableType = this;\n    } else {\n      this._nullableType = this;\n    }\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.F32:   return Type.i32;\n      case TypeKind.I8:    return Type.i8;\n      case TypeKind.I16:   return Type.i16;\n      case TypeKind.F64:\n      case TypeKind.I64:   return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8:    return Type.u8;\n      case TypeKind.U16:   return Type.u16;\n      case TypeKind.U32:   return Type.u32;\n      case TypeKind.U64:   return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    return this.kind == TypeKind.VOID ? Type.auto : this;\n  }\n\n  /** Size in bytes. */\n  get byteSize(): i32 {\n    // ceiled div by 8\n    return this.size + 7 >>> 3;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this type represents a basic value. */\n  get isValue(): bool {\n    return this.is(TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer value. */\n  get isIntegerValue(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a small (< 32 bits) integer value. */\n  get isShortIntegerValue(): bool {\n    return this.is(TypeFlags.SHORT | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a long (> 32 bits) integer value. */\n  get isLongIntegerValue(): bool {\n    return this.is(TypeFlags.LONG | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a signed integer value. */\n  get isSignedIntegerValue(): bool {\n    return this.is(TypeFlags.SIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an unsigned integer value. */\n  get isUnsignedIntegerValue(): bool {\n    return this.is(TypeFlags.UNSIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a varying (in size) integer value. */\n  get isVaryingIntegerValue(): bool {\n    return this.is(TypeFlags.VARYING | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer, including references.  */\n  get isIntegerInclReference(): bool {\n    return this.is(TypeFlags.INTEGER);\n  }\n\n  /** Tests if this type represents a floating point value. */\n  get isFloatValue(): bool {\n    return this.is(TypeFlags.FLOAT | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a numeric (integer or floating point) value. */\n  get isNumericValue(): bool {\n    return this.isIntegerValue || this.isFloatValue;\n  }\n\n  /** Tests if this type represents a boolean value. */\n  get isBooleanValue(): bool {\n    return this == Type.bool;\n  }\n\n  /** Tests if this type represents a vector value. */\n  get isVectorValue(): bool {\n    return this.is(TypeFlags.VECTOR | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an internal or external reference. */\n  get isReference(): bool {\n    return this.is(TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a nullable internal or external reference. */\n  get isNullableReference(): bool {\n    return this.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an internal object. */\n  get isInternalReference(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an external object. */\n  get isExternalReference(): bool {\n    return this.is(TypeFlags.EXTERNAL | TypeFlags.REFERENCE);\n  }\n\n  /** Gets the underlying class of this type, if any. */\n  getClass(): Class | null {\n    return this.isInternalReference\n      ? this.classReference\n      : null;\n  }\n\n  /** Tests if this type represents a class. */\n  get isClass(): bool {\n    return this.getClass() != null;\n  }\n\n  /** Gets the underlying class or wrapper class of this type, if any. */\n  getClassOrWrapper(program: Program): Class | null {\n    let classReference = this.getClass();\n    if (classReference) {\n      // typical class\n      return classReference;\n    } else {\n      let signatureReference = this.getSignature();\n      if (signatureReference) {\n        // function wrapper\n        let type = signatureReference.type;\n        let wrapper = assert(program.resolver.resolveClass(program.functionPrototype, [ type ]));\n        wrapper.wrappedType = type;\n        return wrapper;\n      } else {\n        let wrapperClasses = program.wrapperClasses;\n        if (wrapperClasses.has(this)) {\n          // value wrapper\n          return assert(wrapperClasses.get(this));\n        }\n      }\n    }\n    return null;\n  }\n\n  /** Gets the underlying function signature of this type, if any. */\n  getSignature(): Signature | null {\n    return this.isInternalReference\n      ? this.signatureReference\n      : null;\n  }\n\n  /** Tests if this type represents a function. */\n  get isFunction(): bool {\n    return this.getSignature() != null;\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.isInternalReference) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      return this.signatureReference != null; // function references are managed\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference != null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  get isMemory(): bool {\n    switch (this.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64:\n      case TypeKind.V128: return true;\n    }\n    return false;\n  }\n\n  /** Gets the corresponding non-nullable type. */\n  get nonNullableType(): Type {\n    if (this.isExternalReference) {\n      return this; // TODO\n    }\n    return assert(this._nonNullableType); // set either in ctor or asNullable\n  }\n\n  /** Gets the corresponding nullable type, if applicable. */\n  get nullableType(): Type | null {\n    return this._nullableType; // set either in ctor or asNullable\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.size;\n    if (!this.is(TypeFlags.UNSIGNED)) size -= 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.isInternalReference);\n    var nullableType = this._nullableType;\n    if (!nullableType) {\n      assert(!this.isNullableReference);\n      this._nullableType = nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      nullableType.classReference = this.classReference;         // either a class reference\n      nullableType.signatureReference = this.signatureReference; // or a function reference\n      nullableType._nonNullableType = this;\n    }\n    return nullableType;\n  }\n\n  /** Use unsigned type for according size if possible. */\n  toUnsigned(): Type {\n    switch (this.kind) {\n      case TypeKind.I8:    return Type.u8;\n      case TypeKind.I16:   return Type.u16;\n      case TypeKind.I32:   return Type.u32;\n      case TypeKind.I64:   return Type.u64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n    }\n    return this;\n  }\n\n  /** Tests if this type equals the specified. */\n  equals(other: Type): bool {\n    if (this.kind != other.kind) return false;\n    if (this.isReference) {\n      return (\n        this.classReference == other.classReference &&\n        this.signatureReference == other.signatureReference &&\n        this.isNullableReference == other.isNullableReference\n      );\n    }\n    return true;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.isReference) {\n      if (target.isReference) {\n        if (!this.isNullableReference || target.isNullableReference) {\n          if (currentClass = this.getClass()) {\n            if (targetClass = target.getClass()) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.getSignature()) {\n            if (targetFunction = target.getSignature()) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.isExternalReference) {\n            if (\n              this.kind == target.kind ||\n              (target.kind == TypeKind.ANYREF && this.kind != TypeKind.EXTERNREF)\n            ) {\n              return true;\n            }\n          }\n        }\n      }\n    } else if (!target.isReference) {\n      if (this.isIntegerValue) {\n        if (target.isIntegerValue) {\n          if (\n            !signednessIsRelevant ||\n            this.isBooleanValue || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.isSignedIntegerValue == target.isSignedIntegerValue\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.isFloatValue) {\n        if (target.isFloatValue) {\n          return this.size <= target.size;\n        }\n      } else if (this.isVectorValue) {\n        if (target.isVectorValue) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.isReference) return this.isAssignableTo(target);\n    else if (target.isReference) return false;\n    // not dealing with references from here on\n    if (this.isIntegerValue) {\n      return target.isIntegerValue && target.size == this.size && (\n        !signednessIsRelevant ||\n        this.isSignedIntegerValue == target.isSignedIntegerValue\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    // special in that it allows integer references as well\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (\n        size >= 32 ||\n        this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(validWat: bool = false): string {\n    const nullablePostfix = validWat ? \"|null\" : \" | null\";\n    if (this.isReference) {\n      let classReference = this.getClass();\n      if (classReference) {\n        return this.isNullableReference\n          ? classReference.internalName + nullablePostfix\n          : classReference.internalName;\n      } else {\n        let signatureReference = this.getSignature();\n        if (signatureReference) {\n          return this.isNullableReference\n            ? `(${signatureReference.toString(validWat)})${nullablePostfix}`\n            : signatureReference.toString(validWat);\n        }\n      }\n    }\n    switch (this.kind) {\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      case TypeKind.EQREF: return \"eqref\";\n      case TypeKind.I31REF: return \"i31ref\";\n      case TypeKind.DATAREF: return \"dataref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective type reference. */\n  toRef(): TypeRef {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return TypeRef.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return TypeRef.I32;\n      case TypeKind.I64:\n      case TypeKind.U64:  return TypeRef.I64;\n      case TypeKind.F32:  return TypeRef.F32;\n      case TypeKind.F64:  return TypeRef.F64;\n      case TypeKind.V128: return TypeRef.V128;\n      // TODO: nullable/non-nullable refs have different type refs\n      case TypeKind.FUNCREF: return TypeRef.Funcref;\n      case TypeKind.EXTERNREF: return TypeRef.Externref;\n      case TypeKind.ANYREF: return TypeRef.Anyref;\n      case TypeKind.EQREF: return TypeRef.Eqref;\n      case TypeKind.I31REF: return TypeRef.I31ref;\n      case TypeKind.DATAREF: return TypeRef.Dataref;\n      case TypeKind.VOID: return TypeRef.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Function reference. */\n  static readonly funcref: Type = new Type(TypeKind.FUNCREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** External reference. */\n  static readonly externref: Type = new Type(TypeKind.EXTERNREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Any reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Equatable reference. */\n  static readonly eqref: Type = new Type(TypeKind.EQREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** 31-bit integer reference. */\n  static readonly i31ref: Type = new Type(TypeKind.I31REF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Data reference. */\n  static readonly dataref: Type = new Type(TypeKind.DATAREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of type references. */\nexport function typesToRefs(types: Type[]): TypeRef[] {\n  var numTypes = types.length;\n  var ret = new Array<TypeRef>(numTypes);\n  for (let i = 0; i < numTypes; ++i) {\n    unchecked(ret[i] = types[i].toRef());\n  }\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) {\n    unchecked(sb[i] = types[i].toString(true));\n  }\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** Unique id representing this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    var usizeType = program.options.usizeType;\n    var type = new Type(\n      usizeType.kind,\n      usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE,\n      usizeType.size\n    );\n    this.type = type;\n    type.signatureReference = this;\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = unchecked(signatureTypes[i]);\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    this.id = program.nextSignatureId++;\n    signatureTypes.push(this);\n  }\n\n  get paramRefs(): TypeRef {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      return thisType ? thisType.toRef() : TypeRef.None;\n    }\n    if (thisType) {\n      let typeRefs = new Array<TypeRef>(1 + numParameterTypes);\n      unchecked(typeRefs[0] = thisType.toRef());\n      for (let i = 0; i < numParameterTypes; ++i) {\n        unchecked(typeRefs[i + 1] = parameterTypes[i].toRef());\n      }\n      return createType(typeRefs);\n    }\n    return createType(typesToRefs(parameterTypes));\n  }\n\n  get resultRefs(): TypeRef {\n    return this.returnType.toRef();\n  }\n\n  /** Tests if this signature equals the specified. */\n  equals(other: Signature): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var otherThisType = other.thisType;\n    if (thisThisType) {\n      if (!otherThisType || !thisThisType.equals(otherThisType)) return false;\n    } else if (otherThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != other.hasRest) return false;\n\n    // check return type\n    if (!this.returnType.equals(other.returnType)) return false;\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var otherParameterTypes = other.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != otherParameterTypes.length) return false;\n\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = unchecked(thisParameterTypes[i]);\n      let otherParameterType = unchecked(otherParameterTypes[i]);\n      if (!thisParameterType.equals(otherParameterType)) return false;\n    }\n    return true;\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!targetThisType || !thisThisType.isAssignableTo(targetThisType)) {\n        return false;\n      }\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    if (!(thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType))) {\n      return false;\n    }\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false; // TODO\n\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = unchecked(thisParameterTypes[i]);\n      let targetParameterType = unchecked(targetParameterTypes[i]);\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n    return true;\n  }\n\n  /** Tests if this signature has at least one managed operand. */\n  get hasManagedOperands(): bool {\n    var thisType = this.thisType;\n    if (thisType && thisType.isManaged) {\n      return true;\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (unchecked(parameterTypes[i]).isManaged) return true;\n    }\n    return false;\n  }\n\n  /** Gets the indices of all managed operands. */\n  getManagedOperandIndices(): i32[] {\n    var indices = new Array<i32>();\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (thisType.isManaged) indices.push(index);\n      ++index;\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (unchecked(parameterTypes[i]).isManaged) {\n        indices.push(index);\n      }\n      ++index;\n    }\n    return indices;\n  }\n\n  /** Tests if this signature has at least one v128 operand. */\n  get hasVectorValueOperands(): bool {\n    var thisType = this.thisType;\n    if (thisType && thisType.isVectorValue) {\n      return true;\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (unchecked(parameterTypes[i]).isVectorValue) return true;\n    }\n    return false;\n  }\n\n  /** Gets the indices of all v128 operands. */\n  getVectorValueOperandIndices(): i32[] {\n    var indices = new Array<i32>();\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (thisType.isVectorValue) indices.push(index);\n      ++index;\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (unchecked(parameterTypes[i]).isVectorValue) {\n        indices.push(index);\n      }\n      ++index;\n    }\n    return indices;\n  }\n\n  /** Converts this signature to a string. */\n  toString(validWat: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(validWat ? \"%28\" : \"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(validWat ? \"this:\" : \"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString(validWat));\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(validWat ? \"%2C\" : \", \");\n        if (i == restIndex) sb.push(\"...\");\n        sb.push(parameters[i].toString(validWat));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?\");\n      }\n    }\n    sb.push(validWat ? \"%29=>\" : \") => \");\n    sb.push(this.returnType.toString(validWat));\n    return sb.join(\"\");\n  }\n\n  /** Creates a clone of this signature that is safe to modify. */\n  clone(): Signature {\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    var cloneParameterTypes = new Array<Type>(numParameterTypes);\n    for (let i = 0; i < numParameterTypes; ++i) {\n      unchecked(cloneParameterTypes[i] = parameterTypes[i]);\n    }\n    return new Signature(\n      this.program,\n      cloneParameterTypes,\n      this.returnType,\n      this.thisType\n    );\n  }\n}\n", "/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  SIMDLoadOp,\n  SIMDLoadStoreLaneOp,\n  RefIsOp,\n  TypeRef,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags,\n  mustPreserveSideEffects\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype,\n  Class\n} from \"./program\";\n\nimport {\n  findUsedLocals,\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isVector = \"~lib/builtins/isVector\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const bswap = \"~lib/builtins/bswap\";\n\n  export const add = \"~lib/builtins/add\";\n  export const sub = \"~lib/builtins/sub\";\n  export const mul = \"~lib/builtins/mul\";\n  export const div = \"~lib/builtins/div\";\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const eq = \"~lib/builtins/eq\";\n  export const ne = \"~lib/builtins/ne\";\n  export const rem = \"~lib/builtins/rem\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_add = \"~lib/builtins/i32.add\";\n  export const i64_add = \"~lib/builtins/i64.add\";\n  export const f32_add = \"~lib/builtins/f32.add\";\n  export const f64_add = \"~lib/builtins/f64.add\";\n  export const i32_sub = \"~lib/builtins/i32.sub\";\n  export const i64_sub = \"~lib/builtins/i64.sub\";\n  export const f32_sub = \"~lib/builtins/f32.sub\";\n  export const f64_sub = \"~lib/builtins/f64.sub\";\n  export const i32_mul = \"~lib/builtins/i32.mul\";\n  export const i64_mul = \"~lib/builtins/i64.mul\";\n  export const f32_mul = \"~lib/builtins/f32.mul\";\n  export const f64_mul = \"~lib/builtins/f64.mul\";\n  export const i32_div_s = \"~lib/builtins/i32.div_s\";\n  export const i32_div_u = \"~lib/builtins/i32.div_u\";\n  export const i64_div_s = \"~lib/builtins/i64.div_s\";\n  export const i64_div_u = \"~lib/builtins/i64.div_u\";\n  export const f32_div = \"~lib/builtins/f32.div\";\n  export const f64_div = \"~lib/builtins/f64.div\";\n\n  export const i32_eq = \"~lib/builtins/i32.eq\";\n  export const i64_eq = \"~lib/builtins/i64.eq\";\n  export const f32_eq = \"~lib/builtins/f32.eq\";\n  export const f64_eq = \"~lib/builtins/f64.eq\";\n  export const i32_ne = \"~lib/builtins/i32.ne\";\n  export const i64_ne = \"~lib/builtins/i64.ne\";\n  export const f32_ne = \"~lib/builtins/f32.ne\";\n  export const f64_ne = \"~lib/builtins/f64.ne\";\n\n  export const i32_rem_s = \"~lib/builtins/i32.rem_s\";\n  export const i32_rem_u = \"~lib/builtins/i32.rem_u\";\n  export const i64_rem_s = \"~lib/builtins/i64.rem_s\";\n  export const i64_rem_u = \"~lib/builtins/i64.rem_u\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load_zero = \"~lib/builtins/v128.load_zero\";\n  export const v128_load_lane = \"~lib/builtins/v128.load_lane\";\n  export const v128_store_lane = \"~lib/builtins/v128.store_lane\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_load8x8_s = \"~lib/builtins/v128.load8x8_s\";\n  export const v128_load8x8_u = \"~lib/builtins/v128.load8x8_u\";\n  export const v128_load16x4_s = \"~lib/builtins/v128.load16x4_s\";\n  export const v128_load16x4_u = \"~lib/builtins/v128.load16x4_u\";\n  export const v128_load32x2_s = \"~lib/builtins/v128.load32x2_s\";\n  export const v128_load32x2_u = \"~lib/builtins/v128.load32x2_u\";\n  export const v128_load8_splat = \"~lib/builtins/v128.load8_splat\";\n  export const v128_load16_splat = \"~lib/builtins/v128.load16_splat\";\n  export const v128_load32_splat = \"~lib/builtins/v128.load32_splat\";\n  export const v128_load64_splat = \"~lib/builtins/v128.load64_splat\";\n  export const v128_load32_zero = \"~lib/builtins/v128.load32_zero\";\n  export const v128_load64_zero = \"~lib/builtins/v128.load64_zero\";\n  export const v128_load8_lane = \"~lib/builtins/v128.load8_lane\";\n  export const v128_load16_lane = \"~lib/builtins/v128.load16_lane\";\n  export const v128_load32_lane = \"~lib/builtins/v128.load32_lane\";\n  export const v128_load64_lane = \"~lib/builtins/v128.load64_lane\";\n  export const v128_store8_lane = \"~lib/builtins/v128.store8_lane\";\n  export const v128_store16_lane = \"~lib/builtins/v128.store16_lane\";\n  export const v128_store32_lane = \"~lib/builtins/v128.store32_lane\";\n  export const v128_store64_lane = \"~lib/builtins/v128.store64_lane\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_sat = \"~lib/builtins/v128.add_sat\";\n  export const v128_sub_sat = \"~lib/builtins/v128.sub_sat\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_popcnt = \"~lib/builtins/v128.popcnt\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_pmin = \"~lib/builtins/v128.pmin\";\n  export const v128_pmax = \"~lib/builtins/v128.pmax\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_ceil = \"~lib/builtins/v128.ceil\";\n  export const v128_floor = \"~lib/builtins/v128.floor\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n  export const v128_nearest = \"~lib/builtins/v128.nearest\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_convert_low = \"~lib/builtins/v128.convert_low\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_trunc_sat_zero = \"~lib/builtins/v128.trunc_sat_zero\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_extend_low = \"~lib/builtins/v128.extend_low\";\n  export const v128_extend_high = \"~lib/builtins/v128.extend_high\";\n  export const v128_extadd_pairwise = \"~lib/builtins/v128.extadd_pairwise\";\n  export const v128_demote_zero = \"~lib/builtins/v128.demote_zero\";\n  export const v128_promote_low = \"~lib/builtins/v128.promote_low\";\n  export const v128_q15mulr_sat = \"~lib/builtins/v128.q15mulr_sat\";\n  export const v128_extmul_low = \"~lib/builtins/v128.extmul_low\";\n  export const v128_extmul_high = \"~lib/builtins/v128.extmul_high\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_sat_s = \"~lib/builtins/i8x16.add_sat_s\";\n  export const i8x16_add_sat_u = \"~lib/builtins/i8x16.add_sat_u\";\n  export const i8x16_sub_sat_s = \"~lib/builtins/i8x16.sub_sat_s\";\n  export const i8x16_sub_sat_u = \"~lib/builtins/i8x16.sub_sat_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_popcnt = \"~lib/builtins/i8x16.popcnt\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n  export const i8x16_shuffle = \"~lib/builtins/i8x16.shuffle\";\n  export const i8x16_swizzle = \"~lib/builtins/i8x16.swizzle\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_sat_s = \"~lib/builtins/i16x8.add_sat_s\";\n  export const i16x8_add_sat_u = \"~lib/builtins/i16x8.add_sat_u\";\n  export const i16x8_sub_sat_s = \"~lib/builtins/i16x8.sub_sat_s\";\n  export const i16x8_sub_sat_u = \"~lib/builtins/i16x8.sub_sat_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_extend_low_i8x16_s = \"~lib/builtins/i16x8.extend_low_i8x16_s\";\n  export const i16x8_extend_low_i8x16_u = \"~lib/builtins/i16x8.extend_low_i8x16_u\";\n  export const i16x8_extend_high_i8x16_s = \"~lib/builtins/i16x8.extend_high_i8x16_s\";\n  export const i16x8_extend_high_i8x16_u = \"~lib/builtins/i16x8.extend_high_i8x16_u\";\n  export const i16x8_extadd_pairwise_i8x16_s = \"~lib/builtins/i16x8.extadd_pairwise_i8x16_s\";\n  export const i16x8_extadd_pairwise_i8x16_u = \"~lib/builtins/i16x8.extadd_pairwise_i8x16_u\";\n  export const i16x8_q15mulr_sat_s = \"~lib/builtins/i16x8.q15mulr_sat_s\";\n  export const i16x8_extmul_low_i8x16_s = \"~lib/builtins/i16x8.extmul_low_i8x16_s\";\n  export const i16x8_extmul_low_i8x16_u = \"~lib/builtins/i16x8.extmul_low_i8x16_u\";\n  export const i16x8_extmul_high_i8x16_s = \"~lib/builtins/i16x8.extmul_high_i8x16_s\";\n  export const i16x8_extmul_high_i8x16_u = \"~lib/builtins/i16x8.extmul_high_i8x16_u\";\n  export const i16x8_shuffle = \"~lib/builtins/i16x8.shuffle\";\n  export const i16x8_swizzle = \"~lib/builtins/i16x8.swizzle\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_trunc_sat_f64x2_s_zero = \"~lib/builtins/i32x4.trunc_sat_f64x2_s_zero\";\n  export const i32x4_trunc_sat_f64x2_u_zero = \"~lib/builtins/i32x4.trunc_sat_f64x2_u_zero\";\n  export const i32x4_extend_low_i16x8_s = \"~lib/builtins/i32x4.extend_low_i16x8_s\";\n  export const i32x4_extend_low_i16x8_u = \"~lib/builtins/i32x4.extend_low_i16x8_u\";\n  export const i32x4_extend_high_i16x8_s = \"~lib/builtins/i32x4.extend_high_i16x8_s\";\n  export const i32x4_extend_high_i16x8_u = \"~lib/builtins/i32x4.extend_high_i16x8_u\";\n  export const i32x4_extadd_pairwise_i16x8_s = \"~lib/builtins/i32x4.extadd_pairwise_i16x8_s\";\n  export const i32x4_extadd_pairwise_i16x8_u = \"~lib/builtins/i32x4.extadd_pairwise_i16x8_u\";\n  export const i32x4_extmul_low_i16x8_s = \"~lib/builtins/i32x4.extmul_low_i16x8_s\";\n  export const i32x4_extmul_low_i16x8_u = \"~lib/builtins/i32x4.extmul_low_i16x8_u\";\n  export const i32x4_extmul_high_i16x8_s = \"~lib/builtins/i32x4.extmul_high_i16x8_s\";\n  export const i32x4_extmul_high_i16x8_u = \"~lib/builtins/i32x4.extmul_high_i16x8_u\";\n  export const i32x4_shuffle = \"~lib/builtins/i32x4.shuffle\";\n  export const i32x4_swizzle = \"~lib/builtins/i32x4.swizzle\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\";\n  export const i64x2_mul = \"~lib/builtins/i64x2.mul\";\n  export const i64x2_abs = \"~lib/builtins/i64x2.abs\";\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\";\n  export const i64x2_bitmask = \"~lib/builtins/i64x2.bitmask\";\n  export const i64x2_eq = \"~lib/builtins/i64x2.eq\";\n  export const i64x2_ne = \"~lib/builtins/i64x2.ne\";\n  export const i64x2_lt_s = \"~lib/builtins/i64x2.lt_s\";\n  export const i64x2_lt_u = \"~lib/builtins/i64x2.lt_u\";\n  export const i64x2_le_s = \"~lib/builtins/i64x2.le_s\";\n  export const i64x2_le_u = \"~lib/builtins/i64x2.le_u\";\n  export const i64x2_gt_s = \"~lib/builtins/i64x2.gt_s\";\n  export const i64x2_gt_u = \"~lib/builtins/i64x2.gt_u\";\n  export const i64x2_ge_s = \"~lib/builtins/i64x2.ge_s\";\n  export const i64x2_ge_u = \"~lib/builtins/i64x2.ge_u\";\n  export const i64x2_extend_low_i32x4_s = \"~lib/builtins/i64x2.extend_low_i32x4_s\";\n  export const i64x2_extend_low_i32x4_u = \"~lib/builtins/i64x2.extend_low_i32x4_u\";\n  export const i64x2_extend_high_i32x4_s = \"~lib/builtins/i64x2.extend_high_i32x4_s\";\n  export const i64x2_extend_high_i32x4_u = \"~lib/builtins/i64x2.extend_high_i32x4_u\";\n  export const i64x2_extmul_low_i32x4_s = \"~lib/builtins/i64x2.extmul_low_i32x4_s\";\n  export const i64x2_extmul_low_i32x4_u = \"~lib/builtins/i64x2.extmul_low_i32x4_u\";\n  export const i64x2_extmul_high_i32x4_s = \"~lib/builtins/i64x2.extmul_high_i32x4_s\";\n  export const i64x2_extmul_high_i32x4_u = \"~lib/builtins/i64x2.extmul_high_i32x4_u\";\n  export const i64x2_shuffle = \"~lib/builtins/i64x2.shuffle\";\n  export const i64x2_swizzle = \"~lib/builtins/i64x2.swizzle\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n  export const f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_ceil = \"~lib/builtins/f32x4.ceil\";\n  export const f32x4_floor = \"~lib/builtins/f32x4.floor\";\n  export const f32x4_trunc = \"~lib/builtins/f32x4.trunc\";\n  export const f32x4_nearest = \"~lib/builtins/f32x4.nearest\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_demote_f64x2_zero = \"~lib/builtins/f32x4.demote_f64x2_zero\";\n  export const f32x4_shuffle = \"~lib/builtins/f32x4.shuffle\";\n  export const f32x4_swizzle = \"~lib/builtins/f32x4.swizzle\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n  export const f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_ceil = \"~lib/builtins/f64x2.ceil\";\n  export const f64x2_floor = \"~lib/builtins/f64x2.floor\";\n  export const f64x2_trunc = \"~lib/builtins/f64x2.trunc\";\n  export const f64x2_nearest = \"~lib/builtins/f64x2.nearest\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_low_i32x4_s = \"~lib/builtins/f64x2.convert_low_i32x4_s\";\n  export const f64x2_convert_low_i32x4_u = \"~lib/builtins/f64x2.convert_low_i32x4_u\";\n  export const f64x2_promote_low_f32x4 = \"~lib/builtins/f64x2.promote_low_f32x4\";\n  export const f64x2_shuffle = \"~lib/builtins/f64x2.shuffle\";\n  export const f64x2_swizzle = \"~lib/builtins/f64x2.swizzle\";\n\n  export const i31_new = \"~lib/builtins/i31.new\";\n  export const i31_get = \"~lib/builtins/i31.get\";\n\n  // internals\n  export const data_end = \"~lib/memory/__data_end\";\n  export const stack_pointer = \"~lib/memory/__stack_pointer\";\n  export const heap_base = \"~lib/memory/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n  export const tostack = \"~lib/rt/__tostack\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/function.ts\n  export const Function = \"~lib/function/Function\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/string.ts\n  export const String_raw = \"~lib/string/String.raw\";\n  export const String_eq = \"~lib/string/String.__eq\";\n  export const String_ne = \"~lib/string/String.__ne\";\n  export const String_not = \"~lib/string/String.__not\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  constructor(\n    /** Compiler reference. */\n    public compiler: Compiler,\n    /** Prototype being called. */\n    public prototype: FunctionPrototype,\n    /** Provided type arguments. */\n    public typeArguments: Type[] | null,\n    /** Provided operands. */\n    public operands: Expression[],\n    /** Provided this operand, if any. */\n    public thisOperand: Expression | null,\n    /** Contextual type. */\n    public contextualType: Type,\n    /** Respective call expression. */\n    public reportNode: CallExpression,\n    /** Whether originating from inline assembly. */\n    public contextIsExact: bool\n  ) {}\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n/** Function builtins map. */\nexport const function_builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return reifyConstantType(ctx, module.i32(type.isBooleanValue ? 1 : 0));\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return reifyConstantType(ctx, module.i32(type.isIntegerValue ? 1 : 0));\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return reifyConstantType(ctx, module.i32(type.isSignedIntegerValue ? 1 : 0));\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return reifyConstantType(ctx, module.i32(type.isFloatValue ? 1 : 0));\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isVector<T!>() / isVector<T?>(value: T) -> bool\nfunction builtin_isVector(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return reifyConstantType(ctx, module.i32(type.isVectorValue ? 1 : 0));\n}\nbuiltins.set(BuiltinNames.isVector, builtin_isVector);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return reifyConstantType(ctx, module.i32(type.isReference ? 1 : 0));\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return reifyConstantType(ctx,\n    module.i32(\n      classReference && classReference.isAssignableTo(compiler.program.stringInstance)\n        ? 1\n        : 0\n    )\n  );\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return reifyConstantType(ctx,\n    module.i32(\n      classReference && classReference.extends(compiler.program.arrayPrototype)\n        ? 1\n        : 0\n    )\n  );\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return reifyConstantType(ctx,\n    module.i32(\n      classReference && classReference.isArrayLike\n        ? 1\n        : 0\n    )\n  );\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return reifyConstantType(ctx, module.i32(type.isFunction ? 1 : 0));\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return reifyConstantType(ctx, module.i32(type.isNullableReference ? 1 : 0));\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  // Note that `isDefined` neither compiles nor evaluates the given expression\n  // but exclusively performs a check whether it can be compiled in theory.\n  // This is not exactly unsafe due to only seemingly having side effects which\n  // actually never happen, but may confuse tooling unaware of its semantics.\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  if (!mustPreserveSideEffects(expr, module.ref)) {\n    return module.i32(module.isConstExpression(expr) ? 1 : 0);\n  }\n  return module.block(null, [\n    module.maybeDrop(expr),\n    module.i32(0)\n  ], getExpressionType(expr));\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return reifyConstantType(ctx, module.i32(type.isManaged ? 1 : 0));\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return reifyConstantType(ctx, module.i32(type.kind == TypeKind.VOID ? 1 : 0));\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return reifyConstantType(ctx, module.i32(signatureReference.parameterTypes.length));\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classReference = type.getClassOrWrapper(compiler.program);\n  if (!classReference) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.isIntegerValue && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.isIntegerValue && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classReference.members;\n    if (classMembers && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classReference.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classReference.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = checkConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.isInternalReference) {\n    let classReference = resultType.getClass();\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      assert(resultType.getSignature());\n      value = \"Function\";\n    }\n  } else {\n    value = resultType.toString();\n  }\n  return reifyConstantType(ctx, compiler.ensureStaticString(value));\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = checkConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  let signatureReference = type.getSignature();\n  if (signatureReference) {\n    return reifyConstantType(ctx, module.i32(signatureReference.id));\n  }\n  let classReference = type.getClassOrWrapper(compiler.program);\n  if (classReference && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n    return reifyConstantType(ctx, module.i32(classReference.id));\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// bswap<T?>(value: T) -> T\nfunction builtin_bswap(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        ctx.operands[0],\n        typeArguments[0].toUnsigned(),\n        Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP\n      )\n    : compiler.compileExpression(\n        ctx.operands[0],\n        Type.u32,\n        Constraints.MUST_WRAP\n      );\n\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.U8: return arg0;\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        // <T>(x << 8 | x >> 8)\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n\n        let res = module.binary(\n          BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_tee(temp.index, arg0, false),\n            module.i32(8)\n          ),\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_get(temp.index, TypeRef.I32),\n            module.i32(8)\n          )\n        );\n        // avoid wrapping for u16 due to it's already done for input arg\n        if (type.kind == TypeKind.I16) {\n          res = compiler.ensureSmallIntegerWrap(res, Type.i16);\n        }\n        flow.freeTempLocal(temp);\n        return res;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (type.size == 32) {\n          // rotl(x & 0xFF00FF00, 8) | rotr(x & 0x00FF00FF, 8)\n          let flow = compiler.currentFlow;\n          let temp = flow.getTempLocal(type);\n          flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n\n          let res = module.binary(\n            BinaryOp.OrI32,\n            module.binary(\n              BinaryOp.RotlI32,\n              module.binary(\n                BinaryOp.AndI32,\n                module.local_tee(temp.index, arg0, false),\n                module.i32(0xFF00FF00)\n              ),\n              module.i32(8)\n            ),\n            module.binary(\n              BinaryOp.RotrI32,\n              module.binary(\n                BinaryOp.AndI32,\n                module.local_get(temp.index, TypeRef.I32),\n                module.i32(0x00FF00FF)\n              ),\n              module.i32(8)\n            ),\n          );\n          flow.freeTempLocal(temp);\n          return res;\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        // let t =\n        //   ((x >>> 8) & 0x00FF00FF00FF00FF) |\n        //   ((x & 0x00FF00FF00FF00FF) << 8)\n        //\n        // let res =\n        //   ((t >>> 16) & 0x0000FFFF0000FFFF) |\n        //   ((t & 0x0000FFFF0000FFFF) << 16)\n        //\n        // rotr(res, 32)\n\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        // t = ((x >>> 8) & 0x00FF00FF00FF00FF) | ((x & 0x00FF00FF00FF00FF) << 8)\n        let expr = module.local_tee(\n          temp2.index,\n          module.binary(\n            BinaryOp.OrI64,\n            module.binary(\n              BinaryOp.AndI64,\n              module.binary(\n                BinaryOp.ShrU64,\n                module.local_tee(temp1.index, arg0, false),\n                module.i64(8)\n              ),\n              module.i64(0x00FF00FF, 0x00FF00FF)\n            ),\n            module.binary(\n              BinaryOp.ShlI64,\n              module.binary(\n                BinaryOp.AndI64,\n                module.local_get(temp1.index, TypeRef.I64),\n                module.i64(0x00FF00FF, 0x00FF00FF)\n              ),\n              module.i64(8)\n            ),\n          ),\n          false\n        );\n\n        // ((t >>> 16) & 0x0000FFFF0000FFFF) | ((t & 0x0000FFFF0000FFFF) << 16)\n        let res = module.binary(\n          BinaryOp.OrI64,\n          module.binary(\n            BinaryOp.AndI64,\n            module.binary(\n              BinaryOp.ShrU64,\n              expr,\n              module.i64(16)\n            ),\n            module.i64(0x0000FFFF, 0x0000FFFF)\n          ),\n          module.binary(\n            BinaryOp.ShlI64,\n            module.binary(\n              BinaryOp.AndI64,\n              module.local_get(temp2.index, TypeRef.I64),\n              module.i64(0x0000FFFF, 0x0000FFFF)\n            ),\n            module.i64(16)\n          ),\n        );\n\n        // rotr(res, 32)\n        res = module.binary(\n          BinaryOp.RotrI64,\n          res,\n          module.i64(32)\n        );\n\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return res;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"bswap\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.bswap, builtin_bswap);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.unary(UnaryOp.ClzSize, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.unary(UnaryOp.CtzSize, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8: // not wrapped\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.unary(UnaryOp.PopcntSize, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value << (shift & mask)) | (value >>> ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_tee(temp1.index, arg0, false), // i32\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1, false), // i32\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_get(temp1.index, TypeRef.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, TypeRef.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(BinaryOp.RotlSize, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value >>> (shift & mask)) | (value << ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_tee(temp1.index, arg0, false), // i32\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1, false), // i32\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_get(temp1.index, TypeRef.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, TypeRef.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(BinaryOp.RotrSize, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0, false), // i32\n                module.i32(31)\n              ),\n              false // i32\n            ),\n            module.local_get(temp1.index, TypeRef.I32)\n          ),\n          module.local_get(temp2.index, TypeRef.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(BinaryOp.XorSize,\n          module.binary(BinaryOp.AddSize,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrISize,\n                module.local_tee(temp1.index, arg0, false), // i32/i64\n                compiler.options.isWasm64\n                  ? module.i64(63)\n                  : module.i32(31)\n              ),\n              false // i32/i64\n            ),\n            module.local_get(temp1.index, options.sizeTypeRef)\n          ),\n          module.local_get(temp2.index, options.sizeTypeRef)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0, false), // i64\n                module.i64(63)\n              ),\n              false // i64\n            ),\n            module.local_get(temp1.index, TypeRef.I64)\n          ),\n          module.local_get(temp2.index, TypeRef.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:   { op = BinaryOp.GtI32; break; }\n      case TypeKind.BOOL:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:   { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64:   { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64:   { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: { op = BinaryOp.GtISize; break; }\n      case TypeKind.USIZE: { op = BinaryOp.GtUSize; break; }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op as i32 != -1) {\n      let flow = compiler.currentFlow;\n      let typeRef = type.toRef();\n      let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0, false), // numeric\n        module.local_tee(temp2.index, arg1, false), // numeric\n        module.binary(op,\n          module.local_get(temp1.index, typeRef),\n          module.local_get(temp2.index, typeRef)\n        ),\n        typeRef\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:   { op = BinaryOp.LtI32; break; }\n      case TypeKind.BOOL:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:   { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:   { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:   { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: { op = BinaryOp.LtISize; break; }\n      case TypeKind.USIZE: { op = BinaryOp.LtUSize; break; }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op as i32 != -1) {\n      let flow = compiler.currentFlow;\n      let typeRef = type.toRef();\n      let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0, false), // numeric\n        module.local_tee(temp2.index, arg1, false), // numeric\n        module.binary(op,\n          module.local_get(temp1.index, typeRef),\n          module.local_get(temp2.index, typeRef)\n        ),\n        typeRef\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32ToI32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64ToI64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let isWasm64 = compiler.options.isWasm64;\n        let arg0 = compiler.compileExpression(operands[0],\n          isWasm64 ? Type.f64 : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          isWasm64\n            ? UnaryOp.ReinterpretF64ToI64\n            : UnaryOp.ReinterpretF32ToI32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32ToF32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64ToF64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), TypeRef.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0, false), // f32\n          module.local_get(temp.index, TypeRef.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), TypeRef.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0, false), // f64\n          module.local_get(temp.index, TypeRef.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), TypeRef.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0, false), // f32\n            module.local_get(temp.index, TypeRef.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), TypeRef.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0, false), // f64\n            module.local_get(temp.index, TypeRef.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n\n  var outType = (\n    contextualType != Type.auto &&\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n\n  if (!outType.isMemory) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"load\", outType.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.isSignedIntegerValue,\n    arg0,\n    outType.toRef(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(ptr: usize, value: T*, immOffset?: usize, immAlign?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (!inType.isMemory) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"store\", inType.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toRef(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// rem<T?>(left: T, right: T) -> T\nfunction builtin_rem(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isIntegerValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isIntegerValue) {\n      return compiler.makeRem(arg0, arg1, type, ctx.reportNode);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"rem\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rem, builtin_rem);\n\n// add<T?>(left: T, right: T) -> T\nfunction builtin_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeAdd(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"add\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.add, builtin_add);\n\n// sub<T?>(left: T, right: T) -> T\nfunction builtin_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeSub(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"sub\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sub, builtin_sub);\n\n// mul<T?>(left: T, right: T) -> T\nfunction builtin_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeMul(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"mul\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.mul, builtin_mul);\n\n// div<T?>(left: T, right: T) -> T\nfunction builtin_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeDiv(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"div\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.div, builtin_div);\n\n// eq<T?>(left: T, right: T) -> i32\nfunction builtin_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      compiler.currentType = Type.i32;\n      return compiler.makeEq(arg0, arg1, type, ctx.reportNode);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"eq\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.eq, builtin_eq);\n\n// ne<T?>(left: T, right: T) -> i32\nfunction builtin_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      compiler.currentType = Type.i32;\n      return compiler.makeNe(arg0, arg1, type, ctx.reportNode);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"ne\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ne, builtin_ne);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toRef(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue|| // float to int\n      inType.size < type.size  // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toRef(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toRef());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    arg2 = compiler.convertExpression(arg2, inType, type, false, operands[2]);\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toRef());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout?: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = operands.length == 3\n    ? compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT)\n    : module.i64(-1, -1); // Infinite timeout\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toRef());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count?: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = operands.length == 2\n    ? compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT)\n    : module.i32(-1); // Inifinity count of waiters\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType, // ^\n    operands[2]\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2, type.toRef());\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.memory_size();\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  return module.memory_grow(compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.CONV_IMPLICIT));\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.isValue) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = compiler.compileExpression(elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addAlignedMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addAlignedMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === GC =====================================================================================\n\nfunction builtin_i31_new(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i31ref;\n  return module.i31_new(arg0);\n}\nbuiltins.set(BuiltinNames.i31_new, builtin_i31_new);\n\nfunction builtin_i31_get(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.i31ref, Constraints.CONV_IMPLICIT);\n  if (ctx.contextualType.is(TypeFlags.UNSIGNED)) {\n    compiler.currentType = Type.u32;\n    return module.i31_get(arg0, false);\n  } else {\n    compiler.currentType = Type.i32;\n    return module.i31_get(arg0, true);\n  }\n}\nbuiltins.set(BuiltinNames.i31_get, builtin_i31_get);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>TypeRef.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>TypeRef.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>TypeRef.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>TypeRef.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.if(module.unary(UnaryOp.EqzSize, arg0), abort);\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: return module.if(module.ref_is(RefIsOp.Null, arg0), abort);\n\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0, false), // numeric\n          module.local_get(temp.index, TypeRef.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0, false) // i64\n          ),\n          abort,\n          module.local_get(temp.index, TypeRef.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            UnaryOp.EqzSize,\n            module.local_tee(temp.index, arg0, type.isManaged)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.sizeTypeRef)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0, false), // f32\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, TypeRef.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0, false), // f64\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, TypeRef.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: {\n        let temp = flow.getTempLocal(type);\n        let ret = module.if(\n          module.ref_is(RefIsOp.Null,\n            module.local_tee(temp.index, arg0, false) // ref\n          ),\n          abort,\n          module.local_get(temp.index, type.toRef())\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"assert\", compiler.currentType.toString()\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// call_indirect<T?>(index: u32, ...args: *[]) -> T\nfunction builtin_call_indirect(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, i32.MAX_VALUE)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var returnType: Type;\n  if (typeArguments) {\n    assert(typeArguments.length);\n    returnType = typeArguments[0];\n  } else {\n    returnType = ctx.contextualType;\n  }\n  var indexArg = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length - 1;\n  var operandExprs = new Array<ExpressionRef>(numOperands);\n  var paramTypeRefs = new Array<TypeRef>(numOperands);\n  for (let i = 0; i < numOperands; ++i) {\n    operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.auto);\n    paramTypeRefs[i] = compiler.currentType.toRef();\n  }\n  compiler.currentType = returnType;\n  return module.call_indirect(null /* TODO */, indexArg, operandExprs, createType(paramTypeRefs), returnType.toRef());\n}\nbuiltins.set(BuiltinNames.call_indirect, builtin_call_indirect);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.getClass();\n  if (!classInstance) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  var ctor = compiler.ensureConstructor(classInstance, ctx.reportNode);\n  compiler.checkFieldInitialization(classInstance, ctx.reportNode);\n  return compiler.compileInstantiate(ctor, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Function builtins ======================================================================\n\n// Function<T>#call(thisArg: thisof<T> | null, ...args: *[]) -> returnof<T>\nfunction builtin_function_call(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var parent = ctx.prototype.parent;\n  assert(parent.kind == ElementKind.CLASS);\n  var classInstance = <Class>parent;\n  assert(classInstance.prototype == compiler.program.functionPrototype);\n  var typeArguments = assert(classInstance.typeArguments);\n  assert(typeArguments.length == 1);\n  var ftype = typeArguments[0];\n  var signature = assert(ftype.getSignature());\n  var returnType = signature.returnType;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsOptional(ctx, 1 + signature.requiredParameters, 1 + signature.parameterTypes.length)\n  ) {\n    compiler.currentType = returnType;\n    return compiler.module.unreachable();\n  }\n  var functionArg = compiler.compileExpression(assert(ctx.thisOperand), ftype, Constraints.CONV_IMPLICIT);\n  var thisOperand = assert(ctx.operands.shift());\n  var thisType = signature.thisType;\n  var thisArg: usize = 0;\n  if (thisType) {\n    thisArg = compiler.compileExpression(thisOperand, thisType, Constraints.CONV_IMPLICIT);\n  } else if (thisOperand.kind != NodeKind.NULL) {\n    compiler.error(\n      DiagnosticCode._this_cannot_be_referenced_in_current_location,\n      thisOperand.range\n    );\n    return compiler.module.unreachable();\n  }\n  return compiler.compileCallIndirect(signature, functionArg, ctx.operands, ctx.reportNode, thisArg, ctx.contextualType == Type.void);\n}\nfunction_builtins.set(\"call\", builtin_function_call);\n\n// String.raw(parts: TemplateStringsArray, ...values: unknown[]): string\nfunction builtin_string_raw(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = ctx.compiler.program.stringInstance.type;\n  compiler.error(\n    DiagnosticCode.Not_implemented_0,\n    ctx.reportNode.range, \"String.raw\"\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.String_raw, builtin_string_raw);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  var vars  = new Array<ExpressionRef>(16);\n  var numVars = 0;\n\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      vars[i] = expr;\n      numVars++;\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (numVars == 0) {\n    // all constants\n    return module.v128(bytes);\n  } else {\n    let vec: ExpressionRef;\n    let fullVars = numVars == 16;\n    if (fullVars) {\n      // all variants\n      vec = module.unary(UnaryOp.SplatI8x16, vars[0]);\n    } else {\n      // mixed constants / variants\n      vec = module.v128(bytes);\n    }\n    for (let i = i32(fullVars); i < 16; i++) {\n      let expr = vars[i];\n      if (expr) vec = module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, vec, <u8>i, expr);\n    }\n    return vec;\n  }\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  var vars  = new Array<ExpressionRef>(8);\n  var numVars = 0;\n\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      vars[i] = expr;\n      numVars++;\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (numVars == 0) {\n    // all constants\n    return module.v128(bytes);\n  } else {\n    let vec: ExpressionRef;\n    let fullVars = numVars == 8;\n    if (fullVars) {\n      // all variants\n      vec = module.unary(UnaryOp.SplatI16x8, vars[0]);\n    } else {\n      // mixed constants / variants\n      vec = module.v128(bytes);\n    }\n    for (let i = i32(fullVars); i < 8; i++) {\n      let expr = vars[i];\n      if (expr) vec = module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, vec, <u8>i, expr);\n    }\n    return vec;\n  }\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  var vars  = new Array<ExpressionRef>(4);\n  var numVars = 0;\n\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      vars[i] = expr;\n      numVars++;\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (numVars == 0) {\n    // all constants\n    return module.v128(bytes);\n  } else {\n    let vec: ExpressionRef;\n    let fullVars = numVars == 4;\n    if (fullVars) {\n      // all variants\n      vec = module.unary(UnaryOp.SplatI32x4, vars[0]);\n    } else {\n      // mixed constants / variants\n      vec = module.v128(bytes);\n    }\n    for (let i = i32(fullVars); i < 4; i++) {\n      let expr = vars[i];\n      if (expr) vec = module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, vec, <u8>i, expr);\n    }\n    return vec;\n  }\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  var vars  = new Array<ExpressionRef>(2);\n  var numVars = 0;\n\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp),  bytes, off + 0);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      vars[i] = expr;\n      numVars++;\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (numVars == 0) {\n    // all constants\n    return module.v128(bytes);\n  } else {\n    let vec: ExpressionRef;\n    let fullVars = numVars == 2;\n    if (fullVars) {\n      // all variants\n      vec = module.unary(UnaryOp.SplatI64x2, vars[0]);\n    } else {\n      // mixed constants / variants\n      vec = module.v128(bytes);\n    }\n    for (let i = i32(fullVars); i < 2; i++) {\n      let expr = vars[i];\n      if (expr) vec = module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, vec, <u8>i, expr);\n    }\n    return vec;\n  }\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  var vars  = new Array<ExpressionRef>(4);\n  var numVars = 0;\n\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      vars[i] = expr;\n      numVars++;\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (numVars == 0) {\n    // all constants\n    return module.v128(bytes);\n  } else {\n    let vec: ExpressionRef;\n    let fullVars = numVars == 4;\n    if (fullVars) {\n      // all variants\n      vec = module.unary(UnaryOp.SplatF32x4, vars[0]);\n    } else {\n      // mixed constants / variants\n      vec = module.v128(bytes);\n    }\n    for (let i = i32(fullVars); i < 4; i++) {\n      let expr = vars[i];\n      if (expr) vec = module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, vec, <u8>i, expr);\n    }\n    return vec;\n  }\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  var vars  = new Array<ExpressionRef>(2);\n  var numVars = 0;\n\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      vars[i] = expr;\n      numVars++;\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (numVars == 0) {\n    // all constants\n    return module.v128(bytes);\n  } else {\n    let vec: ExpressionRef;\n    let fullVars = numVars == 2;\n    if (fullVars) {\n      // all variants\n      vec = module.unary(UnaryOp.SplatF64x2, vars[0]);\n    } else {\n      // mixed constants / variants\n      vec = module.v128(bytes);\n    }\n    for (let i = i32(fullVars); i < 2; i++) {\n      let expr = vars[i];\n      if (expr) vec = module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, vec, <u8>i, expr);\n    }\n    return vec;\n  }\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (type.isValue) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(Number.isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleI8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.Load8Splat, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.Load16Splat, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.Load32Splat, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.Load32Splat, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.Load64Splat, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.Load8x8S, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.Load8x8U, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.Load16x4S, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.Load16x4U, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.Load32x2S, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.Load32x2U, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.load_zero<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_zero(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: return module.simd_load(SIMDLoadOp.Load32Zero, arg0, immOffset, immAlign);\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: return module.simd_load(SIMDLoadOp.Load64Zero, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_load(\n          compiler.options.isWasm64\n            ? SIMDLoadOp.Load64Zero\n            : SIMDLoadOp.Load32Zero,\n          arg0,\n          immOffset,\n          immAlign\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_zero\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_zero, builtin_v128_load_zero);\n\n// v128.load_lane<TFrom!>(ptr: usize, vec: v128, idx: u8, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 5)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.u8, Constraints.CONV_IMPLICIT);\n  var idx = 0;\n  var precomp = module.runExpression(arg2, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[2].range\n    );\n  }\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 4) {\n    immOffset = evaluateImmediateOffset(operands[3], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 5) {\n      immAlign = evaluateImmediateAlign(operands[4], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Load8Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Load16Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Load32Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Load64Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_loadstorelane(\n          compiler.options.isWasm64\n            ? SIMDLoadStoreLaneOp.Load64Lane\n            : SIMDLoadStoreLaneOp.Load32Lane,\n          arg0,\n          immOffset,\n          immAlign,\n          <u8>idx,\n          arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_lane, builtin_v128_load_lane);\n\n// v128.store_lane<TFrom!>(ptr: usize, vec: v128, idx: u8, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_store_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 5)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.u8, Constraints.CONV_IMPLICIT);\n  var idx = 0;\n  var precomp = module.runExpression(arg2, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[2].range\n    );\n  }\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 4) {\n    immOffset = evaluateImmediateOffset(operands[3], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 5) {\n      immAlign = evaluateImmediateAlign(operands[4], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Store8Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Store16Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Store32Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Store64Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_loadstorelane(\n          compiler.options.isWasm64\n            ? SIMDLoadStoreLaneOp.Store64Lane\n            : SIMDLoadStoreLaneOp.Store32Lane,\n          arg0,\n          immOffset,\n          immAlign,\n          <u8>idx,\n          arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.store_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_store_lane, builtin_v128_store_lane);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.MulI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.MulI64x2 : BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_sat, builtin_v128_add_sat);\n\n// v128.sub_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_sat, builtin_v128_sub_sat);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PminF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PminF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PmaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PmaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.EqI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.EqI64x2 : BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.NeI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.NeI64x2 : BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.LtI64x2, arg0, arg1);\n      // no LtU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.LtI64x2 : BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.LeI64x2, arg0, arg1);\n      // no LeU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.LeI64x2 : BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.GtI64x2, arg0, arg1);\n      // no GtU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.GtI64x2 : BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.GeI64x2, arg0, arg1);\n      // no GeU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.GeI64x2 : BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.AbsI64x2, arg0);\n      case TypeKind.ISIZE: return module.unary(compiler.options.isWasm64 ? UnaryOp.AbsI64x2 : UnaryOp.AbsI32x4, arg0);\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.ceil<T!>(a: v128) -> v128\nfunction builtin_v128_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ceil, builtin_v128_ceil);\n\n// v128.floor<T!>(a: v128) -> v128\nfunction builtin_v128_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_floor, builtin_v128_floor);\n\n// v128.trunc<T!>(a: v128) -> v128\nfunction builtin_v128_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc, builtin_v128_trunc);\n\n// v128.nearest<T!>(a: v128) -> v128\nfunction builtin_v128_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_nearest, builtin_v128_nearest);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.convert_low<T!>(a: v128) -> v128\nfunction builtin_v128_convert_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertLowI32x4ToF64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertLowU32x4ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert_low, builtin_v128_convert_low);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.trunc_sat_zero<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat_zero(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF64x2ToI32x4Zero, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF64x2ToU32x4Zero, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat_zero\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat_zero, builtin_v128_trunc_sat_zero);\n\n// v128.extend_low<T!>(a: v128) -> v128\nfunction builtin_v128_extend_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtendLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtendLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtendLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtendLowU16x8ToU32x4, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ExtendLowI32x4ToI64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ExtendLowU32x4ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extend_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extend_low, builtin_v128_extend_low);\n\n// v128.extend_high<T!>(a: v128) -> v128\nfunction builtin_v128_extend_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtendHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtendHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtendHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtendHighU16x8ToU32x4, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ExtendHighI32x4ToI64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ExtendHighU32x4ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extend_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extend_high, builtin_v128_extend_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndnotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  return module.unary(UnaryOp.AnyTrueV128, arg0);\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.BitmaskI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.BitmaskI64x2\n            : UnaryOp.BitmaskI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.popcnt<T!>(a: v128) -> v128\nfunction builtin_v128_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.PopcntI8x16, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_popcnt, builtin_v128_popcnt);\n\n// v128.extadd_pairwise<T!>(a: v128) -> v128\nfunction builtin_v128_extadd_pairwise(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtaddPairwiseI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtaddPairwiseU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtaddPairwiseI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtaddPairwiseU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extadd_pairwise\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extadd_pairwise, builtin_v128_extadd_pairwise);\n\n// v128.demote_zero<T?>(a: v128) -> v128\nfunction builtin_v128_demote_zero(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments ? typeArguments[0] : Type.f64;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F64: return module.unary(UnaryOp.DemoteZeroF64x2ToF32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.demote_zero\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_demote_zero, builtin_v128_demote_zero);\n\n// v128.promote_low<T?>(a: v128) -> v128\nfunction builtin_v128_promote_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments ? typeArguments[0] : Type.f32;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.PromoteLowF32x4ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.promote_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_promote_low, builtin_v128_promote_low);\n\n// v128.q15mulr_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_q15mulr_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.Q15mulrSatI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.q15mulr_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_q15mulr_sat, builtin_v128_q15mulr_sat);\n\n// v128.extmul_low<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_extmul_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.ExtmulLowI16x8, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.ExtmulLowU16x8, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.ExtmulLowI32x4, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.ExtmulLowU32x4, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.ExtmulLowI64x2, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.ExtmulLowU64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extmul_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extmul_low, builtin_v128_extmul_low);\n\n// v128.extmul_high<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_extmul_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.ExtmulHighI16x8, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.ExtmulHighU16x8, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.ExtmulHighI32x4, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.ExtmulHighU32x4, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.ExtmulHighI64x2, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.ExtmulHighU64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extmul_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extmul_high, builtin_v128_extmul_high);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], TypeRef.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], TypeRef.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.rem_s -> rem<i32>\nfunction builtin_i32_rem_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rem(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rem_s, builtin_i32_rem_s);\n\n// i32.rem_u -> rem<u32>\nfunction builtin_i32_rem_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.u32;\n  return builtin_rem(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rem_u, builtin_i32_rem_u);\n\n// i64.rem_s -> rem<i64>\nfunction builtin_i64_rem_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rem(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rem_s, builtin_i64_rem_s);\n\n// i64.rem_u -> rem<u64>\nfunction builtin_i64_rem_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.u64;\n  return builtin_rem(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rem_u, builtin_i64_rem_u);\n\n// i32.add -> add<i32>\nfunction builtin_i32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_add, builtin_i32_add);\n\n// i64.add -> add<i64>\nfunction builtin_i64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_add, builtin_i64_add);\n\n// f32.add -> add<f32>\nfunction builtin_f32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32_add, builtin_f32_add);\n\n// f64.add -> add<f64>\nfunction builtin_f64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64_add, builtin_f64_add);\n\n// i32.sub -> sub<i32>\nfunction builtin_i32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_sub, builtin_i32_sub);\n\n// i64.sub -> sub<i64>\nfunction builtin_i64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_sub, builtin_i64_sub);\n\n// f32.sub -> sub<f32>\nfunction builtin_f32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sub, builtin_f32_sub);\n\n// f64.sub -> sub<f64>\nfunction builtin_f64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sub, builtin_f64_sub);\n\n// i32.mul -> mul<i32>\nfunction builtin_i32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32_mul, builtin_i32_mul);\n\n// i64.mul -> mul<i64>\nfunction builtin_i64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64_mul, builtin_i64_mul);\n\n// f32.mul -> mul<f32>\nfunction builtin_f32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32_mul, builtin_f32_mul);\n\n// f64.mul -> mul<f64>\nfunction builtin_f64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64_mul, builtin_f64_mul);\n\n// i32.div_s -> div<i32>\nfunction builtin_i32_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_s, builtin_i32_div_s);\n\n// i32.div_u -> div<u32>\nfunction builtin_i32_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.u32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_u, builtin_i32_div_u);\n\n// i64.div_s -> div_s<i64>\nfunction builtin_i64_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_s, builtin_i64_div_s);\n\n// i64.div_u -> div_u<u64>\nfunction builtin_i64_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.u64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_u, builtin_i64_div_u);\n\n// f32.div -> div<f32>\nfunction builtin_f32_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32_div, builtin_f32_div);\n\n// f64.div -> div<f64>\nfunction builtin_f64_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64_div, builtin_f64_div);\n\n// i32.eq -> eq<i32>\nfunction builtin_i32_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32_eq, builtin_i32_eq);\n\n// i64.eq -> eq<i64>\nfunction builtin_i64_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i64_eq, builtin_i64_eq);\n\n// f32.eq -> eq<f32>\nfunction builtin_f32_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32_eq, builtin_f32_eq);\n\n// f64.eq -> eq<f64>\nfunction builtin_f64_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64_eq, builtin_f64_eq);\n\n// i32.ne -> ne<i32>\nfunction builtin_i32_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ne, builtin_i32_ne);\n\n// i64.ne -> ne<i64>\nfunction builtin_i64_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ne, builtin_i64_ne);\n\n// f32.ne -> ne<f32>\nfunction builtin_f32_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ne, builtin_f32_ne);\n\n// f64.ne-> ne<f64>\nfunction builtin_f64_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ne, builtin_f64_ne);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.load8x8_s -> v128.load_ext<i8>\nfunction builtin_v128_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8x8_s, builtin_v128_load8x8_s);\n\n// v128.load8x8_u -> v128.load_ext<u8>\nfunction builtin_v128_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8x8_u, builtin_v128_load8x8_u);\n\n// v128.load16x4_s -> v128.load_ext<i16>\nfunction builtin_v128_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16x4_s, builtin_v128_load16x4_s);\n\n// v128.load16x4_u -> v128.load_ext<u16>\nfunction builtin_v128_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16x4_u, builtin_v128_load16x4_u);\n\n// v128.load32x2_s -> v128.load_ext<i32>\nfunction builtin_v128_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32x2_s, builtin_v128_load32x2_s);\n\n// v128.load32x2_u -> v128.load_ext<u32>\nfunction builtin_v128_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32x2_u, builtin_v128_load32x2_u);\n\n// v128.load8_splat -> v128.load_splat<u8>\nfunction builtin_v128_load8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8_splat, builtin_v128_load8_splat);\n\n// v128.load16_splat -> v128.load_splat<u16>\nfunction builtin_v128_load16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16_splat, builtin_v128_load16_splat);\n\n// v128.load32_splat -> v128.load_splat<u32>\nfunction builtin_v128_load32_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32_splat, builtin_v128_load32_splat);\n\n// v128.load64_splat -> v128.load_splat<u64>\nfunction builtin_v128_load64_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load64_splat, builtin_v128_load64_splat);\n\n// v128.load32_zero -> v128.load_zero<u32>\nfunction builtin_v128_load32_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_zero(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32_zero, builtin_v128_load32_zero);\n\n// v128.load64_zero -> v128.load_zero<u64>\nfunction builtin_v128_load64_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_zero(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load64_zero, builtin_v128_load64_zero);\n\n// v128.load8_lane -> v128.load_lane<u8>\nfunction builtin_v128_load8_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8_lane, builtin_v128_load8_lane);\n\n// v128.load16_lane -> v128.load_lane<u16>\nfunction builtin_v128_load16_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16_lane, builtin_v128_load16_lane);\n\n// v128.load32_lane -> v128.load_lane<u32>\nfunction builtin_v128_load32_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32_lane, builtin_v128_load32_lane);\n\n// v128.load64_lane -> v128.load_lane<u64>\nfunction builtin_v128_load64_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load64_lane, builtin_v128_load64_lane);\n\n// v128.store8_lane -> v128.store_lane<u8>\nfunction builtin_v128_store8_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_store_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store8_lane, builtin_v128_store8_lane);\n\n// v128.store16_lane -> v128.store_lane<u16>\nfunction builtin_v128_store16_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_store_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store16_lane, builtin_v128_store16_lane);\n\n// v128.store32_lane -> v128.store_lane<u32>\nfunction builtin_v128_store32_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_store_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store32_lane, builtin_v128_store32_lane);\n\n// v128.store64_lane -> v128.store_lane<u64>\nfunction builtin_v128_store64_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_store_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store64_lane, builtin_v128_store64_lane);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_sat_s -> v128.add_sat<i8>\nfunction builtin_i8x16_add_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_sat_s, builtin_i8x16_add_sat_s);\n\n// i8x16.add_sat_u -> v128.add_sat<u8>\nfunction builtin_i8x16_add_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_sat_u, builtin_i8x16_add_sat_u);\n\n// i8x16.sub_sat_s -> v128.sub_sat<i8>\nfunction builtin_i8x16_sub_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_sat_s, builtin_i8x16_sub_sat_s);\n\n// i8x16.sub_sat_u -> v128.sub_sat<u8>\nfunction builtin_i8x16_sub_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_sat_u, builtin_i8x16_sub_sat_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.popcnt -> v128.popcnt<i8>\nfunction builtin_i8x16_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_popcnt, builtin_i8x16_popcnt);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_i8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shuffle, builtin_i8x16_shuffle);\n\n// i8x16.swizzle -> v128.swizzle\nfunction builtin_i8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_swizzle, builtin_i8x16_swizzle);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_sat_s -> v128.add_sat<i16>\nfunction builtin_i16x8_add_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_sat_s, builtin_i16x8_add_sat_s);\n\n// i16x8.add_sat_u -> v128.add_sat<u16>\nfunction builtin_i16x8_add_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_sat_u, builtin_i16x8_add_sat_u);\n\n// i16x8.sub_sat_s -> v128.sub_sat<i16>\nfunction builtin_i16x8_sub_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_sat_s, builtin_i16x8_sub_sat_s);\n\n// i16x8.sub_sat_u -> v128.sub_sat<u16>\nfunction builtin_i16x8_sub_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_sat_u, builtin_i16x8_sub_sat_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.extend_low_i8x16_s -> v128.extend_low<i8>\nfunction builtin_i16x8_extend_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_low_i8x16_s, builtin_i16x8_extend_low_i8x16_s);\n\n// i16x8.extend_low_i8x16_u -> v128.extend_low<u8>\nfunction builtin_i16x8_extend_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_low_i8x16_u, builtin_i16x8_extend_low_i8x16_u);\n\n// i16x8.extend_high_i8x16_s -> v128.extend_high<i8>\nfunction builtin_i16x8_extend_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_high_i8x16_s, builtin_i16x8_extend_high_i8x16_s);\n\n// i16x8.extend_high_i8x16_u -> v128.extend_high<u8>\nfunction builtin_i16x8_extend_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_high_i8x16_u, builtin_i16x8_extend_high_i8x16_u);\n\n// i16x8.extadd_pairwise_i8x16_s -> v128.extadd_pairwise<i8>\nfunction builtin_i16x8_extadd_pairwise_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extadd_pairwise(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extadd_pairwise_i8x16_s, builtin_i16x8_extadd_pairwise_i8x16_s);\n\n// i16x8.extadd_pairwise_i8x16_u -> v128.extadd_pairwise<u8>\nfunction builtin_i16x8_extadd_pairwise_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extadd_pairwise(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extadd_pairwise_i8x16_u, builtin_i16x8_extadd_pairwise_i8x16_u);\n\n// i16x8.q15mulr_sat_s -> v128.q15mulr_sat<i16>\nfunction builtin_i16x8_q15mulr_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_q15mulr_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_q15mulr_sat_s, builtin_i16x8_q15mulr_sat_s);\n\n// i16x8.extmul_low_i8x16_s -> v128.extmul_low<i16>\nfunction builtin_i16x8_extmul_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extmul_low_i8x16_s, builtin_i16x8_extmul_low_i8x16_s);\n\n// i16x8.extmul_low_i8x16_u -> v128.extmul_low<u16>\nfunction builtin_i16x8_extmul_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extmul_low_i8x16_u, builtin_i16x8_extmul_low_i8x16_u);\n\n// i16x8.extmul_high_i8x16_s -> v128.extmul_high<i16>\nfunction builtin_i16x8_extmul_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extmul_high_i8x16_s, builtin_i16x8_extmul_high_i8x16_s);\n\n// i16x8.extmul_high_i8x16_u -> v128.extmul_high<u16>\nfunction builtin_i16x8_extmul_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extmul_high_i8x16_u, builtin_i16x8_extmul_high_i8x16_u);\n\n// i16x8.shuffle -> v128.shuffle<i16>\nfunction builtin_i16x8_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shuffle, builtin_i16x8_shuffle);\n\n// i16x8.swizzle -> v128.swizzle\nfunction builtin_i16x8_swizzle(ctx: BuiltinContext): ExpressionRef {\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_swizzle, builtin_i16x8_swizzle);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.trunc_sat_f64x2_s_zero -> v128.trunc_sat_zero<i32>\nfunction builtin_i32x4_trunc_sat_f64x2_s_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat_zero(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f64x2_s_zero, builtin_i32x4_trunc_sat_f64x2_s_zero);\n\n// i32x4.trunc_sat_f64x2_u_zero -> v128.trunc_sat_zero<u32>\nfunction builtin_i32x4_trunc_sat_f64x2_u_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat_zero(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f64x2_u_zero, builtin_i32x4_trunc_sat_f64x2_u_zero);\n\n// i32x4.extend_low_i16x8_s -> // v128.extend_low<i16>\nfunction builtin_i32x4_extend_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_low_i16x8_s, builtin_i32x4_extend_low_i16x8_s);\n\n// i32x4.extend_low_i16x8_u -> v128.extend_low<u16>\nfunction builtin_i32x4_extend_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_low_i16x8_u, builtin_i32x4_extend_low_i16x8_u);\n\n// i32x4.extend_high_i16x8_s -> v128.extend_high<i16>\nfunction builtin_i32x4_extend_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_high_i16x8_s, builtin_i32x4_extend_high_i16x8_s);\n\n// i32x4.extend_high_i16x8_u -> v128.extend_high<u16>\nfunction builtin_i32x4_extend_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_high_i16x8_u, builtin_i32x4_extend_high_i16x8_u);\n\n// i32x4.extadd_pairwise_i16x8_s -> v128.extadd_pairwise<i16>\nfunction builtin_i32x4_extadd_pairwise_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extadd_pairwise(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extadd_pairwise_i16x8_s, builtin_i32x4_extadd_pairwise_i16x8_s);\n\n// i32x4.extadd_pairwise_i16x8_u -> v128.extadd_pairwise<u16>\nfunction builtin_i32x4_extadd_pairwise_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extadd_pairwise(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extadd_pairwise_i16x8_u, builtin_i32x4_extadd_pairwise_i16x8_u);\n\n// i32x4.extmul_low_i16x8_s -> v128.extmul_low<i16>\nfunction builtin_i32x4_extmul_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extmul_low_i16x8_s, builtin_i32x4_extmul_low_i16x8_s);\n\n// i32x4.extmul_low_i16x8_u -> v128.extmul_low<u16>\nfunction builtin_i32x4_extmul_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extmul_low_i16x8_u, builtin_i32x4_extmul_low_i16x8_u);\n\n// i32x4.extmul_high_i16x8_s -> v128.extmul_high<i16>\nfunction builtin_i32x4_extmul_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extmul_high_i16x8_s, builtin_i32x4_extmul_high_i16x8_s);\n\n// i32x4.extmul_high_i16x8_u -> v128.extmul_high<u16>\nfunction builtin_i32x4_extmul_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extmul_high_i16x8_u, builtin_i32x4_extmul_high_i16x8_u);\n\n// i32x4.shuffle -> v128.shuffle<i32>\nfunction builtin_i32x4_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shuffle, builtin_i32x4_shuffle);\n\n// i32x4.swizzle -> v128.swizzle\nfunction builtin_i32x4_swizzle(ctx: BuiltinContext): ExpressionRef {\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_swizzle, builtin_i32x4_swizzle);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.mul -> v128.mul<i64>\nfunction builtin_i64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_mul, builtin_i64x2_mul);\n\n// i64x2.abs -> v128.abs<i64>\nfunction builtin_i64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_abs, builtin_i64x2_abs);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.bitmask -> v128.bitmask<i64>\nfunction builtin_i64x2_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_bitmask, builtin_i64x2_bitmask);\n\n// i64x2.eq -> v128.eq<i64>\nfunction builtin_i64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_eq, builtin_i64x2_eq);\n\n// i64x2.ne -> v128.ne<i64>\nfunction builtin_i64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_ne, builtin_i64x2_ne);\n\n// i64x2.lt_s -> v128.lt<i64>\nfunction builtin_i64x2_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_lt_s, builtin_i64x2_lt_s);\n\n// i64x2.le_s -> v128.le<i64>\nfunction builtin_i64x2_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_le_s, builtin_i64x2_le_s);\n\n// i64x2.gt_s -> v128.gt<i64>\nfunction builtin_i64x2_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_gt_s, builtin_i64x2_gt_s);\n\n// i64x2.ge_s -> v128.ge<i64>\nfunction builtin_i64x2_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_ge_s, builtin_i64x2_ge_s);\n\n// i64x2.extend_low_i32x4_s -> // v128.extend_low<i32>\nfunction builtin_i64x2_extend_low_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_low_i32x4_s, builtin_i64x2_extend_low_i32x4_s);\n\n// i64x2.extend_low_i32x4_u -> v128.extend_low<u32>\nfunction builtin_i64x2_extend_low_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_low_i32x4_u, builtin_i64x2_extend_low_i32x4_u);\n\n// i64x2.extend_high_i32x4_s -> v128.extend_high<i32>\nfunction builtin_i64x2_extend_high_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_high_i32x4_s, builtin_i64x2_extend_high_i32x4_s);\n\n// i64x2.extend_high_i32x4_u -> v128.extend_high<u32>\nfunction builtin_i64x2_extend_high_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_high_i32x4_u, builtin_i64x2_extend_high_i32x4_u);\n\n// i64x2.extmul_low_i32x4_s -> v128.extmul_low<i32>\nfunction builtin_i64x2_extmul_low_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extmul_low_i32x4_s, builtin_i64x2_extmul_low_i32x4_s);\n\n// i64x2.extmul_low_i32x4_u -> v128.extmul_low<u32>\nfunction builtin_i64x2_extmul_low_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extmul_low_i32x4_u, builtin_i64x2_extmul_low_i32x4_u);\n\n// i64x2.extmul_high_i32x4_s -> v128.extmul_high<i32>\nfunction builtin_i64x2_extmul_high_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extmul_high_i32x4_s, builtin_i64x2_extmul_high_i32x4_s);\n\n// i64x2.extmul_high_i32x4_u -> v128.extmul_high<u32>\nfunction builtin_i64x2_extmul_high_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extmul_high_i32x4_u, builtin_i64x2_extmul_high_i32x4_u);\n\n// i64x2.shuffle -> v128.shuffle<i64>\nfunction builtin_i64x2_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shuffle, builtin_i64x2_shuffle);\n\n// i64x2.swizzle -> v128.swizzle\nfunction builtin_i64x2_swizzle(ctx: BuiltinContext): ExpressionRef {\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_swizzle, builtin_i64x2_swizzle);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.ceil -> v128.ceil<f32>\nfunction builtin_f32x4_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ceil, builtin_f32x4_ceil);\n\n// f32x4.floor -> v128.floor<f32>\nfunction builtin_f32x4_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_floor, builtin_f32x4_floor);\n\n// f32x4.trunc -> v128.trunc<f32>\nfunction builtin_f32x4_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_trunc, builtin_f32x4_trunc);\n\n// f32x4.nearest -> v128.nearest<f32>\nfunction builtin_f32x4_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_nearest, builtin_f32x4_nearest);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.demote_f64x2_zero -> v128.demote_zero<f64>\nfunction builtin_f32x4_demote_f64x2_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_demote_zero(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_demote_f64x2_zero, builtin_f32x4_demote_f64x2_zero);\n\n// f32x4.shuffle -> v128.shuffle<f32>\nfunction builtin_f32x4_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_shuffle, builtin_f32x4_shuffle);\n\n// f32x4.swizzle -> v128.swizzle\nfunction builtin_f32x4_swizzle(ctx: BuiltinContext): ExpressionRef {\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_swizzle, builtin_f32x4_swizzle);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.ceil -> v128.ceil<f64>\nfunction builtin_f64x2_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ceil, builtin_f64x2_ceil);\n\n// f64x2.floor -> v128.floor<f64>\nfunction builtin_f64x2_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_floor, builtin_f64x2_floor);\n\n// f64x2.trunc -> v128.trunc<f64>\nfunction builtin_f64x2_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_trunc, builtin_f64x2_trunc);\n\n// f64x2.nearest -> v128.nearest<f64>\nfunction builtin_f64x2_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_nearest, builtin_f64x2_nearest);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_low_i32x4_s -> v128.convert_low<i32>\nfunction builtin_f64x2_convert_low_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert_low(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_low_i32x4_s, builtin_f64x2_convert_low_i32x4_s);\n\n// f64x2.convert_low_i32x4_u -> v128.convert_low<u32>\nfunction builtin_f64x2_convert_low_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert_low(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_low_i32x4_u, builtin_f64x2_convert_low_i32x4_u);\n\n// f64x2.promote_low_f32x4 -> v128.promote_low<f32>\nfunction builtin_f64x4_promote_low_f32x4(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_promote_low(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_promote_low_f32x4, builtin_f64x4_promote_low_f32x4);\n\n// f64x2.shuffle -> v128.shuffle<f32>\nfunction builtin_f64x2_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_shuffle, builtin_f64x2_shuffle);\n\n// f64x2.swizzle -> v128.swizzle\nfunction builtin_f64x2_swizzle(ctx: BuiltinContext): ExpressionRef {\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_swizzle, builtin_f64x2_swizzle);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var sizeTypeRef = compiler.options.sizeTypeRef;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classReference = globalType.getClass();\n    if (\n      classReference &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value)),\n              module.local_get(0, TypeRef.I32) // cookie\n            ], TypeRef.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, sizeTypeRef),\n              false // internal\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, sizeTypeRef), // tempRef != null\n              module.local_get(0, TypeRef.I32) // cookie\n            ], TypeRef.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    TypeRef.I32,  // cookie\n    TypeRef.None, // => void\n    [ sizeTypeRef ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Ensures that the visitor function of the specified class is compiled. */\nfunction ensureVisitMembersOf(compiler: Compiler, instance: Class): void {\n  assert(instance.type.isManaged);\n  if (instance.visitRef) return;\n\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var sizeTypeRef = usizeType.toRef();\n  var sizeTypeSize = usizeType.byteSize;\n  var visitInstance = assert(program.visitInstance);\n  var body = new Array<ExpressionRef>();\n\n  // If the class has a base class, call its visitor first\n  var base = instance.base;\n  if (base) {\n    body.push(\n      module.call(`${base.internalName}~visit`, [\n        module.local_get(0, sizeTypeRef), // this\n        module.local_get(1, TypeRef.I32)  // cookie\n      ], TypeRef.None)\n    );\n  }\n\n  // Some standard library components provide a custom visitor implementation,\n  // for example to visit all members of a collection, e.g. arrays and maps.\n  var hasVisitImpl = false;\n  if (instance.isDeclaredInLibrary) {\n    let visitPrototype = instance.getMember(\"__visit\");\n    if (visitPrototype) {\n      assert(visitPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitInstance = program.resolver.resolveFunction(<FunctionPrototype>visitPrototype, null);\n      if (!visitInstance || !compiler.compileFunction(visitInstance)) {\n        body.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSignature = visitInstance.signature;\n        let visitThisType = assert(visitSignature.thisType);\n        assert(\n          visitSignature.parameterTypes.length == 1 &&\n          visitSignature.parameterTypes[0] == Type.u32 &&\n          visitSignature.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        body.push(\n          module.call(visitInstance.internalName, [\n            module.local_get(0, sizeTypeRef), // this\n            module.local_get(1, TypeRef.I32)  // cookie\n          ], TypeRef.None)\n        );\n      }\n      hasVisitImpl = true;\n    }\n  }\n\n  // Otherwise, if there is no custom visitor, generate a visitor function\n  // according to class layout, visiting all _own_ managed members.\n  var needsTempValue = false;\n  if (!hasVisitImpl) {\n    let members = instance.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n        let member = unchecked(_values[j]);\n        if (member.kind == ElementKind.FIELD) {\n          if ((<Field>member).parent == instance) {\n            let fieldType = (<Field>member).type;\n            if (fieldType.isManaged) {\n              let fieldOffset = (<Field>member).memoryOffset;\n              assert(fieldOffset >= 0);\n              needsTempValue = true;\n              body.push(\n                // if ($2 = value) __visit($2, $1)\n                module.if(\n                  module.local_tee(2,\n                    module.load(sizeTypeSize, false,\n                      module.local_get(0, sizeTypeRef),\n                      sizeTypeRef, fieldOffset\n                    ),\n                    false // internal\n                  ),\n                  module.call(visitInstance.internalName, [\n                    module.local_get(2, sizeTypeRef), // value\n                    module.local_get(1, TypeRef.I32)  // cookie\n                  ], TypeRef.None)\n                )\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Create the visitor function\n  instance.visitRef = module.addFunction(`${instance.internalName}~visit`,\n    createType([sizeTypeRef, TypeRef.I32]),\n    TypeRef.None,\n    needsTempValue ? [ sizeTypeRef ] : null,\n    module.flatten(body, TypeRef.None)\n  );\n\n  // And make sure the base visitor function exists\n  if (base && base.type.isManaged) {\n    // errored earlier if not managed\n    ensureVisitMembersOf(compiler, base);\n  }\n}\n\n/** Compiles the `__visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var sizeTypeRef = usizeType.toRef();\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  compiler.compileFunction(visitInstance, true); // is lazy, make sure it is compiled\n\n  // Prepare a mapping of class names to visitor calls. Each name corresponds to\n  // the respective sequential (0..N) class id.\n  var names = new Array<string>();\n  var cases = new Array<ExpressionRef>();\n  var nextId = 0;\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    assert(instanceId == nextId++);\n    let instance = assert(managedClasses.get(instanceId));\n    names[i] = instance.internalName;\n    if (instance.isPointerfree) {\n      cases[i] = module.return();\n    } else {\n      cases[i] = module.block(null, [\n        module.call(`${instance.internalName}~visit`, [\n          module.local_get(0, sizeTypeRef), // this\n          module.local_get(1, TypeRef.I32)  // cookie\n        ], TypeRef.None),\n        module.return()\n      ], TypeRef.None);\n      ensureVisitMembersOf(compiler, instance);\n    }\n  }\n\n  // Make a br_table of the mapping, calling visitor functions by unique class id\n  var current = module.block(names[0], [\n    module.switch(names, \"invalid\",\n      // load<u32>(changetype<usize>(this) - 8)\n      module.load(4, false,\n        sizeTypeRef == TypeRef.I64\n          ? module.binary(BinaryOp.SubI64,\n              module.local_get(0, sizeTypeRef),\n              module.i64(8)\n            )\n          : module.binary(BinaryOp.SubI32,\n              module.local_get(0, sizeTypeRef),\n              module.i32(8) // rtId is at -8\n            ),\n        TypeRef.I32, 0\n      )\n    )\n  ], TypeRef.None);\n\n  // Wrap blocks in order\n  for (let i = 0, k = names.length - 1; i < k; ++i) {\n    current = module.block(names[i + 1], [\n      current,\n      cases[i]\n    ], TypeRef.None);\n  }\n\n  // Wrap the last id in an 'invalid' block to break out of on invalid ids\n  current = module.block(\"invalid\", [\n    current,\n    cases[names.length - 1]\n  ], TypeRef.None);\n\n  // Add the function, executing an unreachable if breaking to 'invalid'\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ sizeTypeRef, TypeRef.I32 ]), // this, cookie\n    TypeRef.None, // => void\n    null,\n    module.flatten([\n      current,\n      module.unreachable()\n    ])\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isPointerfree) flags |= TypeinfoFlags.POINTERFREE;\n    if (instance != abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addAlignedMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, TypeRef.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, TypeRef.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var sizeTypeRef = compiler.options.sizeTypeRef;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        sizeTypeRef == TypeRef.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, sizeTypeRef)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, sizeTypeRef),\n            module.i32(instance.id)\n          ], TypeRef.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(\n    `${prototype.internalName}~instanceof`,\n    sizeTypeRef,\n    TypeRef.I32,\n    null,\n    module.flatten(stmts)\n  );\n}\n\n// Helpers\n\nvar checkConstantType_expr: ExpressionRef = 0;\n\n/** Checks the constant type of a type argument *or* expression. */\nfunction checkConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  checkConstantType_expr = 0;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      checkConstantType_expr = compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      checkConstantType_expr = compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Reifies a constant type check potentially involving an expression. */\nfunction reifyConstantType(ctx: BuiltinContext, expr: ExpressionRef): ExpressionRef {\n  var module = ctx.compiler.module;\n  if (checkConstantType_expr && mustPreserveSideEffects(checkConstantType_expr, module.ref)) {\n    expr = module.block(null, [\n      module.maybeDrop(checkConstantType_expr),\n      expr\n    ], getExpressionType(expr));\n  }\n  return expr;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.isIntegerValue) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n", "/**\n * @fileoverview A lightweight store instrumentation pass.\n * \n * Can be used to find rogue stores to protected memory addresses like object\n * headers or similar, without going overboard with instrumentation. Also\n * passes a flag whether a store originates within the runtime or other code.\n * \n * @license Apache-2.0\n */\n\nimport {\n  Pass\n} from \"./pass\";\n\nimport {\n  Compiler\n} from \"../compiler\";\n\nimport {\n  createType,\n  ExpressionRef,\n  TypeRef\n} from \"../module\";\n\nimport {\n  _BinaryenFunctionGetName,\n  _BinaryenStoreGetBytes,\n  _BinaryenStoreGetOffset,\n  _BinaryenStoreGetPtr,\n  _BinaryenStoreSetPtr\n} from \"../glue/binaryen\";\n\n/** Instruments stores to also call an import. */\nexport class RtraceMemory extends Pass {\n  /** Whether we've seen any stores. */\n  seenStores: bool = false;\n  /** Target pointer type. */\n  ptrType: TypeRef;\n\n  constructor(compiler: Compiler) {\n    super(compiler.module);\n    this.ptrType = compiler.options.sizeTypeRef;\n  }\n\n  checkRT(): bool {\n    var functionName = this.module.readStringCached(_BinaryenFunctionGetName(this.currentFunction))!;\n    return functionName.startsWith(\"~lib/rt/\");\n  }\n\n  /** @override */\n  visitStore(store: ExpressionRef): void {\n    var module = this.module;\n    var ptr = _BinaryenStoreGetPtr(store);\n    var offset = _BinaryenStoreGetOffset(store);\n    var bytes = _BinaryenStoreGetBytes(store);\n    // onstore(ptr: usize, offset: i32, bytes: i32, isRT: bool) -> ptr\n    _BinaryenStoreSetPtr(store,\n      module.call(\"~onstore\", [\n        ptr,\n        module.i32(offset),\n        module.i32(bytes),\n        module.i32(i32(this.checkRT()))\n      ], this.ptrType)\n    );\n    this.seenStores = true;\n  }\n\n  // TODO: MemoryFill, Atomics\n\n  /** @override */\n  walkModule(): void {\n    super.walkModule();\n    if (this.seenStores) {\n      this.module.addFunctionImport(\"~onstore\", \"rtrace\", \"onstore\",\n        createType([ this.ptrType, TypeRef.I32, TypeRef.I32, TypeRef.I32 ]),\n        this.ptrType\n      );\n    }\n  }\n}\n", "/**\n * @fileoverview Shadow stack instrumentation for a precise GC.\n *\n * Instruments function arguments and local assignments marked with a 'tostack'\n * call to also do stores to a shadow stack of managed values only.\n *\n * Consider a simple call to a function looking like the following, taking\n * managed arguments, plus assigning managed values to locals:\n *\n *   function foo(a: Obj, b: Obj): Obj {\n *     var c = __tostack(a) // slot 2\n *     __collect()\n *     return b\n *   }\n *\n *   foo(__tostack(a), __tostack(b)) // slot 0, 1\n *\n * At the call to `__collect()` the 32-bit stack frame of the function is:\n *\n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed argument 'a'\n *      4   | Second managed argument 'b'\n *   -------|----------------------------\n *      8   | First managed local 'c'\n *\n * We are splitting the frame in two halves as annotated since both halves are\n * only known separately for indirect calls, with the first half becoming an\n * extension of the calling function's stack frame by means of treating the\n * arguments as if these were locals beyond the caller's `numLocals`. Function\n * arguments stay a bit longer on the stack than usually, but we also don't have\n * to modify the stack pointer pre-call at all this way. The caller's amended\n * stack frame when assuming one managed local may look like this:\n *\n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed local '?'\n *      4   | Extended with first managed argument 'a'\n *      8   | Extended with second managed argument 'b'\n *\n * with the callee's stack frame becoming just:\n *\n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed local 'c'\n *\n * Instrumentation added below looks about like the following, with the stack\n * growing downwards and 't' and 'r' being new temporary locals:\n *\n *   // callee frameSize = 1 * sizeof<usize>()\n *   function foo(a: usize, b: usize): usize {\n *     memory.fill(__stack_pointer -= frameSize, 0, frameSize)\n *     store<usize>(__stack_pointer, c = a, 0 * sizeof<usize>())\n *     __collect()\n *     var r = b\n *     __stack_pointer += frameSize\n *     return r\n *   }\n *\n *   // caller frameSize = (numLocalSlots + 2 [by extension]) * sizeof<usize>()\n *   (\n *     r = foo(\n *       ( t = a,\n *         store<usize>(__stack_pointer, t, (numLocalSlots + 0) * sizeof<usize>()),\n *         t ),\n *       ( t = b,\n *         store<usize>(__stack_pointer, t, (numLocalSlots + 1) * sizeof<usize>()),\n *         t )\n *     ),\n *     r\n *   )\n *\n * Also note that we have to `memory.fill` the second half because the first\n * assignment to a local may happen at a later point within the function. The\n * invariant we need to maintain for a precise GC is that it only sees zeroes\n * or valid pointers, but never an invalid pointer left on the stack earlier.\n * Since most frames are small, we unroll a sequence of `store`s up to a frame\n * size of 16 bytes, and `memory.fill`, if available, beyond.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Pass\n} from \"./pass\";\n\nimport {\n  _BinaryenAddFunction,\n  _BinaryenAddFunctionExport,\n  _BinaryenCallGetNumOperands,\n  _BinaryenCallGetOperandAt,\n  _BinaryenCallGetTarget,\n  _BinaryenCallIndirectGetNumOperands,\n  _BinaryenCallIndirectGetOperandAt,\n  _BinaryenCallIndirectSetOperandAt,\n  _BinaryenCallSetOperandAt,\n  _BinaryenExportGetKind,\n  _BinaryenExportGetName,\n  _BinaryenExportGetValue,\n  _BinaryenExpressionGetId,\n  _BinaryenExpressionGetType,\n  _BinaryenFunctionGetBody,\n  _BinaryenFunctionGetName,\n  _BinaryenFunctionGetNumLocals,\n  _BinaryenFunctionGetNumVars,\n  _BinaryenFunctionGetParams,\n  _BinaryenFunctionGetResults,\n  _BinaryenFunctionGetVar,\n  _BinaryenFunctionSetBody,\n  _BinaryenGetExport,\n  _BinaryenGetFunction,\n  _BinaryenLocalSetGetIndex,\n  _BinaryenLocalSetGetValue,\n  _BinaryenLocalSetIsTee,\n  _BinaryenLocalSetSetValue,\n  _BinaryenRemoveExport,\n  _BinaryenRemoveFunction,\n  _BinaryenReturnGetValue,\n  _BinaryenReturnSetValue,\n  _free\n} from \"../glue/binaryen\";\n\nimport {\n  ExpressionId,\n  ExpressionRef,\n  FunctionRef,\n  Index,\n  BinaryOp,\n  TypeRef,\n  allocPtrArray,\n  Module,\n  ExternalKind,\n  ExportRef,\n  expandType,\n  isConstZero\n} from \"../module\";\n\nimport {\n  Compiler,\n  Options\n} from \"../compiler\";\n\nimport {\n  Feature\n} from \"../common\";\n\nimport {\n  BuiltinNames\n} from \"../builtins\";\n\ntype LocalIndex = Index;\ntype SlotIndex = Index;\ntype SlotMap = Map<LocalIndex,SlotIndex>;\ntype TempMap = Map<TypeRef,LocalIndex>;\n\n/** Attempts to match the `__tostack(value)` pattern. Returns `value` if a match, otherwise `0`.  */\nfunction matchPattern(module: Module, expr: ExpressionRef): ExpressionRef {\n  if (\n    _BinaryenExpressionGetId(expr) == ExpressionId.Call &&\n    module.readStringCached(_BinaryenCallGetTarget(expr)) == BuiltinNames.tostack\n  ) {\n    assert(_BinaryenCallGetNumOperands(expr) == 1);\n    return _BinaryenCallGetOperandAt(expr, 0);\n  }\n  return 0;\n}\n\n/** Tests whether a `value` matched by `matchTostack` needs a slot. */\nfunction needsSlot(module: Module, value: ExpressionRef): bool {\n  switch (_BinaryenExpressionGetId(value)) {\n    // no need to stack null pointers\n    case ExpressionId.Const: return !isConstZero(value);\n    // already kept in another slot\n    case ExpressionId.LocalGet:\n    case ExpressionId.LocalSet: return false; // tee\n  }\n  return true;\n}\n\n/** Instruments a module with a shadow stack for precise GC. */\nexport class ShadowStackPass extends Pass {\n  /** Stack frame slots, per function. */\n  slotMaps: Map<FunctionRef, SlotMap> = new Map();\n  /** Temporary locals, per function. */\n  tempMaps: Map<FunctionRef, TempMap> = new Map();\n  /** Exports (with managed operands) map. */\n  exportMap: Map<string,i32[]> = new Map();\n  /** Compiler reference. */\n  compiler: Compiler;\n\n  constructor(compiler: Compiler) {\n    super(compiler.module);\n    this.compiler = compiler;\n  }\n\n  /** Compiler options. */\n  get options(): Options { return this.compiler.options; }\n  /** Target pointer type. */\n  get ptrType(): TypeRef { return this.options.sizeTypeRef; }\n  /** Target pointer size. */\n  get ptrSize(): i32 { return this.ptrType == TypeRef.I64 ? 8 : 4; }\n  /** Target pointer addition operation. */\n  get ptrBinaryAdd(): BinaryOp { return this.ptrType == TypeRef.I64 ? BinaryOp.AddI64 : BinaryOp.AddI32; }\n  /** Target pointer subtraction operation. */\n  get ptrBinarySub(): BinaryOp { return this.ptrType == TypeRef.I64 ? BinaryOp.SubI64 : BinaryOp.SubI32; }\n\n  /** Gets a constant with the specified value of the target pointer type. */\n  ptrConst(value: i32): ExpressionRef {\n    return this.ptrType == TypeRef.I64\n      ? this.module.i64(value)\n      : this.module.i32(value);\n  }\n\n  /** Notes the presence of a slot for the specified (imaginary) local, returning the slot index. */\n  noteSlot(func: FunctionRef, localIndex: Index): i32 {\n    let slotMap: SlotMap;\n    if (this.slotMaps.has(func)) {\n      slotMap = changetype<SlotMap>(this.slotMaps.get(func));\n      if (slotMap.has(localIndex)) {\n        return changetype<i32>(slotMap.get(localIndex));\n      }\n    } else {\n      slotMap = new Map();\n      this.slotMaps.set(func, slotMap);\n    }\n    let slotIndex = slotMap.size;\n    slotMap.set(localIndex, slotIndex);\n    return slotIndex;\n  }\n\n  /** Notes the presence of an exported function taking managed operands. */\n  noteExport(name: string, managedOperandIndices: i32[]): void {\n    if (!managedOperandIndices.length) return;\n    this.exportMap.set(name, managedOperandIndices);\n  }\n\n  /** Gets a shared temporary local of the given type in the specified functions. */\n  getSharedTemp(func: FunctionRef, type: TypeRef): Index {\n    let tempMap: TempMap;\n    if (this.tempMaps.has(func)) {\n      tempMap = changetype<TempMap>(this.tempMaps.get(func));\n      if (tempMap.has(type)) {\n        return changetype<Index>(tempMap.get(type));\n      }\n    } else {\n      tempMap = new Map();\n      this.tempMaps.set(func, tempMap);\n    }\n    let numLocals = _BinaryenFunctionGetNumLocals(func);\n    let localIndex = numLocals + tempMap.size;\n    tempMap.set(type, localIndex);\n    return localIndex;\n  }\n\n  /** Makes an expression modifying the stack pointer by the given offset. */\n  makeStackOffset(offset: i32): ExpressionRef {\n    assert(offset != 0);\n    var module = this.module;\n    var expr = module.global_set(BuiltinNames.stack_pointer,\n      module.binary(offset >= 0 ? this.ptrBinaryAdd : this.ptrBinarySub,\n        module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n        this.ptrConst(abs(offset))\n      )\n    );\n    if (offset > 0) return expr;\n    return module.block(null, [\n      expr,\n      this.makeStackCheck()\n    ], TypeRef.None);\n  }\n\n  /** Makes a sequence of expressions zeroing the stack frame. */\n  makeStackFill(frameSize: i32, stmts: ExpressionRef[]): void {\n    assert(frameSize > 0);\n    var module = this.module;\n    if (this.options.hasFeature(Feature.BULK_MEMORY) && frameSize > 16) {\n      stmts.push(\n        module.memory_fill(\n          module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n          module.i32(0), // TODO: Wasm64 also i32?\n          this.ptrConst(frameSize)\n        )\n      );\n    } else {\n      let remain = frameSize;\n      while (remain >= 8) {\n        // store<i64>(__stack_pointer, 0, frameSize - remain)\n        stmts.push(\n          module.store(8,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.i64(0),\n            TypeRef.I64,\n            frameSize - remain\n          )\n        );\n        remain -= 8;\n      }\n      if (remain) {\n        assert(remain == 4);\n        // store<i32>(__stack_pointer, 0, frameSize - remain)\n        stmts.push(\n          module.store(4,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.i32(0),\n            TypeRef.I32,\n            frameSize - remain\n          )\n        );\n      }\n    }\n  }\n\n  private hasStackCheckFunction: bool = false;\n\n  /** Makes a check that the current stack pointer is valid. */\n  makeStackCheck(): ExpressionRef {\n    var module = this.module;\n    if (!this.hasStackCheckFunction) {\n      this.hasStackCheckFunction = true;\n      module.addFunction(\"~stack_check\", TypeRef.None, TypeRef.None, null,\n        module.if(\n          module.binary(BinaryOp.LtI32,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.global_get(BuiltinNames.data_end, this.ptrType)\n          ),\n          this.compiler.makeStaticAbort(\n            this.compiler.ensureStaticString(\"stack overflow\"),\n            this.compiler.program.nativeSource\n          )\n        )\n      );\n    }\n    return module.call(\"~stack_check\", null, TypeRef.None);\n  }\n\n  private updateCallOperands(operands: ExpressionRef[]): i32 {\n    var module = this.module;\n    var numSlots = 0;\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      let operand = operands[i];\n      let match = matchPattern(module, operand);\n      if (!match) continue;\n      if (!needsSlot(module, match)) {\n        operands[i] = match;\n        continue;\n      }\n      let currentFunction = this.currentFunction;\n      let numLocals = _BinaryenFunctionGetNumLocals(currentFunction);\n      let slotIndex = this.noteSlot(currentFunction, numLocals + this.callSlotOffset + i);\n      let temp = this.getSharedTemp(currentFunction, this.ptrType);\n      let stmts = new Array<ExpressionRef>();\n      // t = value\n      stmts.push(\n        module.local_set(temp, match, false)\n      );\n      // store<usize>(__stack_pointer, t, slotIndex * ptrSize)\n      stmts.push(\n        module.store(this.ptrSize,\n          module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n          module.local_get(temp, this.ptrType),\n          this.ptrType, slotIndex * this.ptrSize\n        )\n      );\n      // -> t\n      stmts.push(\n        module.local_get(temp, this.ptrType)\n      );\n      operands[i] = module.block(null, stmts, this.ptrType);\n      ++numSlots;\n    }\n    return numSlots;\n  }\n\n  /** Slot offset accounting for nested calls. */\n  private callSlotOffset: i32 = 0;\n  /** Slot offset stack in nested calls. */\n  private callSlotStack: i32[] = new Array();\n\n  /** @override */\n  visitCallPre(call: ExpressionRef): void {\n    var numOperands = _BinaryenCallGetNumOperands(call);\n    var operands = new Array<ExpressionRef>(numOperands);\n    for (let i: Index = 0; i < numOperands; ++i) {\n      operands[i] = _BinaryenCallGetOperandAt(call, i);\n    }\n    let numSlots = this.updateCallOperands(operands);\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      _BinaryenCallSetOperandAt(call, i, operands[i]);\n    }\n    if (numSlots) {\n      // Reserve these slots for us so nested calls use their own\n      this.callSlotOffset += numSlots;\n    }\n    this.callSlotStack.push(numSlots);\n  }\n\n  /** @override */\n  visitCall(call: ExpressionRef): void {\n    let numSlots = this.callSlotStack.pop();\n    if (numSlots) this.callSlotOffset -= numSlots;\n  }\n\n  /** @override */\n  visitCallIndirectPre(callIndirect: ExpressionRef): void {\n    let numOperands = _BinaryenCallIndirectGetNumOperands(callIndirect);\n    let operands = new Array<ExpressionRef>(numOperands);\n    for (let i: Index = 0; i < numOperands; ++i) {\n      operands[i] = _BinaryenCallIndirectGetOperandAt(callIndirect, i);\n    }\n    let numSlots = this.updateCallOperands(operands);\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      _BinaryenCallIndirectSetOperandAt(callIndirect, i, operands[i]);\n    }\n    if (numSlots) {\n      // Reserve these slots for us so nested calls use their own\n      this.callSlotOffset += numSlots;\n    }\n    this.callSlotStack.push(numSlots);\n  }\n\n  /** @override */\n  visitCallIndirect(callIndirect: ExpressionRef): void {\n    let numSlots = this.callSlotStack.pop();\n    if (numSlots) this.callSlotOffset -= numSlots;\n  }\n\n  /** @override */\n  visitLocalSet(localSet: ExpressionRef): void {\n    let module = this.module;\n    let value = _BinaryenLocalSetGetValue(localSet);\n    let match = matchPattern(module, value);\n    if (!match) return;\n    if (!needsSlot(module, match)) {\n      _BinaryenLocalSetSetValue(localSet, match);\n      return;\n    }\n    let index = _BinaryenLocalSetGetIndex(localSet);\n    let slotIndex = this.noteSlot(this.currentFunction, index);\n    let stmts = new Array<ExpressionRef>();\n    // store<usize>(__stack_pointer, local = match, slotIndex * ptrSize)\n    stmts.push(\n      module.store(this.ptrSize,\n        module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n        module.local_tee(index, match, false),\n        this.ptrType, slotIndex * this.ptrSize\n      )\n    );\n    if (_BinaryenLocalSetIsTee(localSet)) {\n      // -> local\n      stmts.push(\n        module.local_get(index, this.ptrType)\n      );\n      this.replaceCurrent(module.flatten(stmts, this.ptrType));\n    } else {\n      this.replaceCurrent(module.flatten(stmts, TypeRef.None));\n    }\n  }\n\n  /** Updates a function with additional locals etc. */\n  updateFunction(funcRef: FunctionRef): void {\n    let name = _BinaryenFunctionGetName(funcRef);\n    let params = _BinaryenFunctionGetParams(funcRef);\n    let results = _BinaryenFunctionGetResults(funcRef);\n    let body = assert(_BinaryenFunctionGetBody(funcRef));\n    let numVars = _BinaryenFunctionGetNumVars(funcRef);\n    let vars = new Array<TypeRef>();\n    for (let i: Index = 0; i < numVars; ++i) {\n      vars[i] = _BinaryenFunctionGetVar(funcRef, i);\n    }\n    let tempMaps = this.tempMaps;\n    if (tempMaps.has(funcRef)) {\n      let tempMap = changetype<TempMap>(tempMaps.get(funcRef));\n      for (let _keys = Map_keys(tempMap), i = 0, k = _keys.length; i < k; ++i) {\n        vars.push(_keys[i]);\n      }\n    }\n    let moduleRef = this.module.ref;\n    _BinaryenRemoveFunction(moduleRef, name);\n    let cArr = allocPtrArray(vars);\n    _BinaryenAddFunction(moduleRef, name, params, results, cArr, vars.length, body);\n    _free(cArr);\n  }\n\n  /** Updates a function export taking managed arguments. */\n  updateExport(exportRef: ExportRef, managedOperandIndices: i32[]): void {\n    var module = this.module;\n    var moduleRef = module.ref;\n    assert(_BinaryenExportGetKind(exportRef) == ExternalKind.Function);\n\n    var internalNameRef = _BinaryenExportGetValue(exportRef);\n    var internalName = module.readStringCached(internalNameRef)!;\n    var externalNameRef = _BinaryenExportGetName(exportRef);\n    var funcRef = _BinaryenGetFunction(moduleRef, internalNameRef);\n    var params = _BinaryenFunctionGetParams(funcRef);\n    var paramTypes = expandType(params);\n    var numParams = paramTypes.length;\n    var results = _BinaryenFunctionGetResults(funcRef);\n    var numLocals = numParams;\n    var vars = new Array<TypeRef>();\n    var numSlots = assert(managedOperandIndices.length);\n    var frameSize = numSlots * this.ptrSize;\n    var wrapperName = \"export:\" + internalName;\n    var wrapperNameRef = module.allocStringCached(wrapperName);\n\n    if (_BinaryenGetFunction(moduleRef, wrapperNameRef) == 0) {\n      let stmts = new Array<ExpressionRef>();\n      // __stack_pointer -= frameSize\n      stmts.push(\n        this.makeStackOffset(-frameSize)\n      );\n      for (let slotIndex = 0; slotIndex < numSlots; ++slotIndex) {\n        // store<usize>(__stack_pointer, $local, slotIndex * ptrSize)\n        stmts.push(\n          module.store(this.ptrSize,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.local_get(managedOperandIndices[slotIndex], this.ptrType),\n            this.ptrType, slotIndex * this.ptrSize\n          )\n        );\n      }\n      let forwardedOperands = new Array<ExpressionRef>(numParams);\n      for (let i = 0; i < numParams; ++i) {\n        forwardedOperands[i] = module.local_get(i, paramTypes[i]);\n      }\n      if (results != TypeRef.None) {\n        let tempIndex = numLocals++;\n        vars.push(results);\n        // t = original(...)\n        stmts.push(\n          module.local_set(tempIndex,\n            module.call(internalName, forwardedOperands, results),\n            false // internal\n          )\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n        // -> t\n        stmts.push(\n          module.local_get(tempIndex, results)\n        );\n      } else {\n        // original(...)\n        stmts.push(\n          module.call(internalName, forwardedOperands, results)\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n      }\n      let cArr = allocPtrArray(vars);\n      _BinaryenAddFunction(moduleRef, wrapperNameRef, params, results, cArr, vars.length,\n        module.block(null, stmts, results)\n      );\n      _free(cArr);\n    }\n    _BinaryenRemoveExport(moduleRef, externalNameRef);\n    _BinaryenAddFunctionExport(moduleRef, wrapperNameRef, externalNameRef);\n  }\n\n  /** @override */\n  walkModule(): void {\n    // Run the pass normally\n    super.walkModule();\n\n    // Instrument returns in functions utilizing stack slots\n    var module = this.module;\n    var instrumentReturns = new InstrumentReturns(this);\n    for (let _keys = Map_keys(this.slotMaps), i = 0, k = _keys.length; i < k; ++i) {\n      let func = _keys[i];\n      let slotMap = changetype<SlotMap>(this.slotMaps.get(func));\n      let frameSize = slotMap.size * this.ptrSize;\n\n      // Instrument function returns\n      instrumentReturns.frameSize = frameSize;\n      instrumentReturns.walkFunction(func);\n\n      // Instrument function entry\n      let stmts = new Array<ExpressionRef>();\n      // __stack_pointer -= frameSize\n      stmts.push(\n        this.makeStackOffset(-frameSize)\n      );\n      // memory.fill(__stack_pointer, 0, frameSize)\n      this.makeStackFill(frameSize, stmts);\n\n      // Handle implicit return\n      let body = _BinaryenFunctionGetBody(func);\n      let bodyType = _BinaryenExpressionGetType(body);\n      if (bodyType == TypeRef.Unreachable) {\n        // body\n        stmts.push(\n          body\n        );\n      } else if (bodyType == TypeRef.None) {\n        // body\n        stmts.push(\n          body\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n      } else {\n        let temp = this.getSharedTemp(func, bodyType);\n        // t = body\n        stmts.push(\n          module.local_set(temp, body, false)\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n        // -> t\n        stmts.push(\n          module.local_get(temp, bodyType)\n        );\n      }\n      _BinaryenFunctionSetBody(func, module.flatten(stmts, bodyType));\n    }\n\n    // Update functions we added more locals to\n    // TODO: _BinaryenFunctionAddVar ?\n    for (let _keys = Map_keys(this.tempMaps), i = 0, k = _keys.length; i < k; ++i) {\n      this.updateFunction(_keys[i]);\n    }\n\n    // Update exports taking managed arguments\n    var exportMap = this.exportMap;\n    for (let _keys = Map_keys(exportMap), i = 0, k = _keys.length; i < k; ++i) {\n      let exportName = _keys[i];\n      let exportRef = _BinaryenGetExport(module.ref, module.allocStringCached(exportName));\n      let managedOperandIndices = changetype<i32[]>(exportMap.get(exportName));\n      this.updateExport(exportRef, managedOperandIndices);\n    }\n  }\n}\n\n/** Companion pass instrumenting `return` statements to restore the stack frame. */\nclass InstrumentReturns extends Pass {\n  /** Parent pass. */\n  parentPass: ShadowStackPass;\n  /** Frame size of the current function being processed. */\n  frameSize: i32 = 0;\n\n  constructor(shadowStack: ShadowStackPass) {\n    super(shadowStack.module);\n    this.parentPass = shadowStack;\n  }\n\n  /** @override */\n  visitReturn(ret: ExpressionRef): void {\n    assert(this.frameSize);\n    var module = this.module;\n    var value = _BinaryenReturnGetValue(ret);\n    var stmts = new Array<ExpressionRef>();\n    if (value) {\n      let returnType = _BinaryenExpressionGetType(value);\n      if (returnType == TypeRef.Unreachable) return;\n      let temp = this.parentPass.getSharedTemp(this.currentFunction, returnType);\n      // t = value\n      stmts.push(\n        module.local_set(temp, value, false)\n      );\n      // __stack_pointer += frameSize\n      stmts.push(\n        this.parentPass.makeStackOffset(+this.frameSize)\n      );\n      // return t\n      _BinaryenReturnSetValue(ret, module.local_get(temp, returnType));\n    } else {\n      // __stack_pointer += frameSize\n      stmts.push(\n        this.parentPass.makeStackOffset(+this.frameSize)\n      );\n      // return\n    }\n    stmts.push(\n      ret\n    );\n    this.replaceCurrent(module.flatten(stmts, TypeRef.Unreachable));\n  }\n}\n", "import {\n  SourceKind\n} from \"../ast\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\nimport {\n  ClassPrototype,\n  Element,\n  ElementKind,\n  Function,\n  Enum,\n  Class,\n  Interface,\n  Field,\n  File,\n  FunctionPrototype,\n  Global,\n  Program,\n  Property,\n  PropertyPrototype\n} from \"../program\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate = includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (!propertyInstance) break;\n        element = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n// Helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nexport function hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n", "import {\n  NodeKind,\n  DecoratorKind,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  TemplateLiteralExpression,\n  findDecorator\n} from \"../ast\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\nimport {\n  ElementKind,\n  Element,\n  Program,\n  Function,\n  Global,\n  Class,\n  Interface,\n  Enum,\n  EnumValue,\n  Field\n} from \"../program\";\n\nimport {\n  Type,\n  TypeFlags,\n  Signature\n} from \"../types\";\n\nimport {\n  CharCode,\n  escapeString,\n  indent,\n  isIdentifier\n} from \"../util\";\n\nimport {\n  ExportsWalker\n} from \"./util\";\n\n// Limitations\n//\n// - Instrumented globals are no longer WebAssembly.Global, hence cannot be\n//   imported the same way as non-instrumented globals would allow. Affects both\n//   globals imported here and globals imported elsewhere.\n//\n// - Since little is known about how class imports and exports will behave,\n//   there is currently no glue generated for them. In IT there appears to be\n//   a concept of protocols that may or may not map in the future. In GC there\n//   doesn't appear to be a connection between classes and their methods so far.\n//\n//   Instead, generated bindings are limited to lifting and lowering of plain\n//   objects when the class has no constructor and no non-public elements. In\n//   any other sitation an internal or external reference is passed.\n//\n// - Linking two instrumented modules with separate bindings produces\n//   intermediate garbage (i.e. goes through a temporary JS object). Any native\n//   mechanism enabling communication between modules directly would help here.\n//\n// - Cycles between the internal and the external GC cannot be resolved. Using\n//   a common GC as envisioned by the GC proposal can help here, but so far it\n//   seems that the same limitations as for IT will remain.\n//\n// - Duplicate Wasm imports don't yet work when instrumentation is required as\n//   provided argument types cannot be told apart when these only come in as\n//   numbers. It might be possible to modify the binary post compilation, but\n//   this has not been attempted yet.\n//\n// Oddities\n//\n// - Interface Types `string` will be incompatible with JavaScript `String` and\n//   it remains unclear how to proceed on this front. We could either use the IT\n//   mechanism and accept potential hazards or keep using unfortunate glue code.\n//\n// - Functions with a variable number of arguments need some special glue to\n//   inform the binary how many arguments have been provided so it can fill in\n//   defaults for the omitted arguments. No native mechanism in sight, yet.\n//\n// - Optional BigInt arguments must be coerced to 0n since JS does not\n//   implicitly coerce from `null` or `undefined`. Numbers do, however.\n//\n// - Generated bindings assume little endian architecture with typed arrays as\n//   it appears to be more efficient than using a DataView and BE use cases\n//   haven't been seen in the wild so far.\n//\n// - It is assumed that generated import bindings call JavaScript and that the\n//   callee expects a properly coerced integer value, leading to more `>>> 0`\n//   coercions than necessary when the import is actually another Wasm module.\n\n/** A JavaScript bindings builder. */\nexport class JSBuilder extends ExportsWalker {\n\n  /** Builds JavaScript bindings for the specified program. */\n  static build(program: Program, esm: bool = true): string {\n    return new JSBuilder(program, esm).build();\n  }\n\n  private esm: bool;\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  private needsLiftBuffer: bool = false;\n  private needsLowerBuffer: bool = false;\n  private needsLiftString: bool = false;\n  private needsLowerString: bool = false;\n  private needsLiftArray: bool = false;\n  private needsLowerArray: bool = false;\n  private needsLiftTypedArray: bool = false;\n  private needsLowerTypedArray: bool = false;\n  private needsLiftStaticArray: bool = false;\n  private needsLowerStaticArray: bool = false;\n  private needsLiftInternref: bool = false;\n  private needsLowerInternref: bool = false;\n  private needsRetain: bool = false;\n  private needsRelease: bool = false;\n  private needsNotNull: bool = false;\n\n  private deferredLifts: Set<Element> = new Set();\n  private deferredLowers: Set<Element> = new Set();\n  private deferredCode: string[] = new Array<string>();\n\n  private exports: string[] = new Array();\n  private importMappings: Map<string,i32> = new Map();\n\n  /** Constructs a new JavaScript bindings builder. */\n  constructor(program: Program, esm: bool, includePrivate: bool = false) {\n    super(program, includePrivate);\n    this.esm = esm;\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var type = element.type;\n    this.exports.push(name);\n    if (!isPlainValue(type, Mode.EXPORT)) {\n      indent(sb, this.indentLevel);\n      sb.push(name);\n      sb.push(\": {\\n\");\n      indent(sb, ++this.indentLevel);\n      sb.push(\"// \");\n      sb.push(element.internalName);\n      sb.push(\": \");\n      sb.push(type.toString());\n      sb.push(\"\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"valueOf() { return this.value; },\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"get value() {\\n\");\n      indent(sb, ++this.indentLevel);\n      sb.push(\"return \");\n      this.makeLiftFromValue(\"exports.\" + name + \".value\", type, sb);\n      sb.push(\";\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n      if (!element.is(CommonFlags.CONST)) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        sb.push(\"set value(value) {\\n\");\n        indent(sb, ++this.indentLevel);\n        sb.push(\"exports.\");\n        sb.push(name);\n        sb.push(\".value = \");\n        this.makeLowerToValue(\"value\", type, sb);\n        sb.push(\";\\n\");\n        indent(sb, --this.indentLevel);\n        sb.push(\"}\");\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"},\\n\");\n    }\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    this.exports.push(name);\n    indent(sb, this.indentLevel);\n    sb.push(name);\n    sb.push(\": (values => (\\n\");\n    indent(sb, ++this.indentLevel);\n    sb.push(\"// \");\n    sb.push(element.internalName);\n    sb.push(\"\\n\");\n    var members = element.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let value = _values[i];\n        if (value.kind != ElementKind.ENUMVALUE) continue;\n        indent(sb, this.indentLevel);\n        sb.push(\"values[values.\");\n        sb.push(value.name);\n        if (value.is(CommonFlags.INLINED)) {\n          sb.push(\" = \");\n          sb.push(i64_low((<EnumValue>value).constantIntegerValue).toString());\n        } else {\n          sb.push(\" = exports[\\\"\");\n          sb.push(escapeString(name + \".\" + value.name, CharCode.DOUBLEQUOTE));\n          sb.push(\"\\\"].valueOf()\");\n        }\n        sb.push(\"] = \\\"\");\n        sb.push(escapeString(value.name, CharCode.DOUBLEQUOTE));\n        sb.push(\"\\\",\\n\");\n      }\n    }\n    indent(sb, this.indentLevel);\n    sb.push(\"values\\n\");\n    indent(sb, --this.indentLevel);\n    sb.push(\"))({}),\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  makeGlobalImport(moduleName: string, name: string, element: Global): void {\n    var sb = this.sb;\n    var type = element.type;\n    indent(sb, this.indentLevel);\n    if (isIdentifier(name)) {\n      sb.push(name);\n    } else {\n      sb.push(\"\\\"\");\n      sb.push(escapeString(name, CharCode.DOUBLEQUOTE));\n      sb.push(\"\\\": \");\n    }\n    let moduleId = this.ensureModuleId(moduleName);\n    if (isPlainValue(type, Mode.IMPORT)) {\n      sb.push(\"(\\n\");\n      indent(sb, this.indentLevel + 1);\n      sb.push(\"// \");\n      sb.push(element.internalName);\n      sb.push(\": \");\n      sb.push(element.type.toString());\n      sb.push(\"\\n\");\n      indent(sb, this.indentLevel + 1);\n      if (moduleName != \"env\") {\n        sb.push(\"__module\");\n        sb.push(moduleId.toString());\n        sb.push(\".\");\n      }\n      sb.push(name);\n      sb.push(\"\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\")\");\n    } else {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      sb.push(\"// \");\n      sb.push(element.internalName);\n      sb.push(\": \");\n      sb.push(element.type.toString());\n      sb.push(\"\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"// not supported: cannot lower before instantiate completes\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    }\n    sb.push(\",\\n\");\n  }\n\n  makeFunctionImport(moduleName: string, name: string, element: Function, code: string | null = null): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (isIdentifier(name)) {\n      sb.push(name);\n    } else {\n      sb.push(\"\\\"\");\n      sb.push(escapeString(name, CharCode.DOUBLEQUOTE));\n      sb.push(\"\\\"\");\n    }\n    if (isPlainFunction(signature, Mode.IMPORT) && !code) {\n      sb.push(\": (\\n\");\n      indent(sb, this.indentLevel + 1);\n      sb.push(\"// \");\n      sb.push(element.internalName);\n      sb.push(element.signature.toString());\n      sb.push(\"\\n\");\n      indent(sb, this.indentLevel + 1);\n      if (moduleName != \"env\") {\n        sb.push(moduleName);\n        sb.push(\".\");\n      }\n      sb.push(name);\n      sb.push(\"\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\")\");\n    } else {\n      sb.push(\"(\");\n      let parameterTypes = signature.parameterTypes;\n      let parameterNames = new Array<string>();\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        parameterNames.push(element.getParameterName(i));\n      }\n      sb.push(parameterNames.join(\", \"));\n      sb.push(\") {\\n\");\n      indent(sb, ++this.indentLevel);\n      sb.push(\"// \");\n      sb.push(element.internalName);\n      sb.push(element.signature.toString());\n      sb.push(\"\\n\");\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let type = parameterTypes[i];\n        if (!isPlainValue(type, Mode.EXPORT)) {\n          let name = element.getParameterName(i);\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          sb.push(\" = \");\n          this.makeLiftFromValue(name, type, sb);\n          sb.push(\";\\n\");\n        }\n      }\n      let expr = new Array<string>();\n      let moduleId = this.ensureModuleId(moduleName);\n      if (code) {\n        expr.push(\"(() => {\\n\");\n        indent(expr, 1);\n        expr.push(\"// @external.js\\n\");\n        indentText(code, 1, expr);\n        expr.push(\"\\n})()\");\n      } else {\n        if (moduleName != \"env\") {\n          expr.push(\"__module\");\n          expr.push(moduleId.toString());\n          expr.push(\".\");\n        }\n        expr.push(name);\n        expr.push(\"(\");\n        expr.push(parameterNames.join(\", \"));\n        expr.push(\")\");\n      }\n      code = expr.join(\"\");\n      expr.length = 0;\n      indentText(code, this.indentLevel, expr, true);\n      code = expr.join(\"\");\n      indent(sb, this.indentLevel);\n      if (signature.returnType != Type.void) {\n        sb.push(\"return \");\n        this.makeLowerToValue(code, signature.returnType, sb);\n        sb.push(\";\\n\");\n      } else {\n        sb.push(code);\n        sb.push(\";\\n\");\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    }\n    sb.push(\",\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    this.exports.push(name);\n    if (!isPlainFunction(signature, Mode.EXPORT)) {\n      indent(sb, this.indentLevel);\n      sb.push(name);\n      sb.push(\"(\");\n      let parameterTypes = signature.parameterTypes;\n      let numReferences = 0;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        if (parameterTypes[i].isInternalReference) numReferences++;\n        if (i > 0) sb.push(\", \");\n        sb.push(element.getParameterName(i));\n      }\n      sb.push(\") {\\n\");\n      indent(sb, ++this.indentLevel);\n      sb.push(\"// \");\n      sb.push(element.internalName);\n      sb.push(signature.toString());\n      sb.push(\"\\n\");\n      let releases = new Array<string>();\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let type = parameterTypes[i];\n        if (!isPlainValue(type, Mode.IMPORT)) {\n          let name = element.getParameterName(i);\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          sb.push(\" = \");\n          let needsRetainRelease = type.isInternalReference && --numReferences > 0;\n          if (needsRetainRelease) {\n            this.needsRetain = true;\n            this.needsRelease = true;\n            sb.push(\"__retain(\");\n            releases.push(name);\n          }\n          this.makeLowerToValue(name, type, sb);\n          if (needsRetainRelease) {\n            sb.push(\")\");\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      if (releases.length) {\n        indent(sb, this.indentLevel++);\n        sb.push(\"try {\\n\");\n      }\n      if (signature.requiredParameters < parameterTypes.length) {\n        indent(sb, this.indentLevel);\n        sb.push(\"exports.__setArgumentsLength(arguments.length);\\n\");\n      }\n      const expr = new Array<string>();\n      expr.push(\"exports.\");\n      expr.push(name);\n      expr.push(\"(\");\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        if (i > 0) expr.push(\", \");\n        expr.push(element.getParameterName(i));\n      }\n      expr.push(\")\");\n      if (signature.returnType != Type.void) {\n        indent(sb, this.indentLevel);\n        sb.push(\"return \");\n        this.makeLiftFromValue(expr.join(\"\"), signature.returnType, sb);\n      } else {\n        indent(sb, this.indentLevel);\n        sb.push(expr.join(\"\"));\n      }\n      sb.push(\";\\n\");\n      if (releases.length) {\n        indent(sb, this.indentLevel - 1);\n        sb.push(\"} finally {\\n\");\n        for (let i = 0, k = releases.length; i < k; ++i) {\n          indent(sb, this.indentLevel);\n          sb.push(\"__release(\");\n          sb.push(releases[i]);\n          sb.push(\");\\n\");\n        }\n        indent(sb, --this.indentLevel);\n        sb.push(\"}\\n\");\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"},\\n\");\n    }\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    // not implemented\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // not implemented\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    // not implemented\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // not implemented\n    // var sb = this.sb;\n    // sb.push(\"export const \");\n    // sb.push(name);\n    // sb.push(\" = \");\n    // sb.push(originalName);\n    // sb.push(\";\\n\");\n  }\n\n  getExternalCode(element: Function): string | null {\n    let decorator = findDecorator(DecoratorKind.EXTERNAL_JS, element.decoratorNodes);\n    if (decorator) {\n      let args = decorator.args;\n      if (args && args.length == 1) {\n        let codeArg = args[0];\n        if (codeArg.kind == NodeKind.LITERAL) {\n          let literal = <LiteralExpression>codeArg;\n          if (literal.literalKind == LiteralKind.STRING) {\n            return (<StringLiteralExpression>literal).value;\n          }\n          if (literal.literalKind == LiteralKind.TEMPLATE) {\n            let parts = (<TemplateLiteralExpression>literal).parts;\n            if (parts.length == 1) {\n              return parts[0];\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  build(): string {\n    var exports = this.exports;\n    var moduleImports = this.program.moduleImports;\n    var program = this.program;\n    var options = program.options;\n    var sb = this.sb;\n\n    sb.push(\"\"); // placeholder\n    indent(sb, this.indentLevel++);\n    if (!this.esm) sb.push(\"export \");\n    sb.push(\"async function instantiate(module, imports = {}) {\\n\");\n    const insertPos = sb.push(\"\") - 1;\n\n    // Instrument module imports. Keeps raw (JS) imports on the respective\n    // prototypes and overrides selectively where instrumentation is required.\n    indent(sb, this.indentLevel++);\n    sb.push(\"const adaptedImports = {\\n\");\n    let sbLengthBefore = sb.length;\n    for (let _keys = Map_keys(moduleImports), i = 0, k = _keys.length; i < k; ++i) {\n      let moduleName = _keys[i];\n      let moduleId = this.ensureModuleId(moduleName);\n      let module = <Map<string,Element>>moduleImports.get(moduleName);\n      indent(sb, this.indentLevel);\n      if (isIdentifier(moduleName)) {\n        sb.push(moduleName);\n      } else {\n        sb.push(\"\\\"\");\n        sb.push(escapeString(moduleName, CharCode.DOUBLEQUOTE));\n        sb.push(\"\\\"\");\n      }\n      let resetPos = sb.length;\n      sb.push(\": Object.assign(Object.create(\");\n      if (moduleName == \"env\") {\n        sb.push(\"globalThis\");\n      } else {\n        sb.push(\"__module\");\n        sb.push(moduleId.toString());\n      }\n      sb.push(\"), \");\n      if (moduleName == \"env\") {\n        sb.push(\"imports.env || {}, \");\n      }\n      sb.push(\"{\\n\");\n      ++this.indentLevel;\n      let numInstrumented = 0;\n      for (let _keys2 = Map_keys(module), j = 0, l = _keys2.length; j < l; ++j) {\n        let name = _keys2[j];\n        let elem = assert(module.get(name));\n        if (elem.kind == ElementKind.FUNCTION) {\n          let func = <Function>elem;\n          let code = this.getExternalCode(func);\n          if (!isPlainFunction(func.signature, Mode.IMPORT) || !isIdentifier(name) || code) {\n            this.makeFunctionImport(moduleName, name, <Function>elem, code);\n            ++numInstrumented;\n          }\n        } else if (elem.kind == ElementKind.GLOBAL) {\n          let global = <Global>elem;\n          if (!isPlainValue(global.type, Mode.IMPORT) || !isIdentifier(name)) {\n            this.makeGlobalImport(moduleName, name, global);\n            ++numInstrumented;\n          }\n        }\n      }\n      --this.indentLevel;\n      if (!numInstrumented) {\n        sb.length = resetPos;\n        if (moduleName == \"env\") {\n          sb.push(\": Object.assign(Object.create(globalThis), imports.env || {})\");\n        } else {\n          sb.push(\": __module\");\n          sb.push(moduleId.toString());\n        }\n        sb.push(\",\\n\");\n      } else {\n        indent(sb, this.indentLevel);\n        sb.push(\"}),\\n\");\n      }\n    }\n    --this.indentLevel;\n    let hasAdaptedImports = sb.length > sbLengthBefore;\n    if (hasAdaptedImports) {\n      indent(sb, this.indentLevel);\n      sb.push(\"};\\n\");\n    } else {\n      sb.length = sbLengthBefore - 2; // incl. indent\n    }\n\n    var mappings = this.importMappings;\n    var map = new Array<string>();\n    for (let _keys = Map_keys(mappings), i = 0, k = _keys.length; i < k; ++i) {\n      let moduleName = _keys[i];\n      if (moduleName == \"env\") {\n        map.push(\"  const env = imports.env;\\n\");\n      } else {\n        let moduleId = <i32>mappings.get(moduleName);\n        map.push(\"  const __module\");\n        map.push(moduleId.toString());\n        map.push(\" = imports\");\n        if (isIdentifier(moduleName)) {\n          map.push(\".\");\n          map.push(moduleName);\n        } else {\n          map.push(\"[\\\"\");\n          map.push(escapeString(moduleName, CharCode.DOUBLEQUOTE));\n          map.push(\"\\\"]\");\n        }\n        map.push(\";\\n\");\n      }\n    }\n    sb[insertPos] = map.join(\"\");\n\n    indent(sb, this.indentLevel);\n    sb.push(\"const { exports } = await WebAssembly.instantiate(module\");\n    if (hasAdaptedImports) {\n      sb.push(\", adaptedImports);\\n\");\n    } else {\n      sb.push(\", imports);\\n\");\n    }\n    indent(sb, this.indentLevel);\n    sb.push(\"const memory = exports.memory || imports.env.memory;\\n\");\n    indent(sb, this.indentLevel++);\n    sb.push(\"const adaptedExports = Object.setPrototypeOf({\\n\");\n    sbLengthBefore = sb.length;\n\n    // Instrument module exports. Keeps raw (Wasm) exports on the prototype and\n    // overrides selectively where instrumentation is required.\n    this.walk();\n    --this.indentLevel;\n    let hasAdaptedExports = sb.length > sbLengthBefore;\n    if (hasAdaptedExports) {\n      indent(sb, this.indentLevel);\n      sb.push(\"}, exports);\\n\");\n    } else {\n      if (\n        this.needsLiftBuffer || this.needsLowerBuffer ||\n        this.needsLiftString || this.needsLowerString ||\n        this.needsLiftArray || this.needsLowerArray ||\n        this.needsLiftTypedArray || this.needsLowerTypedArray ||\n        this.needsLiftStaticArray\n      ) {\n        sb.length = sbLengthBefore - 2; // skip adaptedExports + 1x indent\n      } else {\n        sb.length = sbLengthBefore - 4; // skip memory and adaptedExports + 2x indent\n      }\n    }\n\n    // Add external JS code fragments\n    var deferredCode = this.deferredCode;\n    if (deferredCode.length) {\n      for (let i = 0, k = deferredCode.length; i < k; ++i) {\n        sb.push(deferredCode[i]);\n      }\n    }\n\n    // Add the respective lifting and lowering adapters\n    if (this.needsLiftBuffer) {\n      let objectInstance = program.OBJECTInstance;\n      let rtSizeOffset = objectInstance.offsetof(\"rtSize\") - objectInstance.nextMemoryOffset;\n      sb.push(`  function __liftBuffer(pointer) {\n    if (!pointer) return null;\n    return memory.buffer.slice(pointer, pointer + new Uint32Array(memory.buffer)[pointer - ${-rtSizeOffset} >>> 2]);\n  }\n`);\n    }\n    if (this.needsLowerBuffer) {\n      let arrayBufferId = program.arrayBufferInstance.id;\n      sb.push(`  function __lowerBuffer(value) {\n    if (value == null) return 0;\n    const pointer = exports.__new(value.byteLength, ${arrayBufferId}) >>> 0;\n    new Uint8Array(memory.buffer).set(new Uint8Array(value), pointer);\n    return pointer;\n  }\n`);\n    }\n    if (this.needsLiftString) {\n      let objectInstance = program.OBJECTInstance;\n      let rtSizeOffset = objectInstance.offsetof(\"rtSize\") - objectInstance.nextMemoryOffset;\n      let chunkSize = 1024;\n      sb.push(`  function __liftString(pointer) {\n    if (!pointer) return null;\n    const\n      end = pointer + new Uint32Array(memory.buffer)[pointer - ${-rtSizeOffset} >>> 2] >>> 1,\n      memoryU16 = new Uint16Array(memory.buffer);\n    let\n      start = pointer >>> 1,\n      string = \"\";\n    while (end - start > ${chunkSize}) string += String.fromCharCode(...memoryU16.subarray(start, start += ${chunkSize}));\n    return string + String.fromCharCode(...memoryU16.subarray(start, end));\n  }\n`);\n    }\n    if (this.needsLowerString) {\n      let stringId = program.stringInstance.id;\n      sb.push(`  function __lowerString(value) {\n    if (value == null) return 0;\n    const\n      length = value.length,\n      pointer = exports.__new(length << 1, ${stringId}) >>> 0,\n      memoryU16 = new Uint16Array(memory.buffer);\n    for (let i = 0; i < length; ++i) memoryU16[(pointer >>> 1) + i] = value.charCodeAt(i);\n    return pointer;\n  }\n`);\n    }\n    if (this.needsLiftArray) {\n      let dataStartOffset = program.arrayBufferViewInstance.offsetof(\"dataStart\");\n      let lengthOffset = program.arrayBufferViewInstance.nextMemoryOffset;\n      sb.push(`  function __liftArray(liftElement, align, pointer) {\n    if (!pointer) return null;\n    const\n      memoryU32 = new Uint32Array(memory.buffer),\n      dataStart = memoryU32[pointer + ${dataStartOffset} >>> 2],\n      length = memoryU32[pointer + ${lengthOffset} >>> 2],\n      values = new Array(length);\n    for (let i = 0; i < length; ++i) values[i] = liftElement(dataStart + (i << align >>> 0));\n    return values;\n  }\n`);\n    }\n    if (this.needsLowerArray) {\n      let arrayBufferId = program.arrayBufferInstance.id;\n      let arrayBufferViewInstance = program.arrayBufferViewInstance;\n      let arraySize = arrayBufferViewInstance.nextMemoryOffset + 4; // + length\n      let bufferOffset = arrayBufferViewInstance.offsetof(\"buffer\");\n      let dataStartOffset = arrayBufferViewInstance.offsetof(\"dataStart\");\n      let byteLengthOffset = arrayBufferViewInstance.offsetof(\"byteLength\");\n      let lengthOffset = byteLengthOffset + 4;\n      sb.push(`  function __lowerArray(lowerElement, id, align, values) {\n    if (values == null) return 0;\n    const\n      length = values.length,\n      buffer = exports.__pin(exports.__new(length << align, ${arrayBufferId})) >>> 0,\n      header = exports.__pin(exports.__new(${arraySize}, id)) >>> 0,\n      memoryU32 = new Uint32Array(memory.buffer);\n    memoryU32[header + ${bufferOffset} >>> 2] = buffer;\n    memoryU32[header + ${dataStartOffset} >>> 2] = buffer;\n    memoryU32[header + ${byteLengthOffset} >>> 2] = length << align;\n    memoryU32[header + ${lengthOffset} >>> 2] = length;\n    for (let i = 0; i < length; ++i) lowerElement(buffer + (i << align >>> 0), values[i]);\n    exports.__unpin(buffer);\n    exports.__unpin(header);\n    return header;\n  }\n`);\n    }\n    if (this.needsLiftTypedArray) {\n      let arrayBufferViewInstance = program.arrayBufferViewInstance;\n      let dataStartOffset = arrayBufferViewInstance.offsetof(\"dataStart\");\n      let byteLengthOffset = arrayBufferViewInstance.offsetof(\"byteLength\");\n      sb.push(`  function __liftTypedArray(constructor, pointer) {\n    if (!pointer) return null;\n    const memoryU32 = new Uint32Array(memory.buffer);\n    return new constructor(\n      memory.buffer,\n      memoryU32[pointer + ${dataStartOffset} >>> 2],\n      memoryU32[pointer + ${byteLengthOffset} >>> 2] / constructor.BYTES_PER_ELEMENT\n    ).slice();\n  }\n`);\n    }\n    if (this.needsLowerTypedArray) {\n      let arrayBufferId = program.arrayBufferInstance.id;\n      let arrayBufferViewInstance = program.arrayBufferViewInstance;\n      let size = arrayBufferViewInstance.nextMemoryOffset;\n      let bufferOffset = arrayBufferViewInstance.offsetof(\"buffer\");\n      let dataStartOffset = arrayBufferViewInstance.offsetof(\"dataStart\");\n      let byteLengthOffset = arrayBufferViewInstance.offsetof(\"byteLength\");\n      sb.push(`  function __lowerTypedArray(constructor, id, align, values) {\n    if (values == null) return 0;\n    const\n      length = values.length,\n      buffer = exports.__pin(exports.__new(length << align, ${arrayBufferId})) >>> 0,\n      header = exports.__new(${size}, id) >>> 0,\n      memoryU32 = new Uint32Array(memory.buffer);\n    memoryU32[header + ${bufferOffset} >>> 2] = buffer;\n    memoryU32[header + ${dataStartOffset} >>> 2] = buffer;\n    memoryU32[header + ${byteLengthOffset} >>> 2] = length << align;\n    new constructor(memory.buffer, buffer, length).set(values);\n    exports.__unpin(buffer);\n    return header;\n  }\n`);\n    }\n    if (this.needsLiftStaticArray) {\n      let objectInstance = program.OBJECTInstance;\n      let rtSizeOffset = objectInstance.offsetof(\"rtSize\") - objectInstance.nextMemoryOffset;\n      sb.push(`  function __liftStaticArray(liftElement, align, pointer) {\n    if (!pointer) return null;\n    const\n      length = new Uint32Array(memory.buffer)[pointer - ${-rtSizeOffset} >>> 2] >>> align,\n      values = new Array(length);\n    for (let i = 0; i < length; ++i) values[i] = liftElement(pointer + (i << align >>> 0));\n    return values;\n  }\n`);\n    }\n    if (this.needsLowerStaticArray) {\n      sb.push(`  function __lowerStaticArray(lowerElement, id, align, values, typedConstructor) {\n    if (values == null) return 0;\n    const\n      length = values.length,\n      buffer = exports.__pin(exports.__new(length << align, id)) >>> 0;\n    if (typedConstructor) {\n      new typedConstructor(memory.buffer, buffer, length).set(values);\n    } else {\n      for (let i = 0; i < length; i++) lowerElement(buffer + (i << align >>> 0), values[i]);\n    }\n    exports.__unpin(buffer);\n    return buffer;\n  }\n`);\n    }\n    if (this.needsLiftInternref || this.needsLowerInternref) {\n      sb.push(\"  class Internref extends Number {}\\n\");\n    }\n    if (this.needsLiftInternref) {\n      this.needsRetain = true;\n      this.needsRelease = true;\n      sb.push(`  const registry = new FinalizationRegistry(__release);\n  function __liftInternref(pointer) {\n    if (!pointer) return null;\n    const sentinel = new Internref(__retain(pointer));\n    registry.register(sentinel, pointer);\n    return sentinel;\n  }\n`);\n    }\n    if (this.needsLowerInternref) {\n      sb.push(`  function __lowerInternref(value) {\n    if (value == null) return 0;\n    if (value instanceof Internref) return value.valueOf();\n    throw TypeError(\"internref expected\");\n  }\n`);\n    }\n    if (this.needsRetain || this.needsRelease) {\n      sb.push(`  const refcounts = new Map();\n`);\n    }\n    if (this.needsRetain) {\n      sb.push(`  function __retain(pointer) {\n    if (pointer) {\n      const refcount = refcounts.get(pointer);\n      if (refcount) refcounts.set(pointer, refcount + 1);\n      else refcounts.set(exports.__pin(pointer), 1);\n    }\n    return pointer;\n  }\n`);\n    }\n    if (this.needsRelease) {\n      sb.push(`  function __release(pointer) {\n    if (pointer) {\n      const refcount = refcounts.get(pointer);\n      if (refcount === 1) exports.__unpin(pointer), refcounts.delete(pointer);\n      else if (refcount) refcounts.set(pointer, refcount - 1);\n      else throw Error(\\`invalid refcount '\\${refcount}' for reference '\\${pointer}'\\`);\n    }\n  }\n`);\n    }\n    if (this.needsNotNull) {\n      sb.push(`  function __notnull() {\n    throw TypeError(\"value must not be null\");\n  }\n`);\n    }\n\n    var exportStart = options.exportStart;\n    if (exportStart) {\n      sb.push(`  exports.${exportStart}();\\n`);\n    }\n\n    if (hasAdaptedExports) {\n      sb.push(\"  return adaptedExports;\\n}\\n\");\n    } else {\n      sb.push(\"  return exports;\\n}\\n\");\n    }\n    --this.indentLevel;\n    assert(this.indentLevel == 0);\n\n    if (this.esm) {\n      sb.push(\"export const {\\n  \");\n      if (this.program.options.exportMemory) {\n        sb.push(\"memory,\\n  \");\n      }\n      if (this.program.options.exportTable) {\n        sb.push(\"table,\\n  \");\n      }\n      for (let i = 0, k = exports.length; i < k; ++i) {\n        if (i > 0) sb.push(\",\\n  \");\n        sb.push(exports[i]);\n      }\n      sb.push(`\n} = await (async url => instantiate(\n  await (async () => {\n    try { return await globalThis.WebAssembly.compileStreaming(globalThis.fetch(url)); }\n    catch { return globalThis.WebAssembly.compile(await (await import(\"node:fs/promises\")).readFile(url)); }\n  })(), {\n`);\n      let needsMaybeDefault = false;\n      let importExpr = new Array<string>();\n      for (let _keys = Map_keys(mappings), i = 0, k = _keys.length; i < k; ++i) {\n        let moduleName = _keys[i];\n        if (moduleName == \"env\") {\n          indent(sb, 2);\n          sb.push(\"env: globalThis,\\n\");\n        } else {\n          let moduleId = this.ensureModuleId(moduleName);\n          indent(sb, 2);\n          if (isIdentifier(moduleName)) {\n            sb.push(moduleName);\n          } else {\n            sb.push(\"\\\"\");\n            sb.push(escapeString(moduleName, CharCode.DOUBLEQUOTE));\n            sb.push(\"\\\"\");\n          }\n          sb.push(\": __maybeDefault(__import\");\n          sb.push(moduleId.toString());\n          sb.push(\"),\\n\");\n          importExpr.push(\"import * as __import\");\n          importExpr.push(moduleId.toString());\n          importExpr.push(\" from \\\"\");\n          importExpr.push(escapeString(moduleName, CharCode.DOUBLEQUOTE));\n          importExpr.push(\"\\\";\\n\");\n          needsMaybeDefault = true;\n        }\n      }\n      sb[0] = importExpr.join(\"\");\n      sb.push(`  }\n))(new URL(\"${escapeString(options.basenameHint, CharCode.DOUBLEQUOTE)}.wasm\", import.meta.url));\n`);\n      if (needsMaybeDefault) {\n        sb.push(`function __maybeDefault(module) {\n  return typeof module.default === \"object\" && Object.keys(module).length == 1\n    ? module.default\n    : module;\n}\n`);\n      }\n    }\n    return sb.join(\"\");\n  }\n\n  ensureModuleId(moduleName: string): i32 {\n    if (moduleName == \"env\") return -1;\n    var importMap = this.importMappings;\n    let moduleId = importMap.has(moduleName)\n      ? i32(importMap.get(moduleName))\n      : importMap.size;\n    importMap.set(moduleName, moduleId);\n    return moduleId;\n  }\n\n  /** Lifts a WebAssembly value to a JavaScript value. */\n  makeLiftFromValue(name: string, type: Type, sb: string[] = this.sb): void {\n    if (type.isInternalReference) {\n      // Lift reference types\n      const clazz = assert(type.getClassOrWrapper(this.program));\n      if (clazz.extends(this.program.arrayBufferInstance.prototype)) {\n        sb.push(\"__liftBuffer(\");\n        this.needsLiftBuffer = true;\n      } else if (clazz.extends(this.program.stringInstance.prototype)) {\n        sb.push(\"__liftString(\");\n        this.needsLiftString = true;\n      } else if (clazz.extends(this.program.arrayPrototype)) {\n        let valueType = clazz.getArrayValueType();\n        sb.push(\"__liftArray(\");\n        this.makeLiftFromMemory(valueType, sb);\n        sb.push(\", \");\n        sb.push(valueType.alignLog2.toString());\n        sb.push(\", \");\n        this.needsLiftArray = true;\n      } else if (clazz.extends(this.program.staticArrayPrototype)) {\n        let valueType = clazz.getArrayValueType();\n        sb.push(\"__liftStaticArray(\");\n        this.makeLiftFromMemory(valueType, sb);\n        sb.push(\", \");\n        sb.push(valueType.alignLog2.toString());\n        sb.push(\", \");\n        this.needsLiftStaticArray = true;\n      } else if (clazz.extends(this.program.arrayBufferViewInstance.prototype)) {\n        sb.push(\"__liftTypedArray(\");\n        if (clazz.name == \"Uint64Array\") {\n          sb.push(\"BigUint64Array\");\n        } else if (clazz.name == \"Int64Array\") {\n          sb.push(\"BigInt64Array\");\n        } else {\n          sb.push(clazz.name); // TODO: what if extended?\n        }\n        sb.push(\", \");\n        this.needsLiftTypedArray = true;\n      } else if (isPlainObject(clazz)) {\n        sb.push(\"__liftRecord\");\n        sb.push(clazz.id.toString());\n        sb.push(\"(\");\n        if (!this.deferredLifts.has(clazz)) {\n          this.deferredLifts.add(clazz);\n          let prevIndentLevel = this.indentLevel;\n          this.indentLevel = 1;\n          this.deferredCode.push(this.makeLiftRecord(clazz));\n          this.indentLevel = prevIndentLevel;\n        }\n      } else {\n        sb.push(\"__liftInternref(\");\n        this.needsLiftInternref = true;\n      }\n      sb.push(name);\n      if (!name.startsWith(\"new Uint32Array(\")) {\n        // no need to coerce when lifting with indirection\n        sb.push(\" >>> 0\");\n      }\n      sb.push(\")\");\n    } else {\n      // Lift basic plain types\n      if (type == Type.bool) {\n        sb.push(`${name} != 0`);\n      } else if (type.isUnsignedIntegerValue && type.size >= 32) {\n        sb.push(type.size == 64 ? `BigInt.asUintN(64, ${name})` : `${name} >>> 0`);\n      } else {\n        sb.push(name);\n      }\n    }\n  }\n\n  /** Lowers a JavaScript value to a WebAssembly value. */\n  makeLowerToValue(name: string, type: Type, sb: string[] = this.sb): void {\n    if (type.isInternalReference) {\n      // Lower reference types\n      const clazz = assert(type.getClassOrWrapper(this.program));\n      if (clazz.extends(this.program.arrayBufferInstance.prototype)) {\n        sb.push(\"__lowerBuffer(\");\n        this.needsLowerBuffer = true;\n      } else if (clazz.extends(this.program.stringInstance.prototype)) {\n        sb.push(\"__lowerString(\");\n        this.needsLowerString = true;\n      } else if (clazz.extends(this.program.arrayPrototype)) {\n        let valueType = clazz.getArrayValueType();\n        sb.push(\"__lowerArray(\");\n        this.makeLowerToMemory(valueType, sb);\n        sb.push(\", \");\n        sb.push(clazz.id.toString());\n        sb.push(\", \");\n        sb.push(clazz.getArrayValueType().alignLog2.toString());\n        sb.push(\", \");\n        this.needsLowerArray = true;\n      } else if (clazz.extends(this.program.staticArrayPrototype)) {\n        let valueType = clazz.getArrayValueType();\n        sb.push(\"__lowerStaticArray(\");\n        this.makeLowerToMemory(valueType, sb);\n        sb.push(\", \");\n        sb.push(clazz.id.toString());\n        sb.push(\", \");\n        sb.push(valueType.alignLog2.toString());\n        sb.push(\", \");\n        this.needsLowerStaticArray = true;\n      } else if (clazz.extends(this.program.arrayBufferViewInstance.prototype)) {\n        let valueType = clazz.getArrayValueType();\n        sb.push(\"__lowerTypedArray(\");\n        if (valueType == Type.u64) {\n          sb.push(\"BigUint64Array\");\n        } else if (valueType == Type.i64) {\n          sb.push(\"BigInt64Array\");\n        } else {\n          sb.push(clazz.name); // TODO: what if extended?\n        }\n        sb.push(\", \");\n        sb.push(clazz.id.toString());\n        sb.push(\", \");\n        sb.push(clazz.getArrayValueType().alignLog2.toString());\n        sb.push(\", \");\n        this.needsLowerTypedArray = true;\n      } else if (isPlainObject(clazz)) {\n        sb.push(\"__lowerRecord\");\n        sb.push(clazz.id.toString());\n        sb.push(\"(\");\n        if (!this.deferredLowers.has(clazz)) {\n          this.deferredLowers.add(clazz);\n          let prevIndentLevel = this.indentLevel;\n          this.indentLevel = 1;\n          this.deferredCode.push(this.makeLowerRecord(clazz));\n          this.indentLevel = prevIndentLevel;\n        }\n      } else {\n        sb.push(\"__lowerInternref(\");\n        this.needsLowerInternref = true;\n      }\n      sb.push(name);\n      if (clazz.extends(this.program.staticArrayPrototype)) {\n        // optional last argument for __lowerStaticArray\n        let valueType = clazz.getArrayValueType();\n        if (valueType.isNumericValue) {\n          sb.push(\", \");\n          if (valueType == Type.u8 || valueType == Type.bool) {\n            sb.push(\"Uint8Array\");\n          } else if (valueType == Type.i8) {\n            sb.push(\"Int8Array\");\n          } else if (valueType == Type.u16) {\n            sb.push(\"Uint16Array\");\n          } else if (valueType == Type.i16) {\n            sb.push(\"Int16Array\");\n          } else if (valueType == Type.u32 || valueType == Type.usize32) {\n            sb.push(\"Uint32Array\");\n          } else if (valueType == Type.i32 || valueType == Type.isize32) {\n            sb.push(\"Int32Array\");\n          } else if (valueType == Type.u64 || valueType == Type.usize64) {\n            sb.push(\"BigUint64Array\");\n          } else if (valueType == Type.i64 || valueType == Type.isize64) {\n            sb.push(\"BigInt64Array\");\n          } else if (valueType == Type.f32) {\n            sb.push(\"Float32Array\");\n          } else if (valueType == Type.f64) {\n            sb.push(\"Float64Array\");\n          } else {\n            // unreachable\n            assert(false);\n          }\n        }\n      }\n      sb.push(\")\");\n      if (!type.is(TypeFlags.NULLABLE)) {\n        this.needsNotNull = true;\n        sb.push(\" || __notnull()\");\n      }\n    } else {\n      // Lower basic types\n      sb.push(name); // basic value\n      if (type.isIntegerValue && type.size == 64) {\n        sb.push(\" || 0n\");\n      } else if (type == Type.bool) {\n        // may be stored to an Uint8Array, make sure to store 1/0\n        sb.push(\" ? 1 : 0\");\n      }\n    }\n  }\n\n  /** Lifts a WebAssembly memory address to a JavaScript value. */\n  makeLiftFromMemory(valueType: Type, sb: string[] = this.sb, target: string | null = null): void {\n    if (!target) {\n      sb.push(\"pointer => \");\n      target = \"pointer\";\n    }\n    if (valueType.isInternalReference) {\n      let expr = new Array<string>();\n      expr.push(\"new Uint32Array(memory.buffer)[\");\n      expr.push(target);\n      expr.push(\" >>> 2]\");\n      this.makeLiftFromValue(expr.join(\"\"), valueType, sb);\n    } else {\n      if (valueType == Type.i8) {\n        sb.push(\"new Int8Array(memory.buffer)[\");\n      } else if (valueType == Type.u8 || valueType == Type.bool) {\n        sb.push(\"new Uint8Array(memory.buffer)[\");\n      } else if (valueType == Type.i16) {\n        sb.push(\"new Int16Array(memory.buffer)[\");\n      } else if (valueType == Type.u16) {\n        sb.push(\"new Uint16Array(memory.buffer)[\");\n      } else if (valueType == Type.i32 || valueType == Type.isize32) {\n        sb.push(\"new Int32Array(memory.buffer)[\");\n      } else if (valueType == Type.u32 || valueType == Type.usize32) {\n        sb.push(\"new Uint32Array(memory.buffer)[\");\n      } else if (valueType == Type.i64 || valueType == Type.isize64) {\n        sb.push(\"new BigInt64Array(memory.buffer)[\");\n      } else if (valueType == Type.u64 || valueType == Type.usize64) {\n        sb.push(\"new BigUint64Array(memory.buffer)[\");\n      } else if (valueType == Type.f32) {\n        sb.push(\"new Float32Array(memory.buffer)[\");\n      } else if (valueType == Type.f64) {\n        sb.push(\"new Float64Array(memory.buffer)[\");\n      } else {\n        sb.push(\"{ throw Error(\\\"unsupported type\\\"); }\");\n        return;\n      }\n      sb.push(target);\n      sb.push(\" >>> \");\n      sb.push(valueType.alignLog2.toString());\n      sb.push(\"]\");\n      if (valueType == Type.bool) {\n        sb.push(\" != 0\");\n      }\n    }\n  }\n\n  /** Lowers a JavaScript value to a WebAssembly memory address. */\n  makeLowerToMemory(valueType: Type, sb: string[] = this.sb, targetName: string | null = null, valueName: string | null = null): void {\n    let skipTail = true;\n    if (!targetName  || !valueName) {\n      sb.push(\"(pointer, value) => { \");\n      targetName = \"pointer\";\n      valueName = \"value\";\n      skipTail = false;\n    }\n    if (valueType.isInternalReference) {\n      sb.push(\"new Uint32Array(memory.buffer)[\");\n    } else {\n      if (valueType == Type.i8) {\n        sb.push(\"new Int8Array(memory.buffer)[\");\n      } else if (valueType == Type.u8 || valueType == Type.bool) {\n        sb.push(\"new Uint8Array(memory.buffer)[\");\n      } else if (valueType == Type.i16) {\n        sb.push(\"new Int16Array(memory.buffer)[\");\n      } else if (valueType == Type.u16) {\n        sb.push(\"new Uint16Array(memory.buffer)[\");\n      } else if (valueType == Type.i32 || valueType == Type.isize32) {\n        sb.push(\"new Int32Array(memory.buffer)[\");\n      } else if (valueType == Type.u32 || valueType == Type.usize32) {\n        sb.push(\"new Uint32Array(memory.buffer)[\");\n      } else if (valueType == Type.i64 || valueType == Type.isize64) {\n        sb.push(\"new BigInt64Array(memory.buffer)[\");\n      } else if (valueType == Type.u64 || valueType == Type.usize64) {\n        sb.push(\"new BigUint64Array(memory.buffer)[\");\n      } else if (valueType == Type.f32) {\n        sb.push(\"new Float32Array(memory.buffer)[\");\n      } else if (valueType == Type.f64) {\n        sb.push(\"new Float64Array(memory.buffer)[\");\n      } else {\n        if (skipTail) {\n          sb.push(\"(() => { throw Error(\\\"unsupported type\\\") })()\");\n        } else {\n          sb.push(\"throw Error(\\\"unsupported type\\\"); }\");\n        }\n        return;\n      }\n    }\n    sb.push(targetName);\n    sb.push(\" >>> \");\n    sb.push(valueType.alignLog2.toString());\n    sb.push(\"] = \");\n    this.makeLowerToValue(valueName, valueType, sb);\n    if (!skipTail) sb.push(\"; }\");\n  }\n\n  makeLiftRecord(clazz: Class): string {\n    assert(isPlainObject(clazz));\n    var sb = new Array<string>();\n    indent(sb, this.indentLevel);\n    sb.push(\"function __liftRecord\");\n    sb.push(clazz.id.toString());\n    sb.push(\"(pointer) {\\n\");\n    indent(sb, ++this.indentLevel);\n    sb.push(\"// \");\n    sb.push(clazz.type.toString());\n    sb.push(\"\\n\");\n    indent(sb, this.indentLevel);\n    sb.push(\"// Hint: Opt-out from lifting as a record by providing an empty constructor\\n\");\n    indent(sb, this.indentLevel);\n    sb.push(\"if (!pointer) return null;\\n\");\n    indent(sb, this.indentLevel++);\n    sb.push(\"return {\\n\");\n    var members = clazz.members;\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = _keys[i];\n        let member = assert(members.get(memberName));\n        if (member.kind != ElementKind.FIELD) continue;\n        let field = <Field>member;\n        indent(sb, this.indentLevel);\n        sb.push(field.name);\n        sb.push(\": \");\n        this.makeLiftFromMemory(field.type, sb, \"pointer + \" + field.memoryOffset.toString());\n        sb.push(\",\\n\");\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"};\\n\");\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n\n  makeLowerRecord(clazz: Class): string {\n    assert(isPlainObject(clazz));\n    var sb = new Array<string>();\n    indent(sb, this.indentLevel);\n    sb.push(\"function __lowerRecord\");\n    sb.push(clazz.id.toString());\n    sb.push(\"(value) {\\n\");\n    indent(sb, ++this.indentLevel);\n    sb.push(\"// \");\n    sb.push(clazz.type.toString());\n    sb.push(\"\\n\");\n    indent(sb, this.indentLevel);\n    sb.push(\"// Hint: Opt-out from lowering as a record by providing an empty constructor\\n\");\n    indent(sb, this.indentLevel);\n    sb.push(\"if (value == null) return 0;\\n\");\n    indent(sb, this.indentLevel);\n    sb.push(\"const pointer = exports.__pin(exports.__new(\");\n    sb.push(clazz.nextMemoryOffset.toString());\n    sb.push(\", \");\n    sb.push(clazz.id.toString());\n    sb.push(\"));\\n\");\n    var members = clazz.members;\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = _keys[i];\n        let member = assert(members.get(memberName));\n        if (member.kind != ElementKind.FIELD) continue;\n        let field = <Field>member;\n        indent(sb, this.indentLevel);\n        this.makeLowerToMemory(field.type, sb, \"pointer + \" + field.memoryOffset.toString(), \"value.\" + memberName);\n        sb.push(\";\\n\");\n      }\n    }\n    indent(sb, this.indentLevel);\n    sb.push(\"exports.__unpin(pointer);\\n\");\n    indent(sb, this.indentLevel);\n    sb.push(\"return pointer;\\n\");\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n// Helpers\n\nenum Mode {\n  IMPORT,\n  EXPORT\n}\n\nfunction isPlainValue(type: Type, kind: Mode): bool {\n  if (kind == Mode.IMPORT) {\n    // may be stored to an Uint8Array, make sure to store 1/0\n    if (type == Type.bool) return false;\n    // requires coercion of undefined to 0n\n    if (type.isIntegerValue && type.size == 64) return false;\n  } else {\n    // requires coercion from 1/0 to true/false\n    if (type == Type.bool) return false;\n    // requires coercion from signed to unsigned for u32 and u64.\n    // Note, u8 and u16 doesn't overflow in native type so mark as plain\n    if (type.isUnsignedIntegerValue && type.size >= 32) return false;\n  }\n  return !type.isInternalReference;\n}\n\nfunction isPlainFunction(signature: Signature, mode: Mode): bool {\n  var parameterTypes = signature.parameterTypes;\n  var inverseMode = mode == Mode.IMPORT ? Mode.EXPORT : Mode.IMPORT;\n  if (!isPlainValue(signature.returnType, mode)) return false;\n  for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n    if (!isPlainValue(parameterTypes[i], inverseMode)) return false;\n  }\n  return true;\n}\n\nfunction isPlainObject(clazz: Class): bool {\n  // A plain object does not inherit and does not have a constructor or private properties\n  if (clazz.base) return false;\n  var members = clazz.members;\n  if (members) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = _values[i];\n      if (member.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED)) return false;\n      if (member.is(CommonFlags.CONSTRUCTOR)) {\n        // a generated constructor is ok\n        if (member.declaration.range != member.program.nativeRange) return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction indentText(text: string, indentLevel: i32, sb: string[], butFirst: bool = false): void {\n  var lineStart = 0;\n  var length = text.length;\n  var pos = 0;\n  while (pos < length) {\n    if (text.charCodeAt(pos) == CharCode.LINEFEED) {\n      if (butFirst) butFirst = false;\n      else indent(sb, indentLevel);\n      sb.push(text.substring(lineStart, lineStart = pos + 1));\n    }\n    ++pos;\n  }\n  if (lineStart < length) {\n    if (!butFirst) indent(sb, indentLevel);\n    sb.push(text.substring(lineStart));\n  }\n}\n\nexport function liftRequiresExportRuntime(type: Type): bool {\n  // TODO: enable v128 in signatures in future\n  // if (type.isVectorValue) return true;\n  if (!type.isInternalReference) return false;\n  let clazz = type.classReference;\n  if (!clazz) {\n    // functions lift as internref using __pin\n    assert(type.signatureReference);\n    return true;\n  }\n  let program = clazz.program;\n  // flat collections lift via memory copy\n  if (\n    clazz.extends(program.arrayBufferInstance.prototype) ||\n    clazz.extends(program.stringInstance.prototype) ||\n    clazz.extends(program.arrayBufferViewInstance.prototype)\n  ) {\n    return false;\n  }\n  // nested collections lift depending on element type\n  if (\n    clazz.extends(program.arrayPrototype) ||\n    clazz.extends(program.staticArrayPrototype)\n  ) {\n    return liftRequiresExportRuntime(clazz.getArrayValueType());\n  }\n  // complex objects lift as internref using __pin. plain objects may or may not\n  // involve the runtime: assume that they do to avoid potentially costly checks\n  return true;\n}\n\nexport function lowerRequiresExportRuntime(type: Type): bool {\n  // TODO: enable v128 in signatures in future\n  // if (type.isVectorValue) return true;\n  if (!type.isInternalReference) return false;\n  let clazz = type.classReference;\n  if (!clazz) {\n    // lowers by reference\n    assert(type.signatureReference);\n    return false;\n  }\n  // lowers using __new\n  let program = clazz.program;\n  if (\n    clazz.extends(program.arrayBufferInstance.prototype) ||\n    clazz.extends(program.stringInstance.prototype) ||\n    clazz.extends(program.arrayBufferViewInstance.prototype) ||\n    clazz.extends(program.arrayPrototype) ||\n    clazz.extends(program.staticArrayPrototype)\n  ) {\n    return true;\n  }\n  // complex objects lower via internref by reference,\n  // while plain objects lower using __new\n  return isPlainObject(clazz);\n}\n", "/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  function_builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf\n} from \"./builtins\";\n\nimport {\n  Range,\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  TypeRef,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueV128,\n  getBlockChildCount,\n  getBlockChildAt,\n  getBlockName,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  getSideEffects,\n  SideEffects,\n  SwitchBuilder,\n  ExpressionRunnerFlags,\n  isConstZero,\n  isConstNegZero,\n  isConstExpressionNaN\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  STATIC_DELIMITER,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target,\n  Runtime,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  DeclaredElement,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  FieldFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n  DecoratorNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  TemplateLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  CompiledExpression,\n\n  TypeNode,\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToRefs\n} from \"./types\";\n\nimport {\n  BitSet,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  writeV128,\n  cloneMap,\n  isPowerOf2,\n  readI32,\n  isIdentifier,\n  accuratePow64,\n  v128_zero,\n  v128_ones,\n} from \"./util\";\n\nimport {\n  RtraceMemory\n} from \"./passes/rtrace\";\n\nimport {\n  ShadowStackPass\n} from \"./passes/shadowstack\";\n\nimport {\n  liftRequiresExportRuntime,\n  lowerRequiresExportRuntime\n} from \"./bindings/js\";\n\n/** Compiler options. */\nexport class Options {\n  constructor() { /* as internref */ }\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** Runtime type. Defaults to Incremental GC. */\n  runtime: Runtime = Runtime.Incremental;\n  /** If true, indicates that debug information will be emitted by Binaryen. */\n  debugInfo: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** It true, exports the memory to the embedder. */\n  exportMemory: bool = true;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** Initial memory size, in pages. */\n  initialMemory: u32 = 0;\n  /** Maximum memory size, in pages. */\n  maximumMemory: u32 = 0;\n  /** If true, memory is declared as shared. */\n  sharedMemory: bool = false;\n  /** If true, imported memory is zero filled. */\n  zeroFilledMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If given, exports the start function instead of calling it implicitly. */\n  exportStart: string | null = null;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** Static table start offset. */\n  tableBase: u32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS\n                    | Feature.SIGN_EXTENSION\n                    | Feature.NONTRAPPING_F2I\n                    | Feature.BULK_MEMORY;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: u32 = 0;\n  /** If true, exports the runtime helpers. */\n  exportRuntime: bool = false;\n  /** Stack size in bytes, if using a stack. */\n  stackSize: i32 = 0;\n  /** Semantic major bundle version from root package.json */\n  bundleMajorVersion: i32 = 0;\n  /** Semantic minor bundle version from root package.json */\n  bundleMinorVersion: i32 = 0;\n  /** Semantic patch bundle version from root package.json */\n  bundlePatchVersion: i32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n  /** Hinted basename. */\n  basenameHint: string = \"output\";\n  /** Hinted bindings generation. */\n  bindingsHint: bool = false;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the size type reference matching the target. */\n  get sizeTypeRef(): TypeRef {\n    return this.target == Target.WASM64 ? TypeRef.I64 : TypeRef.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 4,\n  /** Indicates that the value will become `this` of a property access or instance call. */\n  IS_THIS = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires data setup. */\n  DATA = 1 << 0,\n  /** Requires a stack. */\n  STACK = 1 << 1,\n  /** Requires heap setup. */\n  HEAP = 1 << 2,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 3,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 4,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 5,\n  /** Requires the setArgumentsLength export. */\n  setArgumentsLength = 1 << 6\n}\n\n/** Imported default names of compiler-generated elements. */\nexport namespace ImportNames {\n  /** Name of the default namespace */\n  export const DefaultNamespace = \"env\";\n  /** Name of the memory instance, if imported. */\n  export const Memory = \"memory\";\n  /** Name of the table instance, if imported. */\n  export const Table = \"table\";\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the memory instance, if exported. */\n  export const Memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const Table = \"table\";\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n}\n\n/** Functions to export if `--exportRuntime` is set. */\nconst runtimeFunctions = [ \"__new\", \"__pin\", \"__unpin\", \"__collect\" ];\n/** Globals to export if `--exportRuntime` is set. */\nconst runtimeGlobals = [ \"__rtti_base\" ];\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: Function[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled functions. */\n  lazyFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Virtually called stubs that may have overloads. */\n  virtualStubs: Set<Function> = new Set();\n  /** Elements currently undergoing compilation. */\n  pendingElements: Set<Element> = new Set();\n  /** Elements, that are module exports, already processed */\n  doneModuleExports: Set<Element> = new Set();\n  /** Shadow stack reference. */\n  shadowStack!: ShadowStackPass;\n  /** Whether the module has custom function exports. */\n  hasCustomFunctionExports: bool = false;\n  /** Whether the module would use the exported runtime to lift/lower. */\n  desiresExportRuntime: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create(options.stackSize > 0, options.sizeTypeRef);\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGlobals;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.TruncSat;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    if (options.hasFeature(Feature.GC)) featureFlags |= FeatureFlags.GC;\n    if (options.hasFeature(Feature.MEMORY64)) featureFlags |= FeatureFlags.Memory64;\n    if (options.hasFeature(Feature.FUNCTION_REFERENCES)) featureFlags |= FeatureFlags.FunctionReferences;\n    if (options.hasFeature(Feature.RELAXED_SIMD)) featureFlags |= FeatureFlags.RelaxedSIMD;\n    if (options.hasFeature(Feature.EXTENDED_CONST)) featureFlags |= FeatureFlags.ExtendedConst;\n    module.setFeatures(featureFlags);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = new Array<ExpressionRef>();\n    this.shadowStack = new ShadowStackPass(this);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n    var resolver = this.resolver;\n    var hasShadowStack = options.stackSize > 0; // implies runtime=incremental\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize();\n\n    // obtain the main start function\n    var startFunctionInstance = this.currentFlow.actualFunction;\n    assert(startFunctionInstance.internalName == BuiltinNames.start);\n    var startFunctionBody = this.currentBody;\n    assert(startFunctionBody.length == 0);\n\n    // add mutable data, heap and rtti offset dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.data_end,  TypeRef.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.heap_base, TypeRef.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, TypeRef.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.data_end,  TypeRef.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.heap_base, TypeRef.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, TypeRef.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileModuleExports(file);\n      }\n    }\n\n    // compile and export runtime if requested or necessary\n    if (this.options.exportRuntime || (this.options.bindingsHint && this.desiresExportRuntime)) {\n      for (let i = 0, k = runtimeFunctions.length; i < k; ++i) {\n        let name = runtimeFunctions[i];\n        let instance = program.requireFunction(name);\n        if (this.compileFunction(instance) && !module.hasExport(name)) {\n          module.addFunctionExport(instance.internalName, name);\n        }\n      }\n      for (let i = 0, k = runtimeGlobals.length; i < k; ++i) {\n        let name = runtimeGlobals[i];\n        let instance = program.requireGlobal(name);\n        if (this.compileGlobal(instance) && !module.hasExport(name)) {\n          module.addGlobalExport(instance.internalName, name);\n        }\n      }\n    }\n\n    // compile lazy functions\n    var lazyFunctions = this.lazyFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual stubs\n    var functionTable = this.functionTable;\n    var virtualStubs = this.virtualStubs;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instance = functionTable[i];\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        assert(instance.is(CommonFlags.INSTANCE));\n        functionTable[i] = this.ensureVirtualStub(instance); // includes varargs stub\n      } else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n        functionTable[i] = this.ensureVarargsStub(instance);\n      }\n    }\n    var virtualStubsSeen = new Set<Function>();\n    do {\n      // virtual stubs and overloads have cross-dependencies on each other, in that compiling\n      // either may discover the respective other. do this in a loop until no more are found.\n      resolver.discoveredOverload = false;\n      for (let _values = Set_values(virtualStubs), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        let overloadInstances = resolver.resolveOverloads(instance);\n        if (overloadInstances) {\n          for (let i = 0, k = overloadInstances.length; i < k; ++i) {\n            this.compileFunction(overloadInstances[i]);\n          }\n        }\n        virtualStubsSeen.add(instance);\n      }\n    } while (virtualStubs.size > virtualStubsSeen.size || resolver.discoveredOverload);\n    virtualStubsSeen.clear();\n    for (let _values = Set_values(virtualStubs), i = 0, k = _values.length; i < k; ++i) {\n      this.finalizeVirtualStub(_values[i]);\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    var memoryOffset = i64_align(this.memoryOffset, options.usizeType.byteSize);\n\n    // finalize data\n    module.removeGlobal(BuiltinNames.data_end);\n    if ((this.runtimeFeatures & RuntimeFeatures.DATA) != 0 || hasShadowStack) {\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.data_end, TypeRef.I64, false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.data_end, TypeRef.I32, false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // finalize stack (grows down from __heap_base to __data_end)\n    module.removeGlobal(BuiltinNames.stack_pointer);\n    if ((this.runtimeFeatures & RuntimeFeatures.STACK) != 0 || hasShadowStack) {\n      memoryOffset = i64_align(\n        i64_add(memoryOffset, i64_new(options.stackSize)),\n        options.usizeType.byteSize\n      );\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.stack_pointer, TypeRef.I64, true,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.stack_pointer, TypeRef.I32, true,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // finalize heap\n    module.removeGlobal(BuiltinNames.heap_base);\n    if ((this.runtimeFeatures & RuntimeFeatures.HEAP) != 0 || hasShadowStack) {\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.heap_base, TypeRef.I64, false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.heap_base, TypeRef.I32, false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // setup default memory & table\n    this.initDefaultMemory(memoryOffset);\n    this.initDefaultTable();\n\n    // expose the arguments length helper if there are varargs exports\n    if (this.runtimeFeatures & RuntimeFeatures.setArgumentsLength) {\n      module.addFunction(BuiltinNames.setArgumentsLength, TypeRef.I32, TypeRef.None, null,\n        module.global_set(this.ensureArgumentsLength(), module.local_get(0, TypeRef.I32))\n      );\n      module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n    }\n\n    // NOTE: no more element compiles from here. may go to the start function!\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var exportStart = options.exportStart;\n    if (!startIsEmpty || exportStart != null) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && exportStart != null) {\n        module.addGlobal(BuiltinNames.started, TypeRef.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.global_set(BuiltinNames.started, module.i32(1))\n        );\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, TypeRef.I32),\n            module.return()\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.paramRefs,\n        signature.resultRefs,\n        typesToRefs(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (exportStart == null) module.setStart(funcRef);\n      else {\n        if (!isIdentifier(exportStart) || module.hasExport(exportStart)) {\n          this.error(\n            DiagnosticCode.Start_function_name_0_is_invalid_or_conflicts_with_another_export,\n            this.program.nativeRange, exportStart\n          );\n        } else {\n          module.addFunctionExport(startFunctionInstance.internalName, exportStart);\n        }\n      }\n    }\n\n    // Run custom passes\n    if (hasShadowStack) {\n      this.shadowStack.walkModule();\n    }\n    if (program.lookup(\"ASC_RTRACE\") != null) {\n      new RtraceMemory(this).walkModule();\n    }\n\n    return module;\n  }\n\n  private initDefaultMemory(memoryOffset: i64): void {\n    this.memoryOffset = memoryOffset;\n\n    var options = this.options;\n    var module = this.module;\n    var memorySegments = this.memorySegments;\n\n    var initialPages: u32 = 0;\n    var maximumPages = Module.UNLIMITED_MEMORY;\n    var isSharedMemory = false;\n\n    if (options.memoryBase /* is specified */ || memorySegments.length) {\n      initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n    }\n\n    if (options.initialMemory) {\n      if (options.initialMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        initialPages = options.initialMemory;\n      }\n    }\n\n    if (options.maximumMemory) {\n      if (options.maximumMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        maximumPages = options.maximumMemory;\n      }\n    }\n\n    if (options.sharedMemory) {\n      isSharedMemory = true;\n      if (!options.maximumMemory) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined,\n          null\n        );\n        isSharedMemory = false;\n      }\n      if (!options.hasFeature(Feature.THREADS)) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled,\n          null\n        );\n        isSharedMemory = false;\n      }\n    }\n\n    // check that we didn't exceed lowMemoryLimit already\n    var lowMemoryLimit32 = options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n\n    // Setup internal memory with default name \"0\"\n    module.setMemory(\n      initialPages,\n      maximumPages,\n      memorySegments,\n      options.target,\n      options.exportMemory ? ExportNames.Memory : null,\n      CommonNames.DefaultMemory,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) {\n      module.addMemoryImport(\n        CommonNames.DefaultMemory,\n        ImportNames.DefaultNamespace,\n        ImportNames.Memory,\n        isSharedMemory\n      );\n    }\n  }\n\n  private initDefaultTable(): void {\n    var options = this.options;\n    var module = this.module;\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\n        CommonNames.DefaultTable,\n        ImportNames.DefaultNamespace,\n        ImportNames.Table\n      );\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(CommonNames.DefaultTable, ExportNames.Table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up function table (first elem is blank)\n    var tableBase = options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    var functionTable = this.functionTable;\n    var functionTableNames = new Array<string>(functionTable.length);\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      functionTableNames[i] = functionTable[i].internalName;\n    }\n\n    var initialTableSize = <Index>tableBase + functionTable.length;\n    var maximumTableSize = Module.UNLIMITED_TABLE;\n\n    if (!(options.importTable || options.exportTable)) {\n      // use fixed size for non-imported and non-exported tables\n      maximumTableSize = initialTableSize;\n      if (options.willOptimize) {\n        // Hint for directize pass which indicate table's content will not change\n        // and can be better optimized\n        module.setPassArgument(\"directize-initial-contents-immutable\", \"true\");\n      }\n    }\n    module.addFunctionTable(\n      CommonNames.DefaultTable,\n      initialTableSize,\n      maximumTableSize,\n      functionTableNames,\n      module.i32(tableBase)\n    );\n  }\n\n  // === Exports ==================================================================================\n\n  /** Compiles the respective module exports for the specified entry file. */\n  private compileModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.compileModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.compileModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Compiles the respective module export(s) for the specified element. */\n  private compileModuleExport(name: string, element: DeclaredElement, prefix: string = \"\"): void {\n    var module = this.module;\n    switch (element.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // obtain the default instance\n        let functionPrototype = <FunctionPrototype>element;\n        if (!functionPrototype.is(CommonFlags.GENERIC)) {\n          let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n          if (functionInstance) {\n            this.compileModuleExport(name, functionInstance, prefix);\n          }\n          return;\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize varargs stub to fill in omitted arguments\n            functionInstance = this.ensureVarargsStub(functionInstance);\n            this.runtimeFeatures |= RuntimeFeatures.setArgumentsLength;\n          }\n          this.compileFunction(functionInstance);\n          if (functionInstance.is(CommonFlags.COMPILED)) {\n            let exportName = prefix + name;\n            if (!module.hasExport(exportName)) {\n              module.addFunctionExport(functionInstance.internalName, exportName);\n              this.hasCustomFunctionExports = true;\n              let hasManagedOperands = signature.hasManagedOperands;\n              if (hasManagedOperands) {\n                this.shadowStack.noteExport(exportName, signature.getManagedOperandIndices());\n              }\n              if (!this.desiresExportRuntime) {\n                let thisType = signature.thisType;\n                if (\n                  thisType && lowerRequiresExportRuntime(thisType) ||\n                  liftRequiresExportRuntime(signature.returnType)\n                ) {\n                  this.desiresExportRuntime = true;\n                } else {\n                  let parameterTypes = signature.parameterTypes;\n                  for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n                    if (lowerRequiresExportRuntime(parameterTypes[i])) {\n                      this.desiresExportRuntime = true;\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n            return;\n          }\n        }\n        break;\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.warning(\n            DiagnosticCode.Feature_0_is_not_enabled,\n            global.identifierNode.range, \"mutable-globals\"\n          );\n          return;\n        }\n        this.compileGlobal(global);\n        if (global.is(CommonFlags.COMPILED)) {\n          let exportName = prefix + name;\n          if (!module.hasExport(exportName)) {\n            module.addGlobalExport(element.internalName, exportName);\n            if (!this.desiresExportRuntime) {\n              let type = global.type;\n              if (\n                liftRequiresExportRuntime(type) ||\n                !global.is(CommonFlags.CONST) && lowerRequiresExportRuntime(type)\n              ) {\n                this.desiresExportRuntime = true;\n              }\n            }\n          }\n          if (global.type == Type.v128) {\n            this.warning(\n              DiagnosticCode.Exchange_of_0_values_is_not_supported_by_all_embeddings,\n              global.typeNode\n                ? assert(global.typeNode).range\n                : global.identifierNode.range,\n              \"v128\"\n            );\n          }\n          return;\n        }\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        let members = element.members;\n        if (members) {\n          let subPrefix = prefix + name + STATIC_DELIMITER;\n          for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(members.get(memberName));\n            if (!member.is(CommonFlags.PRIVATE)) {\n              this.compileModuleExport(memberName, member, subPrefix);\n            }\n          }\n        }\n        return;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Feature_0_is_not_enabled,\n            enumValue.identifierNode.range, \"mutable-globals\"\n          );\n          return;\n        }\n        if (enumValue.is(CommonFlags.COMPILED)) {\n          let exportName = prefix + name;\n          if (!module.hasExport(exportName)) {\n            module.addGlobalExport(element.internalName, exportName);\n          }\n          return;\n        }\n        break;\n      }\n    }\n    this.warning(\n      DiagnosticCode.Only_variables_functions_and_enums_become_WebAssembly_module_exports,\n      element.identifierNode.range\n    );\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<TypeRef>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toRef();\n      const funcRef = module.addFunction(\n        startFunction.internalName,\n        startSignature.paramRefs,\n        startSignature.resultRefs,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      startFunction.finalize(module, funcRef);\n      previousBody.push(\n        module.call(startFunction.internalName, null, TypeRef.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return !global.is(CommonFlags.ERRORED);\n    global.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(global);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) {\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        global.set(CommonFlags.ERRORED);\n        pendingElements.delete(global);\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      let internalName = global.internalName;\n      if (internalName == BuiltinNames.data_end) this.runtimeFeatures |= RuntimeFeatures.DATA;\n      else if (internalName == BuiltinNames.stack_pointer) this.runtimeFeatures |= RuntimeFeatures.STACK;\n      else if (internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      pendingElements.delete(global);\n      return true;\n    }\n\n    var type = global.type;\n    var typeRef = type.toRef();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        mangleImportName(global, global.declaration);\n        this.program.markModuleImport(mangleImportName_moduleName, mangleImportName_elementName, global);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          typeRef,\n          !isDeclaredConstant\n        );\n        pendingElements.delete(global);\n        if (!this.desiresExportRuntime && lowerRequiresExportRuntime(type)) {\n          this.desiresExportRuntime = true;\n        }\n        return true;\n      }\n\n      // Importing mutable globals is not supported in the MVP\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        global.declaration.range, \"mutable-globals\"\n      );\n      global.set(CommonFlags.ERRORED);\n      pendingElements.delete(global);\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant expression, attempt to precompute\n      if (!module.isConstExpression(initExpr)) {\n        if (isDeclaredConstant) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp;\n          } else {\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>TypeRef.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>TypeRef.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>TypeRef.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>TypeRef.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              global.set(CommonFlags.ERRORED);\n              pendingElements.delete(global);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC);\n      } else {\n        initExpr = this.makeZero(type);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, typeRef, true, this.makeZero(type));\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, typeRef, !isDeclaredConstant, initExpr);\n    }\n    pendingElements.delete(global);\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return !element.is(CommonFlags.ERRORED);\n    element.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(element);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, TypeRef.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, TypeRef.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, Type.i32, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, TypeRef.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, TypeRef.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    pendingElements.delete(element);\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return !instance.is(CommonFlags.ERRORED);\n\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyFunctions.add(instance);\n        return true;\n      }\n    }\n\n    // ensure the function hasn't duplicate parameters\n    var parameters = instance.prototype.functionTypeNode.parameters;\n    var numParameters = parameters.length;\n    if (numParameters >= 2) {\n      let visited = new Set<string>();\n      visited.add(parameters[0].name.text);\n      for (let i = 1; i < numParameters; i++) {\n        let paramIdentifier = parameters[i].name;\n        let paramName = paramIdentifier.text;\n        if (!visited.has(paramName)) {\n          visited.add(paramName);\n        } else {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            paramIdentifier.range, paramName\n          );\n        }\n      }\n    }\n\n    instance.set(CommonFlags.COMPILED);\n    var pendingElements = this.pendingElements;\n    pendingElements.add(instance);\n\n    var previousType = this.currentType;\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name or code\n      if (instance.hasAnyDecorator(DecoratorFlags.EXTERNAL | DecoratorFlags.EXTERNAL_JS)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator: DecoratorNode | null;\n        if (decorator = findDecorator(DecoratorKind.EXTERNAL, decoratorNodes)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, \"external\"\n          );\n        }\n        if (decorator = findDecorator(DecoratorKind.EXTERNAL_JS, decoratorNodes)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, \"external.js\"\n          );\n        }\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      if (!this.compileFunctionBody(instance, stmts)) {\n        stmts.push(module.unreachable());\n      }\n\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.paramRefs,\n        signature.resultRefs,\n        typesToRefs(instance.additionalLocals),\n        module.flatten(stmts, instance.signature.returnType.toRef())\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      this.program.markModuleImport(mangleImportName_moduleName, mangleImportName_elementName, instance);\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.paramRefs,\n        signature.resultRefs\n      );\n      funcRef = module.getFunction(instance.internalName);\n      if (!this.desiresExportRuntime) {\n        let thisType = signature.thisType;\n        if (\n          thisType && liftRequiresExportRuntime(thisType) ||\n          lowerRequiresExportRuntime(signature.returnType)\n        ) {\n          this.desiresExportRuntime = true;\n        } else {\n          let parameterTypes = signature.parameterTypes;\n          for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n            if (liftRequiresExportRuntime(parameterTypes[i])) {\n              this.desiresExportRuntime = true;\n              break;\n            }\n          }\n        }\n      }\n\n    // abstract or interface function\n    } else if (instance.is(CommonFlags.ABSTRACT) || instance.parent.kind == ElementKind.INTERFACE) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.paramRefs,\n        signature.resultRefs,\n        null,\n        module.unreachable()\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n      instance.set(CommonFlags.ERRORED);\n    }\n\n    if (instance.is(CommonFlags.AMBIENT) || instance.is(CommonFlags.EXPORT)) {\n      // Verify and print warn if signature has v128 type for imported or exported functions\n      let hasVectorValueOperands = signature.hasVectorValueOperands;\n      if (hasVectorValueOperands) {\n        let range: Range;\n        let fnTypeNode = instance.prototype.functionTypeNode;\n        if (signature.returnType == Type.v128) {\n          range = fnTypeNode.returnType.range;\n        } else {\n          let firstIndex = signature.getVectorValueOperandIndices()[0];\n          range = fnTypeNode.parameters[firstIndex].range;\n        }\n        this.warning(\n          DiagnosticCode.Exchange_of_0_values_is_not_supported_by_all_embeddings,\n          range, \"v128\"\n        );\n      }\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    pendingElements.delete(instance);\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[]\n  ): bool {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n    var thisLocal = instance.signature.thisType\n      ? assert(flow.lookupLocal(CommonNames.this_))\n      : null;\n    var bodyStartIndex = stmts.length;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // Make constructors return their instance pointer, and prepend a conditional\n    // allocation if any code path accesses `this`.\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      assert(instance.is(CommonFlags.INSTANCE));\n      thisLocal = assert(thisLocal);\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (flow.isAny(FlowFlags.ACCESSES_THIS | FlowFlags.CONDITIONALLY_ACCESSES_THIS) || !flow.is(FlowFlags.TERMINATES)) {\n\n        // Allocate `this` if not a super call, and initialize fields\n        let allocStmts = new Array<ExpressionRef>();\n        allocStmts.push(\n          this.makeConditionalAllocation(classInstance, thisLocal.index)\n        );\n        this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n\n        // Insert right before the body\n        for (let i = stmts.length - 1; i >= bodyStartIndex; --i) {\n          stmts[i + 1] = stmts[i];\n        }\n        stmts[bodyStartIndex] = module.flatten(allocStmts, TypeRef.None);\n\n        // Just prepended allocation is dropped when returning non-'this'\n        if (flow.is(FlowFlags.MAY_RETURN_NONTHIS)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation,\n              instance.identifierNode.range\n            );\n          }\n        }\n      }\n\n      // Returning something else than 'this' would break 'super()' calls\n      if (flow.is(FlowFlags.MAY_RETURN_NONTHIS) && !classInstance.hasDecorator(DecoratorFlags.FINAL)) {\n        this.error(\n          DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final,\n          classInstance.identifierNode.range\n        );\n      }\n\n      // Implicitly return `this` if the flow falls through\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        stmts.push(\n          module.local_get(thisLocal.index, this.options.sizeTypeRef)\n        );\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n      return false; // not recoverable\n    }\n\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    if (instance.getterRef) return true;\n    var module = this.module;\n    var valueType = instance.type;\n    var valueTypeRef = valueType.toRef();\n    var thisTypeRef = this.options.sizeTypeRef;\n    // return this.field\n    instance.getterRef = module.addFunction(instance.internalGetterName, thisTypeRef, valueTypeRef, null,\n      module.load(valueType.byteSize, valueType.isSignedIntegerValue,\n        module.local_get(0, thisTypeRef),\n        valueTypeRef, instance.memoryOffset\n      )\n    );\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var thisTypeRef = this.options.sizeTypeRef;\n    var valueTypeRef = type.toRef();\n    var module = this.module;\n    // void(this.field = value)\n    var bodyExpr = module.store(type.byteSize,\n      module.local_get(0, thisTypeRef),\n      module.local_get(1, valueTypeRef),\n      valueTypeRef, instance.memoryOffset\n    );\n    if (type.isManaged) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      if ((<Class>parent).type.isManaged) {\n        let linkInstance = this.program.linkInstance;\n        this.compileFunction(linkInstance);\n        bodyExpr = module.block(null, [\n          bodyExpr,\n          module.call(linkInstance.internalName, [\n            module.local_get(0, thisTypeRef),\n            module.local_get(1, valueTypeRef),\n            module.i32(0)\n          ], TypeRef.None)\n        ], TypeRef.None);\n      }\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ thisTypeRef, valueTypeRef ]), TypeRef.None, null,\n      bodyExpr\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addAlignedMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n    return segment;\n  }\n\n  /** Adds a static memory segment representing a runtime object. */\n  addRuntimeMemorySegment(buffer: Uint8Array): MemorySegment {\n    var memoryOffset = this.program.computeBlockStart64(this.memoryOffset);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer expression. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var ptr = this.ensureStaticStringPtr(stringValue);\n    this.currentType = this.program.stringInstance.type;\n    return this.module.usize(ptr);\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticStringPtr(stringValue: string): i64 {\n    var program = this.program;\n    var totalOverhead = program.totalOverhead;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let len = stringValue.length;\n      let buf = stringInstance.createBuffer(len << 1);\n      for (let i = 0; i < len; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, totalOverhead + (i << 1));\n      }\n      stringSegment = this.addRuntimeMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    return i64_add(stringSegment.offset, i64_new(totalOverhead));\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var elementTypeRef = elementType.toRef();\n    switch (<u32>elementTypeRef) {\n      case <u32>TypeRef.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == elementTypeRef);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == elementTypeRef);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == elementTypeRef);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>TypeRef.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == elementTypeRef);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>TypeRef.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == elementTypeRef);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>TypeRef.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == elementTypeRef);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>TypeRef.V128: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == elementTypeRef);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeV128(getConstValueV128(value), buf, pos);\n          pos += 16;\n        }\n        break;\n      }\n      case <u32>TypeRef.None: {\n        // nothing to write\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var arrayBufferInstance = program.arrayBufferInstance;\n    var buf = arrayBufferInstance.createBuffer(values.length * elementType.byteSize);\n    this.program.OBJECTInstance.writeField(\"rtId\", id, buf, 0); // use specified rtId\n    this.writeStaticBuffer(buf, program.totalOverhead, elementType, values);\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(\n    elementType: Type,\n    bufferSegment: MemorySegment,\n    /** Optional array instance override. */\n    arrayInstance: Class | null = null\n  ): MemorySegment {\n    var program = this.program;\n    if (!arrayInstance) {\n      arrayInstance = assert(this.resolver.resolveClass(this.program.arrayPrototype, [ elementType ]));\n    }\n    var bufferLength = readI32(bufferSegment.buffer, program.OBJECTInstance.offsetof(\"rtSize\"));\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n    var bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n    var buf = arrayInstance.createBuffer();\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf));\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a runtime counterpart of the specified function exists and returns its address. */\n  ensureRuntimeFunction(instance: Function): i64 {\n    assert(instance.is(CommonFlags.COMPILED) && !instance.is(CommonFlags.STUB));\n    var program = this.program;\n    var memorySegment = instance.memorySegment;\n    if (!memorySegment) {\n\n      // Add to the function table\n      let functionTable = this.functionTable;\n      let tableBase = this.options.tableBase;\n      if (!tableBase) tableBase = 1; // leave first elem blank\n      let index = tableBase + functionTable.length;\n      functionTable.push(instance);\n\n      // Create runtime function\n      let rtInstance = assert(this.resolver.resolveClass(program.functionPrototype, [ instance.type ]));\n      let buf = rtInstance.createBuffer();\n      assert(rtInstance.writeField(\"_index\", index, buf));\n      assert(rtInstance.writeField(\"_env\", 0, buf));\n      instance.memorySegment = memorySegment = this.addRuntimeMemorySegment(buf);\n    }\n    return i64_add(memorySegment.offset, i64_new(program.totalOverhead));\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath != null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATURE:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          statement.range,\n          \"Inner type alias\"\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      case NodeKind.MODULE: {\n        stmt = module.nop();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChildAt(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        labelNode.range,\n        \"Break label\"\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.freeScopedLocals();\n    flow.set(FlowFlags.BREAKS);\n    return module.br(breakLabel);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        label.range,\n        \"Continue label\"\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    flow.freeScopedLocals();\n    return module.br(continueLabel);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          \u2514\u25BA\u2510 flow\n    //  (loop $loop                             \u251C\u25C4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 recompile?\n    //   (?block $continue                      \u2514\u2500\u2510          \u2502\n    //    (body)                                  \u2502 bodyFlow \u2502\n    //   )                                      \u250C\u2500\u2518          \u2502\n    //                                        \u250C\u25C4\u253C\u25BA\u2562          \u2502 breaks or terminates?\n    //                                        \u2502 \u2514\u2500\u2510          \u2502 but does not continue\n    //   (br_if (cond) $loop)                 \u2502   \u2502 condFlow \u2502\n    //                                        \u2502 \u250C\u2500\u2518          \u2502\n    //                                        \u251C\u25C4\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 condition?\n    //  )                                     \u2514\u2500\u2510\n    // )                                      \u250C\u2500\u2518\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = `do-break|${label}`;\n    flow.breakLabel = breakLabel;\n    var continueLabel = `do-continue|${label}`;\n    flow.continueLabel = continueLabel;\n    var loopLabel = `do-loop|${label}`;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    var possiblyContinues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS) && !possiblyContinues) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType,\n        statement.condition\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      if (possiblyContinues) {\n        bodyStmts = [\n          module.block(continueLabel, bodyStmts)\n        ];\n      }\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        bodyStmts.push(\n          module.br(loopLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        bodyStmts.push(\n          module.br(loopLabel,\n            condExpr\n          )\n        );\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations. Note that\n        // this may be necessary multiple times where locals depend on each other.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(loopLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  \u2514\u25BA\u2510 flow\n    // (block $break                    \u2502\n    //  (loop $loop                     \u251C\u25C4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 recompile?\n    //   (local.set $tcond (condition)) \u2514\u2500\u2510 condFlow \u2502\n    //                                  \u250C\u2500\u2518          \u2502\n    //   (if (local.get $tcond)       \u250C\u25C4\u2524            \u2502 condition?\n    //    (block $continue            \u2502 \u2502            \u2502\n    //     (body)                     \u2502 \u2514\u2500\u2510 bodyFlow \u2502\n    //                                \u2502 \u250C\u2500\u2518          \u2502\n    //    )                           \u251C\u25C4\u253C\u25BA\u2562          \u2502 breaks or terminates?\n    //    (incrementor)               \u2502 \u2514\u2500\u2510 incrFlow \u2502\n    //                                \u2502 \u250C\u2500\u2518          \u2502\n    //                                \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    //    (br $loop)                  \u2514\u2500\u2510\n    //   )                              \u2502\n    //  )                               \u2502\n    // )                                \u2502\n    //                                \u250C\u2500\u2518\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = `for-break${label}`;\n    flow.breakLabel = breakLabel;\n    var continueLabel = `for-continue|${label}`;\n    flow.continueLabel = continueLabel;\n    var loopLabel = `for-loop|${label}`;\n\n    // Compile initializer if present\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType,\n        condition\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr, false) // bool\n    );\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations. Note that this\n      // may be necessary multiple times where locals depend on each other.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, TypeRef.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Iterators\"\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              \u2514\u25BA\u2510 flow\n    //  (condition)      \u250C\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 condition?\n    //  (block           \u2502            \u2502\n    //   (ifTrue)        \u2514\u25BA\u2510 thenFlow \u2502\n    //                   \u250C\u2500\u2518          \u2502\n    //  )                \u251C\u2500\u2562          \u2502\n    //  (block           \u2502          \u250C\u25C4\u2524 present?\n    //   (ifFalse)       \u2502          \u2502 \u2514\u25BA\u2510 elseFlow\n    //                   \u2502          \u2502 \u250C\u2500\u2518\n    //  )                \u2502          \u2502 \u251C\u2500\u2562\n    // )                 \u2514\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2518\n    // ...              \u250C\u25C4\u2518\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      expr = this.compileExpression(valueExpression, returnType, constraints);\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n      if (flow.actualFunction.is(CommonFlags.CONSTRUCTOR) && valueExpression.kind != NodeKind.THIS) {\n        flow.set(FlowFlags.MAY_RETURN_NONTHIS);\n      }\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      this.currentType = returnType;\n      return module.unreachable();\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // Handle inline return\n    if (flow.isInline) {\n      return !expr\n        ? isLastInBody\n          ? module.nop()\n          : module.br(assert(flow.inlineReturnLabel))\n        : isLastInBody\n          ? expr\n          : this.currentType == Type.void\n            ? module.block(null, [ expr, module.br(assert(flow.inlineReturnLabel)) ])\n            : module.br(assert(flow.inlineReturnLabel), 0, expr);\n    }\n\n    // Otherwise emit a normal return\n    return !expr\n      ? isLastInBody\n        ? module.nop()\n        : module.return()\n      : isLastInBody\n        ? expr\n        : this.currentType == Type.void\n          ? module.block(null, [ expr, module.return() ])\n          : module.return(expr);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      ),\n      false // u32\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(`case${i}|${context}`,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, TypeRef.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br(defaultIndex >= 0\n      ? `case${defaultIndex}|${context}`\n      : `break|${context}`\n    );\n\n    // nest blocks in order\n    var currentBlock = module.block(`case0|${context}`, breaks, TypeRef.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = `break|${context}`;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : `case${i + 1}|${context}`;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n\n      commonConditional |= innerFlow.deriveConditionalFlags();\n\n      // Switch back to the parent flow\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, TypeRef.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    // TODO: requires exception-handling spec.\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).args;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n    flow.freeScopedLocals();\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Exceptions\"\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          cloneMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          let pendingElements = this.pendingElements;\n          let dummy = flow.addScopedDummyLocal(name, type, statement); // pending dummy\n          pendingElements.add(dummy);\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT\n          );\n          pendingElements.delete(dummy);\n          flow.freeScopedDummyLocal(name);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let pendingElements = this.pendingElements;\n        let temp = flow.addScopedDummyLocal(name, Type.auto, statement); // pending dummy\n        pendingElements.add(temp);\n        initExpr = this.compileExpression(initializerNode, Type.auto); // reports\n        pendingElements.delete(temp);\n        flow.freeScopedDummyLocal(name);\n\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp; // always use precomputed initExpr\n            let local: Local | null = null;\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>TypeRef.I32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>TypeRef.I64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>TypeRef.F32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>TypeRef.F64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n            }\n            if (local) {\n              // Add as a virtual local that doesn't actually exist in WebAssembly\n              let scopedLocals = flow.scopedLocals;\n              if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n              else if (scopedLocals.has(name)) {\n                let existing = assert(scopedLocals.get(name));\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  declaration.name.range,\n                  existing.declaration.name.range,\n                  name\n                );\n                return this.module.unreachable();\n              }\n              scopedLocals.set(name, local);\n              isStatic = true;\n            }\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        if (initExpr) {\n          initializers.push(\n            this.makeLocalAssignment(local, initExpr, type, false)\n          );\n        } else {\n          // no need to assign zero\n          if (local.type.isShortIntegerValue) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    this.currentType = Type.void;\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  \u2514\u25BA\u2510 flow\n    //  (loop $continue                 \u251C\u25C4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 recompile?\n    //   (local.set $tcond (condition)) \u2514\u2500\u2510 condFlow \u2502\n    //                                  \u250C\u2500\u2518          \u2502\n    //   (if (local.get $tcond)       \u250C\u25C4\u2524            \u2502 condition?\n    //    (body)                      \u2502 \u2514\u2500\u2510 bodyFlow \u2502\n    //                                \u2502 \u250C\u2500\u2518          \u2502\n    //                                \u251C\u25C4\u253C\u25BA\u2562          \u2502 breaks or terminates?\n    //    (br $continue)              \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    //   )                            \u2514\u2500\u2510\n    //  )                               \u2502\n    // )                              \u250C\u2500\u2518\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = `while-break|${label}`;\n    flow.breakLabel = breakLabel;\n    var continueLabel = `while-continue|${label}`;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr, false) // bool\n    );\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations. Note that\n      // this may be necessary multiple times where locals depend on each other.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, TypeRef.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    this.currentType = type;\n    switch (type.kind) {\n      case TypeKind.BOOL: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            // @ts-ignore\n            ? <i32>i64_ne(element.constantIntegerValue, i64_zero)\n            : 0\n        );\n      }\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMPILED: {\n        let compiled = <CompiledExpression>expression;\n        expr = compiled.expr;\n        this.currentType = compiled.type;\n        break;\n      }\n      case NodeKind.CLASS: {\n        // TODO: compile as class expression\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Block-scoped class declarations or expressions\"\n        );\n        expr = this.module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, expression);\n        this.currentType = currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, expression);\n        this.currentType = currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Converts an expression's result from one type to another. */\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit. */\n    explicit: bool,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    if (fromType.kind == TypeKind.VOID) {\n      if (toType.kind == TypeKind.VOID) {\n        // void to void: Can happen as a result of a foregoing error. Since we\n        // have an `expr` here that is already supposed to be void, return it.\n        return expr;\n      }\n      // void to any\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.isReference || toType.isReference) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.isNullableReference && !toType.isNullableReference) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // upcast or same\n        assert(toType.isExternalReference || fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // downcast\n        // <Cat | null>(<Animal>maybeCat)\n        if (toType.isExternalReference) {\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            reportNode.range,\n            \"ref.cast\"\n          );\n          this.currentType = toType;\n          return module.unreachable();\n        }\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeDowncastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n    assert(!fromType.isReference && !toType.isReference);\n\n    // Early return if we have same types\n    if (toType.kind == fromType.kind) {\n      this.currentType = toType;\n      return expr;\n    }\n\n    // v128 to any / any to v128\n    // except v128 to bool\n    //\n    // NOTE:In case we would have more conversions to and from v128 type it's better\n    // to make these checks more individual and integrate in below flow.\n    if (\n      !toType.isBooleanValue &&\n      (toType.isVectorValue || fromType.isVectorValue)\n    ) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.isFloatValue) {\n\n      // float to float\n      if (toType.isFloatValue) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32ToF64, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64ToF32, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.isIntegerValue) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f32, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToI64 : UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToI32 : UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToU64 : UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToU32 : UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f64, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToI64 : UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToI32 : UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToU64 : UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToU32 : UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.isIntegerValue && toType.isFloatValue) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // v128 to bool\n    } else if (fromType == Type.v128 && toType.isBooleanValue) {\n      expr = this.makeIsTrueish(expr, Type.v128, reportNode);\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.isLongIntegerValue) {\n\n        // i64 to i32 or smaller\n        if (toType.isBooleanValue) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n        } else if (!toType.isLongIntegerValue) {\n          expr = module.unary(UnaryOp.WrapI64ToI32, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.isLongIntegerValue) {\n        expr = module.unary(\n          fromType.isSignedIntegerValue ? UnaryOp.ExtendI32ToI64 : UnaryOp.ExtendU32ToU64,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.isShortIntegerValue) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.isVaryingIntegerValue && !toType.isVaryingIntegerValue) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          cloneMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Const assertion\"\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n  private i32PowInstance: Function | null = null;\n  private i64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.EQ);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        if (commonType.isFloatValue) {\n          if (\n            isConstExpressionNaN(module, rightExpr) ||\n            isConstExpressionNaN(module, leftExpr)\n          ) {\n            this.warning(\n              DiagnosticCode._NaN_does_not_compare_equal_to_any_other_value_including_itself_Use_isNaN_x_instead,\n              expression.range\n            );\n          }\n          if (isConstNegZero(rightExpr) || isConstNegZero(leftExpr)) {\n            this.warning(\n              DiagnosticCode.Comparison_with_0_0_is_sign_insensitive_Use_Object_is_x_0_0_if_the_sign_matters,\n              expression.range\n            );\n          }\n        }\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeEq(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClass();\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        if (commonType.isFloatValue) {\n          if (\n            isConstExpressionNaN(module, rightExpr) ||\n            isConstExpressionNaN(module, leftExpr)\n          ) {\n            this.warning(\n              DiagnosticCode._NaN_does_not_compare_equal_to_any_other_value_including_itself_Use_isNaN_x_instead,\n              expression.range\n            );\n          }\n          if (isConstNegZero(rightExpr) || isConstNegZero(leftExpr)) {\n            this.warning(\n              DiagnosticCode.Comparison_with_0_0_is_sign_insensitive_Use_Object_is_x_0_0_if_the_sign_matters,\n              expression.range\n            );\n          }\n        }\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeNe(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"+\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAdd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeSub(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"*\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeMul(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POW);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"**\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"**\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makePow(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"/\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeDiv(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.REM);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"%\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeRem(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShl(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShr(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShru(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAnd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeOr(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeXor(leftExpr, rightExpr, commonType);\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & Constraints.MUST_WRAP;\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          leftExpr = this.makeIsTrueish(leftExpr, leftType, left);\n\n          // shortcut if lhs is always false\n          let condKind = this.evaluateCondition(leftExpr);\n          if (condKind == ConditionKind.FALSE) {\n            expr = leftExpr;\n          } else {\n            rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n            rightType = this.currentType;\n            rightFlow.freeScopedLocals();\n            rightExpr = this.makeIsTrueish(rightExpr, rightType, right);\n\n            // simplify if lhs is always true\n            if (condKind == ConditionKind.TRUE) {\n              expr = rightExpr;\n            } else {\n              expr = module.if(leftExpr, rightExpr, module.i32(0));\n            }\n          }\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if copying left is trivial\n          if (expr = module.tryCopyTrivialExpression(leftExpr)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType, left),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr, leftType.isManaged), leftType, left),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toRef())\n            );\n            flow.freeTempLocal(tempLocal);\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & Constraints.MUST_WRAP;\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          leftExpr = this.makeIsTrueish(leftExpr, leftType, left);\n\n          // shortcut if lhs is always true\n          let condKind = this.evaluateCondition(leftExpr);\n          if (condKind == ConditionKind.TRUE) {\n            expr = leftExpr;\n          } else {\n            rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n            rightType = this.currentType;\n            rightFlow.freeScopedLocals();\n            rightExpr = this.makeIsTrueish(rightExpr, rightType, right);\n\n            // simplify if lhs is always false\n            if (condKind == ConditionKind.FALSE) {\n              expr = rightExpr;\n            } else {\n              expr = module.if(leftExpr, module.i32(1), rightExpr);\n            }\n          }\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if copying left is trivial\n          if (expr = module.tryCopyTrivialExpression(leftExpr)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let temp = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr, leftType.isManaged), leftType, left),\n              module.local_get(temp.index, leftType.toRef()),\n              rightExpr\n            );\n            flow.freeTempLocal(temp);\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  makeLt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n      case TypeKind.I64: return module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE: return module.binary(BinaryOp.LtISize, leftExpr, rightExpr);\n      case TypeKind.BOOL:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n      case TypeKind.U64: return module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n      case TypeKind.USIZE: return module.binary(BinaryOp.LtUSize, leftExpr, rightExpr);\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n      case TypeKind.I64: return module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE: return module.binary(BinaryOp.GtISize, leftExpr, rightExpr);\n      case TypeKind.BOOL:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n      case TypeKind.U64: return module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n      case TypeKind.USIZE: return module.binary(BinaryOp.GtUSize, leftExpr, rightExpr);\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeLe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n      case TypeKind.I64: return module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE: return module.binary(BinaryOp.LeISize, leftExpr, rightExpr);\n      case TypeKind.BOOL:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n      case TypeKind.U64: return module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n      case TypeKind.USIZE: return module.binary(BinaryOp.LeUSize, leftExpr, rightExpr);\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n      case TypeKind.I64: return module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE: return module.binary(BinaryOp.GeISize, leftExpr, rightExpr);\n      case TypeKind.BOOL:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n      case TypeKind.U64: return module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n      case TypeKind.USIZE: return module.binary(BinaryOp.GeUSize, leftExpr, rightExpr);\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeEq(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(BinaryOp.EqSize, leftExpr, rightExpr);\n      case TypeKind.F32: return module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n      case TypeKind.F64: return module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AllTrueI8x16,\n          module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: return module.ref_eq(leftExpr, rightExpr);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeNe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(BinaryOp.NeSize, leftExpr, rightExpr);\n      case TypeKind.F32: return module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n      case TypeKind.F64: return module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AnyTrueV128,\n          module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return module.unary(UnaryOp.EqzI32,\n          module.ref_eq(leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAdd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(BinaryOp.AddSize, leftExpr, rightExpr);\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeSub(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(BinaryOp.SubSize, leftExpr, rightExpr);\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeMul(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(BinaryOp.MulSize, leftExpr, rightExpr);\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makePow(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    let module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: {\n        return module.select(\n          module.i32(1),\n          module.binary(BinaryOp.EqI32, rightExpr, module.i32(0)),\n          leftExpr,\n          TypeRef.I32\n        );\n      }\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        if (this.options.willOptimize) {\n          // Precompute power if LHS and RHS constants\n          // TODO: move this optimization to AIR\n          if (\n            getExpressionId(leftExpr)  == ExpressionId.Const &&\n            getExpressionId(rightExpr) == ExpressionId.Const\n          ) {\n            let leftValue  = getConstValueI32(leftExpr);\n            let rightValue = getConstValueI32(rightExpr);\n            this.currentType = type;\n            return module.i32(i64_low(i64_pow(\n              i64_new(leftValue),\n              i64_new(rightValue)\n            )));\n          }\n        }\n        let instance = this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        let expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n        if (type.size < 32) {\n          // TODO: this is necessary because i32PowInstance is generic, and deals with 32-bit integers,\n          // so its flow does not indicate whether returned SMIs are wrapped. worth to avoid?\n          expr = this.ensureSmallIntegerWrap(expr, type);\n        }\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        if (this.options.willOptimize) {\n          // Precompute power if LHS and RHS constants\n          // TODO: move this optimization to AIR\n          if (\n            getExpressionId(leftExpr) == ExpressionId.Const &&\n            getExpressionId(rightExpr) == ExpressionId.Const\n          ) {\n            let leftValue = i64_new(getConstValueI64Low(leftExpr), getConstValueI64High(leftExpr));\n            let rightValue = i64_new(getConstValueI64Low(rightExpr), getConstValueI64High(rightExpr));\n            let result = i64_pow(leftValue, rightValue);\n            this.currentType = type;\n            return module.i64(i64_low(result), i64_high(result));\n          }\n        }\n        let instance = this.i64PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(CommonNames.ipow64);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow64\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let isWasm64 = this.options.isWasm64;\n        if (this.options.willOptimize) {\n          // Precompute power if LHS and RHS constants\n          // TODO: move this optimization to AIR\n          if (\n            getExpressionId(leftExpr) == ExpressionId.Const &&\n            getExpressionId(rightExpr) == ExpressionId.Const\n          ) {\n            if (isWasm64) {\n              let leftValue  = i64_new(getConstValueI64Low(leftExpr), getConstValueI64High(leftExpr));\n              let rightValue = i64_new(getConstValueI64Low(rightExpr), getConstValueI64High(rightExpr));\n              let result = i64_pow(leftValue, rightValue);\n              this.currentType = type;\n              return module.i64(i64_low(result), i64_high(result));\n            } else {\n              let leftValue  = getConstValueI32(leftExpr);\n              let rightValue = getConstValueI32(rightExpr);\n              this.currentType = type;\n              return module.i32(i64_low(i64_pow(\n                i64_new(leftValue),\n                i64_new(rightValue)\n              )));\n            }\n          }\n        }\n        let instance = isWasm64\n          ? this.i64PowInstance\n          : this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(isWasm64\n            ? CommonNames.ipow64\n            : CommonNames.ipow32\n          );\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, isWasm64 ? \"ipow64\" : \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          if (isWasm64) {\n            this.i64PowInstance = instance;\n          } else {\n            this.i32PowInstance = instance;\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F32: {\n        if (this.options.willOptimize) {\n          // Precompute power if LHS and RHS constants\n          // TODO: move this optimization to AIR\n          if (\n            getExpressionId(leftExpr)  == ExpressionId.Const &&\n            getExpressionId(rightExpr) == ExpressionId.Const\n          ) {\n            let leftValue  = getConstValueF32(leftExpr);\n            let rightValue = getConstValueF32(rightExpr);\n            this.currentType = type;\n            return module.f32(f32(accuratePow64(leftValue, rightValue)));\n          }\n        }\n        let instance = this.f32PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      // Math.pow otherwise (result is f64)\n      case TypeKind.F64: {\n        if (this.options.willOptimize) {\n          // Precompute power if LHS and RHS constants\n          // TODO: move this optimization to AIR\n          if (\n            getExpressionId(leftExpr)  == ExpressionId.Const &&\n            getExpressionId(rightExpr) == ExpressionId.Const\n          ) {\n            let leftValue  = getConstValueF64(leftExpr);\n            let rightValue = getConstValueF64(rightExpr);\n            this.currentType = type;\n            return module.f64(accuratePow64(leftValue, rightValue));\n          }\n        }\n        let instance = this.f64PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeDiv(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n      case TypeKind.I64: return module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE: return module.binary(BinaryOp.DivISize, leftExpr, rightExpr);\n      case TypeKind.BOOL:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n      case TypeKind.U64: return module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n      case TypeKind.USIZE: return module.binary(BinaryOp.DivUSize, leftExpr, rightExpr);\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeRem(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n      case TypeKind.I64: return module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE: return module.binary(BinaryOp.RemISize, leftExpr, rightExpr);\n      case TypeKind.BOOL:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        leftExpr  = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n      case TypeKind.U64: return module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n      case TypeKind.USIZE: return module.binary(BinaryOp.RemUSize, leftExpr, rightExpr);\n      case TypeKind.F32: {\n        let instance = this.f32ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F64: {\n        let instance = this.f64ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShl(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the RHS, but only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr << (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShlI32,\n          leftExpr,\n          module.binary(\n            BinaryOp.AndI32,\n            rightExpr,\n            module.i32(type.size - 1)\n          )\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(BinaryOp.ShlSize, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits,\n    // and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        // leftExpr >> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrI32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(\n            BinaryOp.AndI32,\n            rightExpr,\n            module.i32(type.size - 1)\n          )\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(\n            BinaryOp.AndI32,\n            rightExpr,\n            module.i32(type.size - 1)\n          )\n        );\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n      case TypeKind.I64: return module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE: return module.binary(BinaryOp.ShrISize, leftExpr, rightExpr);\n      case TypeKind.U32: return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      case TypeKind.U64: return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      case TypeKind.USIZE: return module.binary(BinaryOp.ShrUSize, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShru(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(\n            BinaryOp.AndI32,\n            rightExpr,\n            module.i32(type.size - 1)\n          )\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(BinaryOp.ShrUSize, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAnd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(BinaryOp.AndSize, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeOr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(BinaryOp.OrSize, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeXor(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(BinaryOp.XorSize, leftExpr, rightExpr);\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    leftType: Type,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    var signature = operatorInstance.signature;\n    var parameterTypes = signature.parameterTypes;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      leftExpr = this.convertExpression(leftExpr, leftType, assert(signature.thisType), false, left);\n      rightType = parameterTypes[0];\n    } else {\n      leftExpr = this.convertExpression(leftExpr, leftType, parameterTypes[0], false, left);\n      rightType = parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(\n    expression: Expression,\n    valueExpression: Expression,\n    contextualType: Type\n  ): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        if (this.pendingElements.has(target)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            target.internalName\n          );\n          return this.module.unreachable();\n        }\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return this.module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        let parameterTypes = indexedSet.signature.parameterTypes;\n\n        assert(parameterTypes.length == 2); // parser must guarantee this\n        targetType = parameterTypes[1];     // 2nd parameter is the element\n\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, target.internalName\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, valueType, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        let isConstructor = flow.actualFunction.is(CommonFlags.CONSTRUCTOR);\n\n        // Cannot assign to readonly fields except in constructors if there's no initializer\n        if (fieldInstance.is(CommonFlags.READONLY)) {\n          if (!isConstructor || initializerNode) {\n            this.error(\n              DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n              valueExpression.range, fieldInstance.internalName\n            );\n            return module.unreachable();\n          }\n        }\n\n        // Mark initialized fields in constructors\n        thisExpression = assert(thisExpression);\n        if (isConstructor && thisExpression.kind == NodeKind.THIS) {\n          flow.setThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED);\n        }\n\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          valueType,\n          this.compileExpression(\n            thisExpression,\n            (<Class>fieldParent).type,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          let thisType = assert(setterInstance.signature.thisType);\n          let thisExpr = this.compileExpression(\n            assert(thisExpression),\n            thisType,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n          if (!tee) return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          assert(getterInstance.signature.thisType == thisType);\n          let returnType = getterInstance.signature.returnType;\n          let returnTypeRef = returnType.toRef();\n          let tempThis = flow.getTempLocal(returnType);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempThis.index, thisExpr, returnType.isManaged),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempThis.index, returnTypeRef)\n            ], valueExpression)\n          ], returnTypeRef);\n          flow.freeTempLocal(tempThis);\n          return ret;\n        } else {\n          if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          return module.block(null, [\n            this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n            this.makeCallDirect(getterInstance, null, valueExpression)\n          ], getterInstance.signature.returnType.toRef());\n        }\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let thisType = classInstance.type;\n        let thisExpr = this.compileExpression(\n          assert(thisExpression),\n          thisType,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let setterIndexType = setterInstance.signature.parameterTypes[0];\n        let getterIndexType = getterInstance.signature.parameterTypes[0];\n        if (!setterIndexType.equals(getterIndexType)) {\n          this.errorRelated(\n            DiagnosticCode.Index_signature_accessors_in_type_0_differ_in_types,\n            getterInstance.identifierAndSignatureRange,\n            setterInstance.identifierAndSignatureRange,\n            classInstance.internalName,\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        let elementExpr = this.compileExpression(assert(indexExpression), setterIndexType, Constraints.CONV_IMPLICIT);\n        let elementType = this.currentType;\n        if (tee) {\n          let tempTarget = flow.getTempLocal(thisType);\n          let tempElement = flow.getTempLocal(elementType);\n          let returnType = getterInstance.signature.returnType;\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr, thisType.isManaged),\n              module.local_tee(tempElement.index, elementExpr, elementType.isManaged),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toRef()),\n              module.local_get(tempElement.index, tempElement.type.toRef())\n            ], valueExpression)\n          ], returnType.toRef());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n      default: {\n        this.error(\n          DiagnosticCode.The_target_of_an_assignment_must_be_a_variable_or_a_property_access,\n          valueExpression.range\n        );\n      }\n    }\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.isNullableReference) {\n      if (!valueType.isNullableReference || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n    if (type.isShortIntegerValue) {\n      if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n    }\n    if (tee) { // local = value\n      this.currentType = type;\n      return module.local_tee(localIndex, valueExpr, type.isManaged);\n    } else { // void(local = value)\n      this.currentType = Type.void;\n      return module.local_set(localIndex, valueExpr, type.isManaged);\n    }\n  }\n\n  /** Makes an assignment to a global. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var typeRef = type.toRef();\n\n    valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n    if (tee) { // (global = value), global\n      this.currentType = type;\n      return module.block(null, [\n        module.global_set(global.internalName, valueExpr),\n        module.global_get(global.internalName, typeRef)\n      ], typeRef);\n    } else { // global = value\n      this.currentType = Type.void;\n      return module.global_set(global.internalName,\n        valueExpr\n      );\n    }\n  }\n\n  /** Makes an assignment to a field. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var fieldTypeRef = fieldType.toRef();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (tee) {\n      this.compileField(field);\n      let tempThis = flow.getTempLocal(thisType);\n      let expr = module.block(null, [\n        module.call(field.internalSetterName, [ module.local_tee(tempThis.index, thisExpr, thisType.isManaged), valueExpr ], TypeRef.None),\n        module.call(field.internalGetterName, [ module.local_get(tempThis.index, thisType.toRef()) ], fieldTypeRef)\n      ], fieldTypeRef);\n      flow.freeTempLocal(tempThis);\n      this.currentType = fieldType;\n      return expr;\n    } else {\n      this.compileFieldSetter(field);\n      let expr = module.call(field.internalSetterName, [ thisExpr, valueExpr ], TypeRef.None);\n      this.currentType = Type.void;\n      return expr;\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = classInstance.base;\n      if (!baseClassInstance) {\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.expression.range\n        );\n        return module.unreachable();\n      }\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let sizeTypeRef = this.options.sizeTypeRef;\n\n      let baseCtorInstance = this.ensureConstructor(baseClassInstance, expression);\n      this.checkFieldInitialization(baseClassInstance, expression);\n      let superCall = this.compileCallDirect(\n        baseCtorInstance,\n        expression.args,\n        expression,\n        module.local_get(thisLocal.index, sizeTypeRef)\n      );\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ACCESSES_THIS |\n        FlowFlags.CONDITIONALLY_ACCESSES_THIS\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ACCESSES_THIS | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.local_set(thisLocal.index, superCall, classInstance.type.isManaged);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = this.resolver.currentThisExpression;\n\n    var signature: Signature | null;\n    var functionArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          // builtins handle present respectively omitted type arguments on their own\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        target = functionInstance;\n        // fall-through\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>target;\n        let thisArg: ExpressionRef = 0;\n        if (functionInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(functionInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(\n          functionInstance,\n          expression.args,\n          expression,\n          thisArg,\n          constraints\n        );\n      }\n\n      // indirect call: first-class function (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            let inlinedValue = local.constantIntegerValue;\n            if (this.options.isWasm64) {\n              functionArg = module.i64(i64_low(inlinedValue), i64_high(inlinedValue));\n            } else {\n              assert(!i64_high(inlinedValue));\n              functionArg = module.i32(i64_low(inlinedValue));\n            }\n          } else {\n            functionArg = module.local_get(local.index, this.options.sizeTypeRef);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          functionArg = module.global_get(global.internalName, global.type.toRef());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let fieldParent = fieldInstance.parent;\n          assert(fieldParent.kind == ElementKind.CLASS);\n          let usizeType = this.options.usizeType;\n          functionArg = module.load(usizeType.byteSize, false,\n            this.compileExpression(\n              assert(thisExpression),\n              (<Class>fieldParent).type,\n              Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n            ),\n            usizeType.toRef(),\n            fieldInstance.memoryOffset\n          );\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, fieldType.toString()\n        );\n        return module.unreachable();\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>target);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = propertyInstance.getterInstance;\n        let type = assert(this.resolver.getTypeOfElement(target));\n\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n\n        let thisArg: ExpressionRef = 0;\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        functionArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>target;\n        let typeArguments = classInstance.getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          signature = ftype.getSignature();\n          functionArg = this.compileExpression(expression.expression, ftype, Constraints.CONV_IMPLICIT);\n          break;\n        }\n        // fall-through\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: bootstrap can't see this yet\n      functionArg,\n      expression.args,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  /** Compiles the given arguments like a call expression according to the specified context. */\n  private compileCallExpressionLike(\n    /** Called expression. */\n    expression: Expression,\n    /** Call type arguments. */\n    typeArguments: TypeNode[] | null,\n    /** Call arguments. */\n    args: Expression[],\n    /** Diagnostic range. */\n    range: Range,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // Desugaring like this can happen many times. Let's cache the intermediate allocation.\n    var call = this._reusableCallExpression;\n    if (call) {\n      call.expression = expression;\n      call.typeArguments = typeArguments;\n      call.args = args;\n      call.range = range;\n    } else {\n      this._reusableCallExpression = call = Node.createCallExpression(expression, typeArguments, args, range);\n    }\n    return this.compileCallExpression(call, contextualType, constraints);\n  }\n  private _reusableCallExpression: CallExpression | null = null;\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        cloneMap(this.currentFlow.contextualTypeArguments), // don't update\n        expression\n      );\n    }\n    var callee = expression.expression;\n    var ctx = new BuiltinContext(\n      this,\n      prototype,\n      typeArguments,\n      expression.args,\n      callee.kind == NodeKind.PROPERTYACCESS\n        ? (<PropertyAccessExpression>callee).expression\n        : null,\n      contextualType,\n      expression,\n      false\n    );\n    // global builtins\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    // class builtins\n    var parent = prototype.parent;\n    if (parent.kind == ElementKind.CLASS) {\n      let classPrototype = (<Class>parent).prototype;\n      if (classPrototype == this.program.functionPrototype) {\n        let methodName = prototype.name;\n        if (function_builtins.has(methodName)) {\n          let fn = assert(function_builtins.get(methodName));\n          return fn(ctx);\n        }\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        reportNode.range, \"Rest parameters\"\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // handle call on `this` in constructors\n    let actualFunction = this.currentFlow.actualFunction;\n    if (actualFunction.is(CommonFlags.CONSTRUCTOR) && reportNode.isAccessOnThis) {\n      let parent = actualFunction.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitialization(<Class>parent, reportNode);\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE) && (!instance.is(CommonFlags.VIRTUAL) || reportNode.isAccessOnSuper)) {\n      assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i], Constraints.CONV_IMPLICIT);\n        }\n        // make the inlined call\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      let paramType = parameterTypes[i];\n      let paramExpr = this.compileExpression(argumentExpressions[i], paramType, Constraints.CONV_IMPLICIT);\n      operands[index] = paramExpr;\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands, reportNode, (constraints & Constraints.WILL_DROP) != 0);\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new BitSet();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr, paramType.isManaged)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg, thisType.isManaged)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    var isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n    if (isConstructor) flow.set(FlowFlags.CTORPARAM_CONTEXT);\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), initType);\n      body.push(\n        this.makeLocalAssignment(argumentLocal, initExpr, initType, false)\n      );\n    }\n    flow.unset(FlowFlags.CTORPARAM_CONTEXT);\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // If a constructor, perform field init checks on its flow directly\n    if (isConstructor) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitializationInFlow(<Class>parent, flow);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    this.currentType = returnType;\n    return module.block(flow.inlineReturnLabel, body, returnType.toRef());\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureArgumentsLength(): string {\n    var name = BuiltinNames.argumentsLength;\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(name, TypeRef.I32, true, module.i32(0));\n    }\n    return name;\n  }\n\n  /** Ensures compilation of the varargs stub for the specified function. */\n  ensureVarargsStub(original: Function): Function {\n    // A varargs stub is a function called with omitted arguments being zeroed,\n    // reading the `argumentsLength` helper global to decide which initializers\n    // to inject before calling the original function. It is typically attempted\n    // to circumvent the varargs stub where possible, for example where omitted\n    // arguments are constants and can be inlined into the original call.\n    var stub = original.varargsStub;\n    if (stub) return stub;\n\n    var originalSignature = original.signature;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n    var stmts = new Array<ExpressionRef>();\n\n    // forward `this` if applicable\n    var module = this.module;\n    var thisType = originalSignature.thisType;\n    if (thisType) {\n      forwardedOperands[0] = module.local_get(0, thisType.toRef());\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      let paramType = originalParameterTypes[i];\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, paramType.toRef());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the varargs stub\n    stub = original.newStub(\"varargs\");\n    stub.signature.requiredParameters = maxArguments;\n    original.varargsStub = stub;\n\n    // compile initializers of omitted arguments in the scope of the stub,\n    // accounting for additional locals and a proper `this` context.\n    var previousFlow = this.currentFlow;\n    var flow = stub.flow;\n    if (original.is(CommonFlags.CONSTRUCTOR)) flow.set(FlowFlags.CTORPARAM_CONTEXT);\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = `of${numOptional}`;\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = `${i}${ofN}`;\n    }\n    var argumentsLength = this.ensureArgumentsLength();\n    var table = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(argumentsLength, TypeRef.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(argumentsLength, TypeRef.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = this.compileExpression(\n          initializer,\n          type,\n          Constraints.CONV_IMPLICIT\n        );\n        initExpr = module.local_set(operandIndex, initExpr, type.isManaged);\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      table = module.block(names[i + 1], [\n        table,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toRef());\n    }\n    assert(operandIndex == maxOperands);\n\n    stmts.push(\n      table\n    );\n    stmts.push(\n      // assume this will always succeed (can just use name as the reportNode)\n      this.makeCallDirect(original, forwardedOperands, original.declaration.name)\n    );\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      stub.internalName,\n      stub.signature.paramRefs,\n      stub.signature.resultRefs,\n      typesToRefs(stub.additionalLocals),\n      module.flatten(stmts, returnType.toRef())\n    );\n    stub.set(CommonFlags.COMPILED);\n    stub.finalize(module, funcRef);\n    return stub;\n  }\n\n  /** Ensures compilation of the virtual stub for the specified function. */\n  ensureVirtualStub(original: Function): Function {\n    // A virtual stub is a function redirecting virtual calls to the actual\n    // overload targeted by the call. It utilizes varargs stubs where necessary\n    // and as such has the same semantics as one. Here, we only make sure that\n    // a placeholder exist, with actual code being generated as a finalization\n    // step once module compilation is otherwise complete.\n    var stub = original.virtualStub;\n    if (stub) return stub;\n    stub = original.newStub(\"virtual\");\n    original.virtualStub = stub;\n    var module = this.module;\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.paramRefs,\n      stub.signature.resultRefs,\n      null,\n      module.unreachable()\n    );\n    this.virtualStubs.add(original);\n    return stub;\n  }\n\n  /** Finalizes the virtual stub of the specified function. */\n  private finalizeVirtualStub(instance: Function): void {\n    var stub = this.ensureVirtualStub(instance);\n    if (stub.is(CommonFlags.COMPILED)) return;\n\n    assert(instance.parent.kind == ElementKind.CLASS || instance.parent.kind == ElementKind.INTERFACE);\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var sizeTypeRef = usizeType.toRef();\n    var parameterTypes = instance.signature.parameterTypes;\n    var returnType = instance.signature.returnType;\n    var numParameters = parameterTypes.length;\n    var tempIndex = 1 + parameterTypes.length; // incl. `this`\n\n    // Switch over this's rtId and map it to the respective overload\n    var builder = new SwitchBuilder(this.module,\n      module.load(4, false,\n        module.binary(\n          sizeTypeRef == TypeRef.I64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          module.local_get(0, sizeTypeRef),\n          sizeTypeRef == TypeRef.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)\n        ),\n        TypeRef.I32\n      )\n    );\n    var overloadInstances = this.resolver.resolveOverloads(instance);\n    if (overloadInstances) {\n      for (let i = 0, k = overloadInstances.length; i < k; ++i) {\n        let overloadInstance = overloadInstances[i];\n        if (!overloadInstance.is(CommonFlags.COMPILED)) continue; // errored\n        let overloadType = overloadInstance.type;\n        let originalType = instance.type;\n        if (!overloadType.isAssignableTo(originalType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString()\n          );\n          continue;\n        }\n        // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n        let overloadSignature = overloadInstance.signature;\n        let overloadParameterTypes = overloadSignature.parameterTypes;\n        let overloadNumParameters = overloadParameterTypes.length;\n        let paramExprs = new Array<ExpressionRef>(1 + overloadNumParameters);\n        paramExprs[0] = module.local_get(0, sizeTypeRef); // this\n        for (let n = 1; n <= numParameters; ++n) {\n          paramExprs[n] = module.local_get(n, parameterTypes[n - 1].toRef());\n        }\n        let needsVarargsStub = false;\n        for (let n = numParameters; n < overloadNumParameters; ++n) {\n          // TODO: inline constant initializers and skip varargs stub\n          paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n]);\n          needsVarargsStub = true;\n        }\n        let calledName = needsVarargsStub\n          ? this.ensureVarargsStub(overloadInstance).internalName\n          : overloadInstance.internalName;\n        let returnTypeRef = overloadSignature.returnType.toRef();\n        let stmts = new Array<ExpressionRef>();\n        if (needsVarargsStub) {\n          // Safe to prepend since paramExprs are local.get's\n          stmts.push(module.global_set(this.ensureArgumentsLength(), module.i32(numParameters)));\n        }\n        if (returnType == Type.void) {\n          stmts.push(\n            module.call(calledName, paramExprs, returnTypeRef)\n          );\n          stmts.push(\n            module.return()\n          );\n        } else {\n          stmts.push(\n            module.return(\n              module.call(calledName, paramExprs, returnTypeRef)\n            )\n          );\n        }\n        let classInstance = assert(overloadInstance.getClassOrInterface());\n        builder.addCase(classInstance.id, stmts);\n        // Also alias each extendee inheriting this exact overload\n        let extendees = classInstance.getAllExtendees(instance.declaration.name.text); // without get:/set:\n        for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n          let extendee = _values[a];\n          builder.addCase(extendee.id, stmts);\n        }\n      }\n    }\n\n    // Call the original function if no other id matches and the method is not\n    // abstract or part of an interface. Note that doing so will not catch an\n    // invalid id, but can reduce code size significantly since we also don't\n    // have to add branches for extendees inheriting the original function.\n    var body: ExpressionRef;\n    if (instance.prototype.bodyNode) {\n      let paramExprs = new Array<ExpressionRef>(numParameters);\n      paramExprs[0] = module.local_get(0, sizeTypeRef); // this\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toRef());\n      }\n      body = module.call(instance.internalName, paramExprs, returnType.toRef());\n\n    // Otherwise trap\n    } else {\n      body = module.unreachable();\n    }\n\n    // Create the virtual stub function\n    var ref = stub.ref;\n    if (ref) module.removeFunction(stub.internalName);\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.paramRefs,\n      stub.signature.resultRefs,\n      [ TypeRef.I32 ],\n      module.block(null, [\n        builder.render(tempIndex),\n        body\n      ], returnType.toRef())\n    );\n    stub.set(CommonFlags.COMPILED);\n  }\n\n  /** Marks managed call operands for the shadow stack. */\n  private operandsTostack(signature: Signature, operands: ExpressionRef[]): void {\n    if (!this.options.stackSize) return;\n    var module = this.module;\n    var operandIndex = 0;\n    var thisType = signature.thisType;\n    if (thisType) {\n      if (thisType.isManaged) {\n        let operand = operands[0];\n        let precomp = module.runExpression(operand, ExpressionRunnerFlags.Default);\n        if (!isConstZero(precomp)) { // otherwise unnecessary\n          operands[operandIndex] = module.tostack(operand);\n        }\n      }\n      ++operandIndex;\n    }\n    var parameterIndex = 0;\n    var parameterTypes = signature.parameterTypes;\n    assert(parameterTypes.length >= operands.length - operandIndex);\n    while (operandIndex < operands.length) {\n      let paramType = parameterTypes[parameterIndex];\n      if (paramType.isManaged) {\n        let operand = operands[operandIndex];\n        let precomp = module.runExpression(operand, ExpressionRunnerFlags.Default);\n        if (!isConstZero(precomp)) { // otherwise unnecessary\n          operands[operandIndex] = module.tostack(operand);\n        }\n      }\n      ++operandIndex;\n      ++parameterIndex;\n    }\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      if (!instance.is(CommonFlags.VIRTUAL)) {\n        assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n        let inlineStack = this.inlineStack;\n        if (inlineStack.includes(instance)) {\n          this.warning(\n            DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n            reportNode.range, instance.internalName\n          );\n        } else {\n          inlineStack.push(instance);\n          let expr: ExpressionRef;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let theOperands = assert(operands);\n            assert(theOperands.length);\n            expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n          } else {\n            expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n          }\n          inlineStack.pop();\n          return expr;\n        }\n      } else {\n        this.warning(\n          DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined,\n          reportNode.range, instance.internalName\n        );\n      }\n    }\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = instance.signature.parameterTypes;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toRef()),\n                      global.type, parameterTypes[i], false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant && !instance.is(CommonFlags.MODULE_IMPORT)) {\n        let original = instance;\n        instance = this.ensureVarargsStub(instance);\n        if (!this.compileFunction(instance)) return module.unreachable();\n        instance.flow.flags = original.flow.flags;\n        let returnTypeRef = returnType.toRef();\n        // We know the last operand is optional and omitted, so inject setting\n        // ~argumentsLength into that operand, which is always safe.\n        let lastOperand = operands[maxOperands - 1];\n        assert(!(getSideEffects(lastOperand, module.ref) & SideEffects.WritesGlobal));\n        let lastOperandType = parameterTypes[maxArguments - 1];\n        operands[maxOperands - 1] = module.block(null, [\n          module.global_set(this.ensureArgumentsLength(), module.i32(numArguments)),\n          lastOperand\n        ], lastOperandType.toRef());\n        this.operandsTostack(instance.signature, operands);\n        let expr = module.call(instance.internalName, operands, returnTypeRef);\n        if (returnType != Type.void && immediatelyDropped) {\n          expr = module.drop(expr);\n          this.currentType = Type.void;\n        } else {\n          this.currentType = returnType;\n        }\n        return expr;\n      }\n    }\n\n    // Call the virtual stub with the vtable if the function has overloads\n    if (instance.is(CommonFlags.VIRTUAL) && !reportNode.isAccessOnSuper) {\n      instance = this.ensureVirtualStub(instance);\n    }\n\n    if (operands) this.operandsTostack(instance.signature, operands);\n    var expr = module.call(instance.internalName, operands, returnType.toRef());\n    this.currentType = returnType;\n    return expr;\n  }\n\n  /** Compiles an indirect call to a first-class function. */\n  compileCallIndirect(\n    signature: Signature,\n    functionArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, functionArg, reportNode, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to a first-class function. */\n  makeCallIndirect(\n    signature: Signature,\n    functionArg: ExpressionRef,\n    reportNode: Node,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = signature.parameterTypes;\n    var returnType = signature.returnType;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    // We might be calling a varargs stub here, even if all operands have been\n    // provided, so we must set `argumentsLength` in any case. Inject setting it\n    // into the index argument, which becomes executed last after any operands.\n    var argumentsLength = this.ensureArgumentsLength();\n    var sizeTypeRef = this.options.sizeTypeRef;\n    if (getSideEffects(functionArg, module.ref) & SideEffects.WritesGlobal) {\n      let flow = this.currentFlow;\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(functionArg));\n      functionArg = module.block(null, [\n        module.local_set(temp.index, functionArg, true), // Function\n        module.global_set(argumentsLength, module.i32(numArguments)),\n        module.local_get(temp.index, sizeTypeRef)\n      ], sizeTypeRef);\n      flow.freeTempLocal(temp);\n    } else { // simplify\n      functionArg = module.block(null, [\n        module.global_set(argumentsLength, module.i32(numArguments)),\n        functionArg\n      ], sizeTypeRef);\n    }\n    if (operands) this.operandsTostack(signature, operands);\n    var expr = module.call_indirect(\n      null, // TODO: handle multiple tables\n      module.load(4, false, functionArg, TypeRef.I32), // ._index\n      operands,\n      signature.paramRefs,\n      signature.resultRefs\n    );\n    this.currentType = returnType;\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toRef());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      let classReference = targetType.getClassOrWrapper(this.program);\n      if (classReference) {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (indexedGet) {\n          let thisType = assert(indexedGet.signature.thisType);\n          let thisArg = this.compileExpression(targetExpression, thisType,\n            Constraints.CONV_IMPLICIT\n          );\n          if (!isUnchecked && this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n              expression.range\n            );\n          }\n          return this.compileCallDirect(indexedGet, [\n            expression.elementExpression\n          ], expression, thisArg, constraints);\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var isNamed = declaration.name.text.length > 0;\n    var isSemanticallyAnonymous = !isNamed || contextualType != Type.void;\n    var prototype = new FunctionPrototype(\n      isSemanticallyAnonymous\n        ? `${isNamed ? declaration.name.text : \"anonymous\"}|${actualFunction.nextAnonymousId++}`\n        : declaration.name.text,\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = cloneMap(flow.contextualTypeArguments);\n    var module = this.module;\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    var contextualSignature = contextualType.signatureReference;\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      instance = new Function(\n        prototype.name,\n        prototype,\n        null,\n        signature,\n        contextualTypeArguments\n      );\n      instance.flow.outer = flow;\n      let worked = this.compileFunction(instance);\n      this.currentType = contextualSignature.type;\n      if (!worked) return module.unreachable();\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      instance.flow.outer = flow;\n      let worked = this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n      if (!worked) return module.unreachable();\n    }\n\n    var offset = this.ensureRuntimeFunction(instance); // reports\n    var expr = this.options.isWasm64\n      ? module.i64(i64_low(offset), i64_high(offset))\n      : module.i32(i64_low(offset));\n\n    // add a constant local referring to the function if applicable\n    if (!isSemanticallyAnonymous) {\n      let fname = instance.name;\n      let existingLocal = flow.getScopedLocal(fname);\n      if (existingLocal) {\n        if (!existingLocal.declaration.range.source.isNative) {\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existingLocal.declaration.name.range,\n            fname\n          );\n        } else { // scoped locals are shared temps that don't track declarations\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, fname\n          );\n        }\n      } else {\n        let ftype = instance.type;\n        let local = flow.addScopedLocal(instance.name, ftype);\n        flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        expr = module.local_tee(local.index, expr, ftype.isManaged);\n      }\n    }\n\n    return expr;\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.isReference) {\n          let classReference = contextualType.getClass();\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.getSignature();\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          return this.makeZero(contextualType);\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        let thisType = actualFunction.signature.thisType;\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n          this.currentType = this.options.usizeType;\n          return module.unreachable();\n        }\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (flow.is(FlowFlags.CTORPARAM_CONTEXT)) {\n            this.error(\n              DiagnosticCode._this_cannot_be_referenced_in_constructor_arguments,\n              expression.range\n            );\n          }\n          if (!(constraints & Constraints.IS_THIS)) {\n            let parent = actualFunction.parent;\n            assert(parent.kind == ElementKind.CLASS);\n            this.checkFieldInitialization(<Class>parent, expression);\n          }\n        }\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n        flow.set(FlowFlags.ACCESSES_THIS);\n        this.currentType = thisType;\n        return module.local_get(thisLocal.index, thisType.toRef());\n      }\n      case NodeKind.SUPER: {\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (flow.is(FlowFlags.CTORPARAM_CONTEXT)) {\n            this.error(\n              DiagnosticCode._super_cannot_be_referenced_in_constructor_arguments,\n              expression.range\n            );\n          } else if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.getClass());\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toRef());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toRef());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (this.pendingElements.has(local)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            local.internalName\n          );\n          this.currentType = localType;\n          return module.unreachable();\n        }\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.isNullableReference && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range,\n            \"Closures\"\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toRef());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toRef());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, TypeRef.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            expression.range\n          );\n          break; // also diagnose 'not a value at runtime'\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          cloneMap(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range, \"First-class built-ins\"\n          );\n          this.currentType = functionInstance.type;\n          return module.unreachable();\n        }\n        if (contextualType.isExternalReference) {\n          this.currentType = Type.funcref;\n          return module.ref_func(functionInstance.internalName, TypeRef.Funcref); // TODO\n        }\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    this.error(\n      DiagnosticCode.Expression_does_not_compile_to_a_value_at_runtime,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      cloneMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <value> - must be exact\n    if (expectedType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <value> instanceof <nonValue> - always false\n    if (actualType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var sizeTypeRef = actualType.toRef();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.isNullableReference && !expectedType.isNullableReference) {\n\n      // upcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          sizeTypeRef == TypeRef.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // downcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              sizeTypeRef == TypeRef.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr, actualType.isManaged),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, sizeTypeRef),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // upcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // downcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              sizeTypeRef == TypeRef.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr, actualType.isManaged),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, sizeTypeRef),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var sizeTypeRef = actualType.toRef();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.getClass();\n    if (classReference) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.isNullableReference) {\n          return module.binary(\n            sizeTypeRef == TypeRef.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(`${prototype.internalName}~instanceof`, [ expr ], TypeRef.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let expr = <IntegerLiteralExpression>expression;\n        let type = this.resolver.determineIntegerLiteralType(expr, implicitlyNegate, contextualType);\n        this.currentType = type;\n        let intValue = expr.value;\n        let sign = 1.0; // should multiply for float literals\n        if (implicitlyNegate) {\n          if (type.isFloatValue) {\n            sign = -1.0;\n          } else {\n            intValue = i64_neg(intValue);\n          }\n        }\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(<f32>sign * i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(sign * i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.TEMPLATE: {\n        assert(!implicitlyNegate);\n        return this.compileTemplateLiteral(<TemplateLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      case LiteralKind.REGEXP: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Regular expressions\"\n        );\n        this.currentType = contextualType;\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  private compileTemplateLiteral(\n    expression: TemplateLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var tag = expression.tag;\n    var parts = expression.parts;\n    var numParts = parts.length;\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    assert(numExpressions == numParts - 1);\n\n    var module = this.module;\n    var stringInstance = this.program.stringInstance;\n    var stringType = stringInstance.type;\n\n    if (!tag) {\n      // Shortcut if just a (multi-line) string\n      if (numParts == 1) {\n        return this.ensureStaticString(parts[0]);\n      }\n\n      // Shortcut for `${expr}`, `<prefix>${expr}`, `${expr}<suffix>`\n      if (numParts == 2) {\n        let expression = expressions[0];\n        let lhsLen = parts[0].length;\n        let rhsLen = parts[1].length;\n        // Shortcut for `${expr}`  ->   expr.toString()\n        if (!lhsLen && !rhsLen) {\n          return this.makeToString(\n            this.compileExpression(expression, stringType),\n            this.currentType, expression\n          );\n        }\n        // Shortcuts for\n        // `<prefix>${expr}`  ->  \"<prefix>\" + expr.toString()\n        // `${expr}<suffix>`  ->  expr.toString() + \"<suffix>\"\n        let hasPrefix = lhsLen != 0;\n        // @ts-ignore: cast\n        if (hasPrefix ^ (rhsLen != 0)) {\n          let lhs: ExpressionRef;\n          let rhs: ExpressionRef;\n          let expr = this.makeToString(\n            this.compileExpression(expression, stringType),\n            this.currentType, expression\n          );\n          if (hasPrefix) {\n            lhs = this.ensureStaticString(parts[0]);\n            rhs = expr;\n          } else {\n            // suffix\n            lhs = expr;\n            rhs = this.ensureStaticString(parts[1]);\n          }\n          let concatMethod = assert(stringInstance.getMethod(\"concat\"));\n          return this.makeCallDirect(concatMethod, [ lhs, rhs ], expression);\n        }\n      }\n\n      // Shortcut for `${exprA}${exprB}`  ->  exprA.toString() + exprB.toString()\n      if (numParts == 3 && !parts[0].length && !parts[1].length && !parts[2].length) {\n        let exprA = expressions[0];\n        let exprB = expressions[1];\n\n        let lhs = this.makeToString(\n          this.compileExpression(exprA, stringType),\n          this.currentType, exprA\n        );\n        let rhs = this.makeToString(\n          this.compileExpression(exprB, stringType),\n          this.currentType, exprB\n        );\n        let concatMethod = assert(stringInstance.getMethod(\"concat\"));\n        return this.makeCallDirect(concatMethod, [ lhs, rhs ], expression);\n      }\n\n      // Compile to a `StaticArray<string>#join(\"\") in the general case\n      let expressionPositions = new Array<i32>(numExpressions);\n      let values = new Array<usize>();\n      if (parts[0].length > 0) values.push(this.ensureStaticString(parts[0]));\n      for (let i = 1; i < numParts; ++i) {\n        expressionPositions[i - 1] = values.length;\n        values.push(module.usize(0));\n        if (parts[i].length > 0) values.push(this.ensureStaticString(parts[i]));\n      }\n      let arrayInstance = assert(this.resolver.resolveClass(this.program.staticArrayPrototype, [ stringType ]));\n      let segment = this.addStaticBuffer(stringType, values, arrayInstance.id);\n      this.program.OBJECTInstance.writeField(\"gcInfo\", 3, segment.buffer, 0); // use transparent gcinfo\n      let offset = i64_add(segment.offset, i64_new(this.program.totalOverhead));\n      let joinInstance = assert(arrayInstance.getMethod(\"join\"));\n      let indexedSetInstance = assert(arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true));\n      let stmts = new Array<ExpressionRef>(2 * numExpressions + 1);\n      // Use one local per toString'ed subexpression, since otherwise recursion on the same\n      // static array would overwrite already prepared parts. Avoids a temporary array.\n      let temps = new Array<Local>(numExpressions);\n      let flow = this.currentFlow;\n      for (let i = 0; i < numExpressions; ++i) {\n        let expression = expressions[i];\n        let temp = flow.getTempLocal(stringType);\n        temps[i] = temp;\n        stmts[i] = module.local_set(temp.index,\n          this.makeToString(\n            this.compileExpression(expression, stringType),\n            this.currentType, expression\n          ),\n          true\n        );\n      }\n      // Populate the static array with the toString'ed subexpressions and call .join(\"\")\n      for (let i = 0; i < numExpressions; ++i) {\n        stmts[numExpressions + i] = this.makeCallDirect(indexedSetInstance, [\n          module.usize(offset),\n          module.i32(expressionPositions[i]),\n          module.local_get(temps[i].index, stringType.toRef())\n        ], expression);\n        flow.freeTempLocal(temps[i]);\n      }\n      stmts[2 * numExpressions] = this.makeCallDirect(joinInstance, [\n        module.usize(offset),\n        this.ensureStaticString(\"\")\n      ], expression);\n      return module.flatten(stmts, stringType.toRef());\n    }\n\n    // Try to find out whether the template function takes a full-blown TemplateStringsArray or if\n    // it is sufficient to compile to a normal array. While technically incorrect, this allows us\n    // to avoid generating unnecessary static data that is not explicitly signaled to be used.\n    var tsaArrayInstance = this.program.templateStringsArrayInstance;\n    var arrayInstance = tsaArrayInstance;\n    var target = this.resolver.lookupExpression(tag, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n    if (target) {\n      switch (target.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instance = this.resolver.resolveFunction(\n            <FunctionPrototype>target,\n            null,\n            new Map(),\n            ReportMode.SWALLOW\n          );\n          if (!instance) break;\n          target = instance;\n          // fall-through\n        }\n        case ElementKind.FUNCTION: {\n          let instance = <Function>target;\n          let parameterTypes = instance.signature.parameterTypes;\n          if (parameterTypes.length) {\n            let first = parameterTypes[0].getClass();\n            if (first && !first.extends(tsaArrayInstance.prototype)) {\n              arrayInstance = assert(this.resolver.resolveClass(this.program.arrayPrototype, [ stringType ]));\n            }\n          }\n          break;\n        }\n      }\n    }\n\n    // Compile to a call to the tag function\n    var rawParts = expression.rawParts;\n    assert(rawParts.length == numParts);\n    var partExprs = new Array<ExpressionRef>(numParts);\n    for (let i = 0; i < numParts; ++i) {\n      partExprs[i] = this.ensureStaticString(parts[i]);\n    }\n    var arraySegment: MemorySegment;\n    if (arrayInstance == tsaArrayInstance) {\n      var rawExprs = new Array<ExpressionRef>(numParts);\n      for (let i = 0; i < numParts; ++i) {\n        rawExprs[i] = this.ensureStaticString(rawParts[i]);\n      }\n      arraySegment = this.addStaticArrayHeader(stringType,\n        this.addStaticBuffer(this.options.usizeType, partExprs),\n        arrayInstance\n      );\n      var rawHeaderSegment = this.addStaticArrayHeader(stringType,\n        this.addStaticBuffer(this.options.usizeType, rawExprs)\n      );\n      arrayInstance.writeField(\"raw\",\n        i64_add(rawHeaderSegment.offset, i64_new(this.program.totalOverhead)),\n        arraySegment.buffer\n      );\n    } else {\n      arraySegment = this.addStaticArrayHeader(stringType,\n        this.addStaticBuffer(this.options.usizeType, partExprs),\n        arrayInstance\n      );\n    }\n\n    // Desugar to compileCallExpression\n    var args = expressions.slice();\n    args.unshift(\n      Node.createCompiledExpression(\n        module.usize(i64_add(arraySegment.offset, i64_new(this.program.totalOverhead))),\n        arrayInstance.type,\n        this.program.nativeRange\n      )\n    );\n    // TODO: Requires ReadonlyArray to be safe\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      expression.range, \"Tagged template literals\"\n    );\n    return this.compileCallExpressionLike(tag, null, args, expression.range, stringType);\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    let contextualClass = contextualType.getClass();\n    if (contextualClass && contextualClass.extends(program.staticArrayPrototype)) {\n      return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(<Expression>elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        if (getExpressionType(expr) != elementType.toRef()) {\n          isStatic = false;\n        } else {\n          let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            expr = precomp;\n          } else {\n            isStatic = false;\n          }\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let totalOverhead = program.totalOverhead;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(totalOverhead));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(totalOverhead));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        return this.makeNewArray(arrayInstance, length, bufferAddress, expression);\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var indexedSet = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!indexedSet) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var arrayTypeRef = arrayType.toRef();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeNewArray(arrayInstance, length, i64_new(0), expression),\n        arrayType.isManaged\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.getMember(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, arrayTypeRef),\n          arrayTypeRef,\n          (<Field>dataStartMember).memoryOffset\n        ),\n        true // ArrayBuffer\n      )\n    );\n    for (let i = 0; i < length; ++i) {\n      // this[i] = value\n      stmts.push(\n        module.call(indexedSet.internalName, [\n          module.local_get(tempThis.index, arrayTypeRef),\n          module.i32(i),\n          values[i]\n        ], TypeRef.None)\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, arrayTypeRef)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    if (length) this.compileFunction(indexedSet);\n    this.currentType = arrayType;\n    return module.flatten(stmts, arrayTypeRef);\n  }\n\n  /** Makes a new array instance from a static buffer segment. */\n  private makeNewArray(\n    /** Concrete array class. */\n    arrayInstance: Class,\n    /** Length of the array. */\n    length: i32,\n    /** Source address to copy from. Array is zeroed if `0`. */\n    source: i64,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    assert(!arrayInstance.extends(program.staticArrayPrototype));\n    var elementType = arrayInstance.getArrayValueType(); // asserts\n\n    // __newArray(length, alignLog2, classId, staticBuffer)\n    var expr = this.makeCallDirect(program.newArrayInstance, [\n      module.i32(length),\n      program.options.isWasm64\n        ? module.i64(elementType.alignLog2)\n        : module.i32(elementType.alignLog2),\n      module.i32(arrayInstance.id),\n      program.options.isWasm64\n        ? module.i64(i64_low(source), i64_high(source))\n        : module.i32(i64_low(source))\n    ], reportNode);\n    this.currentType = arrayInstance.type;\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    var arrayInstance = assert(contextualType.getClass());\n    var arrayType = arrayInstance.type;\n    var typeArguments = assert(arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype));\n    var elementType = typeArguments[0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __newBuffer(bufferSize, id, buffer)\n        let expr = this.makeCallDirect(program.newBufferInstance, [\n          isWasm64\n            ? module.i64(bufferSize)\n            : module.i32(bufferSize),\n          module.i32(arrayInstance.id),\n          isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var indexedSet = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!indexedSet) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var arrayTypeRef = arrayType.toRef();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.newBufferInstance, [\n          isWasm64\n            ? module.i64(bufferSize)\n            : module.i32(bufferSize),\n          module.i32(arrayInstance.id)\n        ], expression),\n        arrayType.isManaged\n      )\n    );\n    for (let i = 0; i < length; ++i) {\n      // array[i] = value\n      stmts.push(\n        module.call(indexedSet.internalName, [\n          module.local_get(tempThis.index, arrayTypeRef),\n          module.i32(i),\n          values[i]\n        ], TypeRef.None)\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, arrayTypeRef)\n    );\n    flow.freeTempLocal(tempThis);\n    if (length) this.compileFunction(indexedSet);\n    this.currentType = arrayType;\n    return module.flatten(stmts, arrayTypeRef);\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.getClass();\n    if (!classReference) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.kind == ElementKind.INTERFACE) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        expression.range, \"Interface hidden classes\"\n      );\n      return module.unreachable();\n    }\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = flow.getTempLocal(classType);\n    var classTypeRef = classType.toRef();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member = classReference.getMember(memberName);\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT);\n      exprs.push(\n        module.call(fieldInstance.internalSetterName, [\n          module.local_get(tempLocal.index, classTypeRef),\n          expr\n        ], TypeRef.None)\n      );\n      this.compileFieldSetter(fieldInstance);\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by generated ctor\n      }\n\n      if (fieldType.isReference) {\n        if (!fieldType.isNullableReference) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.BOOL:\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.call(fieldInstance.internalSetterName, [\n              module.local_get(tempLocal.index, classTypeRef),\n              this.makeZero(fieldType)\n            ], TypeRef.None)\n          );\n          this.compileFieldSetter(fieldInstance);\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // generate the default constructor\n    var ctor = this.ensureConstructor(classReference, expression);\n    // note that this is not checking field initialization within the ctor, but\n    // instead checks conditions above with provided fields taken into account.\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(ctor, [], Constraints.NONE, expression),\n        classType.isManaged\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, classTypeRef)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, classTypeRef);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    if (target.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) &&\n      classReference.prototype == classPrototype &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      // e.g. `arr: Array<T> = new Array()`\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        cloneMap(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        cloneMap(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var ctor = this.ensureConstructor(classInstance, expression);\n    if (!ctor.hasDecorator(DecoratorFlags.INLINE)) {\n      // Inlined ctors haven't been compiled yet and are checked upon inline\n      // compilation of their body instead.\n      this.checkFieldInitialization(classInstance, expression);\n    }\n    return this.compileInstantiate(ctor, expression.args, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(\n    /** Class wanting a constructor. */\n    classInstance: Class,\n    /** Report node. */\n    reportNode: Node\n  ): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // shortcut if already compiled\n      if (instance.is(CommonFlags.COMPILED)) return instance;\n      // do not attempt to compile if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n    } else {\n      // clone base constructor if a derived class. note that we cannot just\n      // call the base ctor since the derived class may have additional fields.\n      let baseClass = classInstance.base;\n      let contextualTypeArguments = cloneMap(classInstance.contextualTypeArguments);\n      if (baseClass) {\n        let baseCtor = this.ensureConstructor(baseClass, reportNode);\n        this.checkFieldInitialization(baseClass, reportNode);\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance,\n            // declaration is important, i.e. to access optional parameter initializers\n            (<FunctionDeclaration>baseCtor.declaration).clone()\n          ),\n          null,\n          baseCtor.signature,\n          contextualTypeArguments\n        );\n\n      // otherwise make a default constructor\n      } else {\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance, // bound\n            this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n              CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n            )\n          ),\n          null,\n          new Signature(this.program, null, classInstance.type, classInstance.type),\n          contextualTypeArguments\n        );\n      }\n\n      instance.set(CommonFlags.COMPILED);\n      instance.prototype.setResolvedInstance(\"\", instance);\n      if (classInstance.is(CommonFlags.MODULE_EXPORT)) {\n        instance.set(CommonFlags.MODULE_EXPORT);\n      }\n      classInstance.constructorInstance = instance;\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n\n      // generate body\n      let signature = instance.signature;\n      let module = this.module;\n      let sizeTypeRef = this.options.sizeTypeRef;\n      let stmts = new Array<ExpressionRef>();\n\n      // {\n      //   this = <COND_ALLOC>\n      //   IF_DERIVED: this = super(this, ...args)\n      //   this.a = X\n      //   this.b = Y\n      //   return this\n      // }\n      stmts.push(\n        this.makeConditionalAllocation(classInstance, 0)\n      );\n      if (baseClass) {\n        let parameterTypes = signature.parameterTypes;\n        let numParameters = parameterTypes.length;\n        let operands = new Array<ExpressionRef>(1 + numParameters);\n        operands[0] = module.local_get(0, sizeTypeRef);\n        for (let i = 1; i <= numParameters; ++i) {\n          operands[i] = module.local_get(i, parameterTypes[i - 1].toRef());\n        }\n        stmts.push(\n          module.local_set(0,\n            this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false),\n            baseClass.type.isManaged\n          )\n        );\n      }\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n      stmts.push(\n        module.local_get(0, sizeTypeRef)\n      );\n      flow.freeScopedLocals();\n      this.currentFlow = previousFlow;\n\n      // make the function\n      let locals = instance.localsByIndex;\n      let varTypes = new Array<TypeRef>(); // of temp. vars added while compiling initializers\n      let numOperands = 1 + signature.parameterTypes.length;\n      let numLocals = locals.length;\n      if (numLocals > numOperands) {\n        for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toRef());\n      }\n      let funcRef = module.addFunction(\n        instance.internalName,\n        signature.paramRefs,\n        signature.resultRefs,\n        varTypes,\n        module.flatten(stmts, sizeTypeRef)\n      );\n      instance.finalize(module, funcRef);\n    }\n\n    return instance;\n  }\n\n  /** Checks that all class fields have been initialized. */\n  checkFieldInitialization(classInstance: Class, relatedNode: Node | null = null): void {\n    if (classInstance.didCheckFieldInitialization) return;\n    classInstance.didCheckFieldInitialization = true;\n    var ctor = assert(classInstance.constructorInstance);\n    this.checkFieldInitializationInFlow(classInstance, ctor.flow, relatedNode);\n  }\n\n  /** Checks that all class fields have been initialized in the specified flow. */\n  checkFieldInitializationInFlow(classInstance: Class, flow: Flow, relatedNode: Node | null = null): void {\n    var members = classInstance.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let element = _values[i];\n        if (element.kind == ElementKind.FIELD && element.parent == classInstance) {\n          let field = <Field>element;\n          if (!field.initializerNode && !flow.isThisFieldFlag(field, FieldFlags.INITIALIZED)) {\n            if (!field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n              if (relatedNode) {\n                this.errorRelated(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  relatedNode.range,\n                  field.internalName\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  field.internalName\n                );\n              }\n            }\n          } else if (field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n            if (field.type.isReference) {\n              this.warning( // involves a runtime check\n                DiagnosticCode.Property_0_is_always_assigned_before_being_used,\n                field.identifierNode.range,\n                field.internalName\n              );\n            } else {\n              this.pedantic( // is a nop anyway\n                DiagnosticCode.Unnecessary_definite_assignment,\n                field.identifierNode.range\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  compileInstantiate(\n    /** Constructor to call. */\n    ctorInstance: Function,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(ctorInstance.is(CommonFlags.CONSTRUCTOR));\n    var parent = ctorInstance.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    var classInstance = <Class>parent;\n    if (classInstance.type.isUnmanaged || ctorInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect(\n      ctorInstance,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != TypeRef.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toRef());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, TypeRef.I32);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        thisExpression = assert(thisExpression);\n        let thisExpr = this.compileExpression(\n          thisExpression,\n          (<Class>fieldParent).type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let thisType = this.currentType;\n        if (\n          flow.actualFunction.is(CommonFlags.CONSTRUCTOR) &&\n          thisExpression.kind == NodeKind.THIS &&\n          !flow.isThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED) &&\n          !fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED)\n        ) {\n          this.errorRelated(\n            DiagnosticCode.Property_0_is_used_before_being_assigned,\n            expression.range,\n            fieldInstance.identifierNode.range,\n            fieldInstance.internalName\n          );\n        }\n        if (thisType.isNullableReference) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        let ret = module.load(\n          fieldType.byteSize,\n          fieldType.isSignedIntegerValue,\n          thisExpr,\n          fieldType.toRef(),\n          fieldInstance.memoryOffset\n        );\n        if (fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED) && fieldType.isReference && !fieldType.isNullableReference) {\n          ret = this.makeRuntimeNonNullCheck(ret, fieldType, expression);\n        }\n        return ret;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = propertyInstance.getterInstance;\n        if (!getterInstance) return module.unreachable(); // failed earlier\n        let thisArg: ExpressionRef = 0;\n        if (getterInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(getterInstance, [], expression, thisArg);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n        if (!functionInstance) return module.unreachable();\n        if (!this.compileFunction(functionInstance)) return module.unreachable();\n        this.currentType = functionInstance.type;\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    this.error(\n      DiagnosticCode.Expression_does_not_compile_to_a_value_at_runtime,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType,\n      expression.condition\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType);\n    var ifThenType = this.currentType;\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType);\n    var ifElseType = this.currentType;\n\n    if (ctxType == Type.void) { // values, including type mismatch, are irrelevant\n      if (ifThenType != Type.void) {\n        ifThenExpr = module.drop(ifThenExpr);\n        ifThenType = Type.void;\n      }\n      if (ifElseType != Type.void) {\n        ifElseExpr = module.drop(ifElseExpr);\n        ifElseType = Type.void;\n      }\n      this.currentType = Type.void;\n    } else {\n      let commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n      if (!commonType) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          ifElse.range, ifElseType.toString(), ifThenType.toString()\n        );\n        this.currentType = ctxType;\n        return module.unreachable();\n      }\n      ifThenExpr = this.convertExpression(ifThenExpr, ifThenType, commonType, false, ifThen);\n      ifThenType = commonType;\n      ifElseExpr = this.convertExpression(ifElseExpr, ifElseType, commonType, false, ifElse);\n      ifElseType = commonType;\n      this.currentType = commonType;\n    }\n\n    ifThenFlow.freeScopedLocals();\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    return module.if(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue,\n        this.currentType.isManaged\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (isInstance) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.BOOL:\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              BinaryOp.AddSize,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.BOOL:\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              BinaryOp.SubSize,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var typeRef = tempLocal.type.toRef();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, typeRef)\n    ], typeRef); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PLUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MINUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.BOOL:\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              BinaryOp.SubSize,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.BOOL:\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              BinaryOp.AddSize,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.BOOL:\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              BinaryOp.SubSize,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          // fall back to compare by value\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType, expression.operand));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.isFloatValue\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        expr = this.convertExpression(expr, this.currentType, this.currentType.intType, false, expression.operand);\n\n        switch (this.currentType.kind) {\n          case TypeKind.BOOL:\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              BinaryOp.XorSize,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      case Token.DOT_DOT_DOT: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range, \"Spread operator\"\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, operand);\n            if (type.isReference) {\n              let signatureReference = type.getSignature();\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.getClass();\n                if (classReference) {\n                  if (classReference.prototype == stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"externref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isNumericValue) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.sizeTypeRef)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.Extend8I32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.Extend16I32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode)\n            && this.checkFeatureEnabled(Feature.GC, reportNode);\n      }\n    }\n    let classReference = type.getClass();\n    if (classReference) {\n      do {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    } else {\n      let signatureReference = type.getSignature();\n      if (signatureReference) {\n        let thisType = signatureReference.thisType;\n        if (thisType) {\n          if (!this.checkTypeSupported(thisType, reportNode)) {\n            return false;\n          }\n        }\n        let parameterTypes = signatureReference.parameterTypes;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n          if (!this.checkTypeSupported(parameterTypes[i], reportNode)) {\n            return false;\n          }\n        }\n        let returnType = signatureReference.returnType;\n        if (!this.checkTypeSupported(returnType, reportNode)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    var parameterNodes = reportNode.parameters;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      let parameterReportNode: Node;\n      if (parameterNodes.length > i) parameterReportNode = parameterNodes[i];\n      else parameterReportNode = reportNode;\n      if (!this.checkTypeSupported(parameterTypes[i], parameterReportNode)) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    let type = getExpressionType(expr);\n    if (type == TypeRef.Unreachable)\n      return ConditionKind.UNKNOWN;\n\n    assert(type == TypeRef.I32);\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF: return module.ref_null(type.toRef());\n      case TypeKind.I31REF: return module.i31_new(module.i32(0));\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.BOOL:\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n      case TypeKind.I31REF: return module.i31_new(module.i32(1));\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n      case TypeKind.V128: return module.v128(v128_ones);\n      case TypeKind.I31REF: return module.i31_new(module.i32(-1));\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: return expr;\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        let options = this.options;\n        if (\n          options.shrinkLevelHint > 1 &&\n          options.hasFeature(Feature.NONTRAPPING_F2I)\n        ) {\n          // Use more compact but slower 5-byte (3 bytes in best case) approach\n          // !!(i32.trunc_sat_f32_u(f32.ceil(f32.abs(x))))\n          return module.unary(UnaryOp.EqzI32,\n            module.unary(UnaryOp.EqzI32,\n              module.unary(UnaryOp.TruncSatF32ToU32,\n                module.unary(UnaryOp.CeilF32,\n                  module.unary(UnaryOp.AbsF32, expr)\n                )\n              )\n            )\n          );\n        } else {\n          // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n          // (reinterpret<u32>(x) & 0x7FFFFFFF) - 1 <= 0x7F800000 - 1\n          //\n          // and finally:\n          // (reinterpret<u32>(x) << 1) - (1 << 1) <= ((0x7F800000 - 1) << 1)\n          return module.binary(BinaryOp.LeU32,\n            module.binary(BinaryOp.SubI32,\n              module.binary(BinaryOp.ShlI32,\n                module.unary(UnaryOp.ReinterpretF32ToI32, expr),\n                module.i32(1)\n              ),\n              module.i32(2) // 1 << 1\n            ),\n            module.i32(0xFEFFFFFE) // (0x7F800000 - 1) << 1\n          );\n        }\n      }\n      case TypeKind.F64: {\n        let options = this.options;\n        if (\n          options.shrinkLevelHint > 1 &&\n          options.hasFeature(Feature.NONTRAPPING_F2I)\n        ) {\n          // Use more compact but slower 5-byte (3 bytes in best case) approach\n          // !!(i32.trunc_sat_f64_u(f64.ceil(f64.abs(x))))\n          return module.unary(UnaryOp.EqzI32,\n            module.unary(UnaryOp.EqzI32,\n              module.unary(UnaryOp.TruncSatF64ToU32,\n                module.unary(UnaryOp.CeilF64,\n                  module.unary(UnaryOp.AbsF64, expr)\n                )\n              )\n            )\n          );\n        } else {\n          // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n          // (reinterpret<u64>(x) & 0x7FFFFFFFFFFFFFFF) - 1 <= 0x7FF0000000000000 - 1\n          //\n          // and finally:\n          // (reinterpret<u64>(x) << 1) - (1 << 1) <= ((0x7FF0000000000000 - 1) << 1)\n          return module.binary(BinaryOp.LeU64,\n            module.binary(BinaryOp.SubI64,\n              module.binary(BinaryOp.ShlI64,\n                module.unary(UnaryOp.ReinterpretF64ToI64, expr),\n                module.i64(1)\n              ),\n              module.i64(2) // 1 << 1\n            ),\n            module.i64(0xFFFFFFFE, 0xFFDFFFFF) // (0x7FF0000000000000 - 1) << 1\n          );\n        }\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AnyTrueV128, expr);\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        // Needs to be true (i.e. not zero) when the ref is _not_ null,\n        // which means `ref.is_null` returns false (i.e. zero).\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      case TypeKind.VOID:\n      default: {\n        this.error(\n          DiagnosticCode.An_expression_of_type_0_cannot_be_tested_for_truthiness,\n          reportNode.range, type.toString()\n        );\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes a string conversion of the given expression. */\n  makeToString(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var stringType = this.program.stringInstance.type;\n    if (type == stringType) {\n      return expr;\n    }\n    var classType = type.getClassOrWrapper(this.program);\n    if (classType) {\n      let toStringInstance = classType.getMethod(\"toString\");\n      if (toStringInstance) {\n        let toStringSignature = toStringInstance.signature;\n        if (!this.checkCallSignature( // reports\n          toStringSignature,\n          0,\n          true,\n          reportNode\n        )) {\n          this.currentType = stringType;\n          return this.module.unreachable();\n        }\n        if (!type.isStrictlyAssignableTo(assert(toStringSignature.thisType))) {\n          this.errorRelated(\n            DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n            reportNode.range, toStringInstance.identifierAndSignatureRange\n          );\n          this.currentType = stringType;\n          return this.module.unreachable();\n        }\n        let toStringReturnType = toStringSignature.returnType;\n        if (!toStringReturnType.isStrictlyAssignableTo(stringType)) {\n          this.errorRelated(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            reportNode.range, toStringInstance.identifierAndSignatureRange, toStringReturnType.toString(), stringType.toString()\n          );\n          this.currentType = stringType;\n          return this.module.unreachable();\n        }\n        return this.makeCallDirect(toStringInstance, [ expr ], reportNode);\n      }\n    }\n    this.error(\n      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n      reportNode.range, type.toString(), stringType.toString()\n    );\n    this.currentType = stringType;\n    return this.module.unreachable();\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    if (classInstance.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let allocInstance = program.allocInstance;\n      this.compileFunction(allocInstance);\n      return module.call(allocInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset)\n      ], options.sizeTypeRef);\n    } else {\n      let newInstance = program.newInstance;\n      this.compileFunction(newInstance);\n      return module.call(newInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset),\n        module.i32(classInstance.id)\n      ], options.sizeTypeRef);\n    }\n  }\n\n  /** Makes a conditional allocation where `this` might not have been initialized yet. */\n  makeConditionalAllocation(\n    classInstance: Class,\n    thisIndex: i32\n  ): ExpressionRef {\n    var module = this.module;\n    var classType = classInstance.type;\n    var classTypeRef = classType.toRef();\n    assert(classTypeRef == this.options.sizeTypeRef);\n    return module.if(\n      module.unary(classTypeRef == TypeRef.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n        module.local_get(thisIndex, classTypeRef)\n      ),\n      module.local_set(thisIndex,\n        this.makeAllocation(classInstance),\n        classInstance.type.isManaged\n      )\n    );\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline ? flow.lookupLocal(CommonNames.this_)!.index : 0;\n    var sizeTypeRef = this.options.sizeTypeRef;\n    var nonParameterFields: Field[] | null = null;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldPrototype = field.prototype;\n      let parameterIndex = fieldPrototype.parameterIndex;\n\n      // Defer non-parameter fields until parameter fields are initialized\n      if (parameterIndex < 0) {\n        if (!nonParameterFields) nonParameterFields = new Array();\n        nonParameterFields.push(field);\n        continue;\n      }\n\n      // Initialize constructor parameter field\n      let fieldType = field.type;\n      let fieldTypeRef = fieldType.toRef();\n      assert(!fieldPrototype.initializerNode);\n      this.compileFieldSetter(field);\n      stmts.push(\n        module.call(field.internalSetterName, [\n          module.local_get(thisLocalIndex, sizeTypeRef),\n          module.local_get(\n            isInline\n              ? flow.lookupLocal(field.name)!.index\n              : 1 + parameterIndex, // `this` is local 0\n            fieldTypeRef\n          )\n        ], TypeRef.None)\n      );\n    }\n\n    // Initialize deferred non-parameter fields\n    if (nonParameterFields) {\n      for (let i = 0, k = nonParameterFields.length; i < k; ++i) {\n        let field = unchecked(nonParameterFields[i]);\n        let fieldType = field.type;\n        let fieldPrototype = field.prototype;\n        let initializerNode = fieldPrototype.initializerNode;\n        assert(fieldPrototype.parameterIndex < 0);\n        this.compileFieldSetter(field);\n        stmts.push(\n          module.call(field.internalSetterName, [\n            module.local_get(thisLocalIndex, sizeTypeRef),\n            initializerNode // use initializer if present, otherwise initialize with zero\n              ? this.compileExpression(initializerNode, fieldType, Constraints.CONV_IMPLICIT)\n              : this.makeZero(fieldType)\n          ], TypeRef.None)\n        );\n      }\n    }\n\n    this.currentType = Type.void;\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return this.module.unreachable();\n\n    var stringInstance = program.stringInstance;\n    var messageArg: ExpressionRef;\n    if (message) {\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    return this.makeStaticAbort(messageArg, codeLocation);\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeStaticAbort(\n    /** Message argument of type string. May be zero. */\n    messageExpr: ExpressionRef,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var filenameExpr = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageExpr,\n          filenameExpr,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        TypeRef.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n\n    var staticAbortCallExpr = this.makeStaticAbort(\n      this.ensureStaticString(\"unexpected null\"),\n      reportNode\n    ); // TODO: throw\n\n    if (type.isExternalReference) {\n      let nonNullExpr = module.local_get(temp.index, type.toRef());\n      if (this.options.hasFeature(Feature.GC)) {\n        nonNullExpr = module.ref_as_nonnull(nonNullExpr);\n      }\n      expr = module.if(\n        module.ref_is_null(\n          module.local_tee(temp.index, expr, false)\n        ),\n        staticAbortCallExpr,\n        nonNullExpr\n      );\n    } else {\n      expr = module.if(\n        module.local_tee(temp.index, expr, type.isManaged),\n        module.local_get(temp.index, type.toRef()),\n        staticAbortCallExpr\n      );\n    }\n    flow.freeTempLocal(temp);\n    this.currentType = type.nonNullableType;\n    return expr;\n  }\n\n  /** Makes a runtime downcast check, e.g. on `<Child>parent`. */\n  makeRuntimeDowncastCheck(\n    /** Expression being downcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.isReference && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n\n    var staticAbortCallExpr = this.makeStaticAbort(\n      this.ensureStaticString(\"unexpected downcast\"),\n      reportNode\n    ); // TODO: throw\n\n    if (!toType.isNullableReference || flow.isNonnull(expr, type)) {\n      // Simplify if the value cannot be `null`. If toType is non-nullable, a\n      // null-check would have been emitted separately so is not necessary here.\n      expr = module.if(\n        module.call(instanceofInstance.internalName, [\n          module.local_tee(temp.index, expr, type.isManaged),\n          module.i32(toType.classReference!.id)\n        ], TypeRef.I32),\n        module.local_get(temp.index, type.toRef()),\n        staticAbortCallExpr\n      );\n    } else {\n      expr = module.if(\n        module.local_tee(temp.index, expr, type.isManaged),\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(temp.index, type.toRef()),\n            module.i32(toType.classReference!.id)\n          ], TypeRef.I32),\n          module.local_get(temp.index, type.toRef()),\n          staticAbortCallExpr\n        ),\n        module.usize(0)\n      );\n    }\n    flow.freeTempLocal(temp);\n    this.currentType = toType;\n    return expr;\n  }\n}\n\n// helpers\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  // override module name if a `module` statement is present\n  let overriddenModuleName = declaration.overriddenModuleName;\n  if (overriddenModuleName) mangleImportName_moduleName = overriddenModuleName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.args;\n  if (args && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n", "import {\n  CommonFlags\n} from \"../common\";\n\nimport {\n  Global,\n  Program,\n  Function,\n  Class,\n  Interface,\n  Enum,\n  ElementKind,\n  Field,\n  Element\n} from \"../program\";\n\nimport {\n  Type,\n  TypeFlags\n} from \"../types\";\n\nimport {\n  CharCode,\n  escapeString,\n  indent, isIdentifier\n} from \"../util\";\n\nimport {\n  ExportsWalker\n} from \"./util\";\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program, esm: bool = true): string {\n    return new TSDBuilder(program, esm).build();\n  }\n\n  private esm: bool;\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private seenObjectTypes: Map<Class,string> = new Map();\n  private deferredTypings: string[] = new Array();\n\n  /** Constructs a new TypeScript definitions builder. */\n  constructor(program: Program, esm: bool, includePrivate: bool = false) {\n    super(program, includePrivate);\n    this.esm = esm;\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var type = element.type;\n    var tsType = this.toTypeScriptType(type, Mode.EXPORT);\n    indent(sb, this.indentLevel);\n    sb.push(\"/** \");\n    sb.push(element.internalName);\n    sb.push(\" */\\n\");\n    indent(sb, this.indentLevel);\n    sb.push(\"export \");\n    if (this.esm) sb.push(\"declare \");\n    sb.push(\"const \");\n    sb.push(name);\n    sb.push(\": {\\n\");\n    indent(sb, ++this.indentLevel);\n    sb.push(\"/** @type `\");\n    sb.push(type.toString());\n    sb.push(\"` */\\n\");\n    indent(sb, this.indentLevel);\n    sb.push(\"get value(): \");\n    sb.push(tsType);\n    if (!element.is(CommonFlags.CONST)) {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"set value(value: \");\n      sb.push(tsType);\n      sb.push(\");\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"};\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"/** \");\n    sb.push(element.internalName);\n    sb.push(\" */\\n\");\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (this.esm) sb.push(\"declare \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind != ElementKind.ENUMVALUE) continue;\n        indent(sb, this.indentLevel);\n        sb.push(\"/** @type `i32` */\\n\");\n        indent(sb, this.indentLevel);\n        sb.push(memberName);\n        sb.push(\",\\n\");\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(\"/**\\n\");\n    indent(sb, this.indentLevel);\n    sb.push(\" * \");\n    sb.push(element.internalName);\n    sb.push(\"\\n\");\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n    for (let i = 0; i < numParameters; ++i) {\n      indent(sb, this.indentLevel);\n      sb.push(\" * @param \");\n      sb.push(element.getParameterName(i));\n      sb.push(\" `\");\n      sb.push(parameterTypes[i].toString());\n      sb.push(\"`\\n\");\n    }\n    var returnType = signature.returnType;\n    if (returnType != Type.void) {\n      indent(sb, this.indentLevel);\n      sb.push(\" * @returns `\");\n      sb.push(returnType.toString());\n      sb.push(\"`\\n\");\n    }\n    indent(sb, this.indentLevel);\n    sb.push(\" */\\n\");\n    indent(sb, this.indentLevel);\n    sb.push(\"export \");\n    if (this.esm) sb.push(\"declare \");\n    sb.push(\"function \");\n    sb.push(name);\n    sb.push(\"(\");\n    var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      sb.push(element.getParameterName(i));\n      if (i >= requiredParameters) sb.push(\"?\");\n      sb.push(\": \");\n      sb.push(this.toTypeScriptType(parameterTypes[i], Mode.IMPORT));\n    }\n    sb.push(\"): \");\n    sb.push(this.toTypeScriptType(returnType, Mode.EXPORT));\n    sb.push(\";\\n\");\n  }\n\n  visitClass(name: string, element: Class): void {\n    // not implemented\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    // not implemented\n  }\n\n  visitField(name: string, element: Field): void {\n    // not implemented\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    // not implemented\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // not implemented\n  }\n\n  build(): string {\n    var sb = this.sb;\n    if (!this.esm) {\n      sb.push(\"declare namespace __AdaptedExports {\\n\");\n      ++this.indentLevel;\n    }\n    if (this.program.options.exportMemory) {\n      indent(sb, this.indentLevel);\n      sb.push(\"/** Exported memory */\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(`export ${this.esm ? \"declare \" : \"\"}const memory: WebAssembly.Memory;\\n`);\n    }\n    if (this.program.options.exportTable) {\n      indent(sb, this.indentLevel);\n      sb.push(\"/** Exported table */\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(`export ${this.esm ? \"declare \" : \"\"}const table: WebAssembly.Table;\\n`);\n    }\n    this.walk();\n    if (!this.esm) {\n      --this.indentLevel;\n      sb.push(\"}\\n\");\n    }\n    var deferredTypes = this.deferredTypings;\n    for (let i = 0, k = deferredTypes.length; i < k; ++i) {\n      sb.push(deferredTypes[i]);\n    }\n    if (!this.esm) {\n      sb.push(\"/** Instantiates the compiled WebAssembly module with the given imports. */\\n\");\n      sb.push(\"export declare function instantiate(module: WebAssembly.Module, imports: {\\n\");\n      let moduleImports = this.program.moduleImports;\n      for (let _keys = Map_keys(moduleImports), i = 0, k = _keys.length; i < k; ++i) {\n        let moduleName = _keys[i];\n        sb.push(\"  \");\n        if (isIdentifier(moduleName)) {\n          sb.push(moduleName);\n        } else {\n          sb.push(\"\\\"\");\n          sb.push(escapeString(moduleName, CharCode.DOUBLEQUOTE));\n          sb.push(\"\\\"\");\n        }\n        sb.push(\": unknown,\\n\");\n      }\n      sb.push(\"}): Promise<typeof __AdaptedExports>;\\n\");\n    }\n    return sb.join(\"\");\n  }\n\n  isPlainObject(clazz: Class): bool {\n    // A plain object does not inherit and does not have a constructor or private properties\n    if (clazz.base) return false;\n    var members = clazz.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = _values[i];\n        if (member.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED)) return false;\n        if (member.is(CommonFlags.CONSTRUCTOR)) {\n          // a generated constructor is ok\n          if (member.declaration.range != this.program.nativeRange) return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  toTypeScriptType(type: Type, mode: Mode): string {\n    if (type.isInternalReference) {\n      const sb = new Array<string>();\n      const clazz = assert(type.getClassOrWrapper(this.program));\n      if (clazz.extends(this.program.arrayBufferInstance.prototype)) {\n        sb.push(\"ArrayBuffer\");\n      } else if (clazz.extends(this.program.stringInstance.prototype)) {\n        sb.push(\"string\");\n      } else if (clazz.extends(this.program.arrayPrototype)) {\n        const valueType = clazz.getArrayValueType();\n        sb.push(\"Array<\");\n        sb.push(this.toTypeScriptType(valueType, mode));\n        sb.push(\">\");\n      } else if (clazz.extends(this.program.staticArrayPrototype)) {\n        const valueType = clazz.getArrayValueType();\n        sb.push(\"ArrayLike<\");\n        sb.push(this.toTypeScriptType(valueType, mode));\n        sb.push(\">\");\n      } else if (clazz.extends(this.program.arrayBufferViewInstance.prototype)) {\n        const valueType = clazz.getArrayValueType();\n        if (valueType == Type.i8) {\n          sb.push(\"Int8Array\");\n        } else if (valueType == Type.u8) {\n          if (clazz.extends(this.program.uint8ClampedArrayPrototype)) {\n            sb.push(\"Uint8ClampedArray\");\n          } else {\n            sb.push(\"Uint8Array\");\n          }\n        } else if (valueType == Type.i16) {\n          sb.push(\"Int16Array\");\n        } else if (valueType == Type.u16) {\n          sb.push(\"Uint16Array\");\n        } else if (valueType == Type.i32) {\n          sb.push(\"Int32Array\");\n        } else if (valueType == Type.u32) {\n          sb.push(\"Uint32Array\");\n        } else if (valueType == Type.i64) {\n          sb.push(\"BigInt64Array\");\n        } else if (valueType == Type.u64) {\n          sb.push(\"BigUint64Array\");\n        } else if (valueType == Type.f32) {\n          sb.push(\"Float32Array\");\n        } else if (valueType == Type.f64) {\n          sb.push(\"Float64Array\");\n        } else {\n          sb.push(\"unknown\");\n        }\n      } else {\n        let seenObjectTypes = this.seenObjectTypes;\n        let typeName: string;\n        if (seenObjectTypes.has(clazz)) {\n          typeName = assert(seenObjectTypes.get(clazz));\n          sb.push(typeName);\n          if (this.isPlainObject(clazz)) {\n            sb.push(mode == Mode.EXPORT ? \"<never>\" : \"<undefined>\");\n          }\n        } else {\n          let isPlain = this.isPlainObject(clazz);\n          typeName = `${isPlain ? \"__Record\" : \"__Internref\"}${clazz.id}`;\n          sb.push(typeName);\n          seenObjectTypes.set(clazz, typeName);\n          if (isPlain) {\n            sb.push(mode == Mode.EXPORT ? \"<never>\" : \"<undefined>\");\n            this.deferredTypings.push(this.makeRecordType(clazz, mode));\n          } else {\n            this.deferredTypings.push(this.makeInternrefType(clazz));\n          }\n        }\n      }\n      if (type.is(TypeFlags.NULLABLE)) {\n        sb.push(\" | null\");\n      }\n      return sb.join(\"\");\n    } else {\n      if (type == Type.bool) {\n        return \"boolean\";\n      }\n      if (type == Type.void) {\n        return \"void\";\n      }\n      if (type.isNumericValue) {\n        if (type.isLongIntegerValue) {\n          return \"bigint\";\n        }\n        return \"number\";\n      }\n    }\n    return \"unknown\";\n  }\n\n  makeRecordType(clazz: Class, mode: Mode): string {\n    var sb = new Array<string>();\n    var members = clazz.members;\n    sb.push(\"/** \");\n    sb.push(clazz.internalName);\n    sb.push(\" */\\ndeclare interface __Record\");\n    sb.push(clazz.id.toString());\n    sb.push(\"<TOmittable> {\\n\");\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = _keys[i];\n        let member = assert(members.get(memberName));\n        if (member.kind != ElementKind.FIELD) continue;\n        let field = <Field>member;\n        sb.push(\"  /** @type `\");\n        sb.push(field.type.toString());\n        sb.push(\"` */\\n  \");\n        sb.push(field.name);\n        sb.push(\": \");\n        sb.push(this.toTypeScriptType(field.type, mode));\n        if (this.fieldAcceptsUndefined(field.type)) {\n          sb.push(\" | TOmittable\");\n        }\n        sb.push(\";\\n\");\n      }\n    }\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n\n  fieldAcceptsUndefined(type: Type): bool {\n    if (type.isInternalReference) {\n      return type.is(TypeFlags.NULLABLE);\n    }\n    return true;\n  }\n\n  makeInternrefType(clazz: Class): string {\n    var sb = new Array<string>();\n    sb.push(\"/** \");\n    sb.push(clazz.internalName);\n    sb.push(\" */\\n\");\n    sb.push(\"declare class __Internref\");\n    sb.push(clazz.id.toString());\n    sb.push(\" extends Number {\\n\");\n    var base: Class | null = clazz;\n    do {\n      sb.push(\"  private __nominal\");\n      sb.push(base.id.toString());\n      sb.push(\": symbol;\\n\");\n      base = base.base;\n    } while (base);\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n// Helpers\n\nenum Mode {\n  IMPORT,\n  EXPORT\n}\n", "/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport {\n  Target,\n  Runtime,\n  Feature\n} from \"./common\";\n\nimport {\n  Compiler,\n  Options\n} from \"./compiler\";\n\nimport {\n  TSDBuilder,\n  JSBuilder\n} from \"./bindings\";\n\nimport {\n  Range,\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\nimport { Source } from \"./ast\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\nexport function setRuntime(options: Options, runtime: Runtime): void {\n  options.runtime = runtime;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `exportMemory` option. */\nexport function setExportMemory(options: Options, exportMemory: bool): void {\n  options.exportMemory = exportMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `initialMemory` option. */\nexport function setInitialMemory(options: Options, initialMemory: u32): void {\n  options.initialMemory = initialMemory;\n}\n\n/** Sets the `maximumMemory` option. */\nexport function setMaximumMemory(options: Options, maximumMemory: u32): void {\n  options.maximumMemory = maximumMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Adds a 'globalAliases' value. */\nexport function addGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Removes a 'globalAliases' value. */\nexport function removeGlobalAlias(options: Options, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (globalAliases) globalAliases.delete(alias);\n}\n\n/** Sets the `exportStart` option. */\nexport function setExportStart(options: Options, exportStart: string | null): void {\n  options.exportStart = exportStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sets the `exportRuntime` option. */\nexport function setExportRuntime(options: Options, exportRuntime: bool): void {\n  options.exportRuntime = exportRuntime;\n}\n\n/** Default stack size. */\nexport const DEFAULT_STACK_SIZE = 16384;\n\n/** Sets the `stackSize` option. */\nexport function setStackSize(options: Options, stackSize: i32): void {\n  options.stackSize = stackSize;\n}\n\n/** Sets the bundle semantic version. */\nexport function setBundleVersion(\n  options: Options,\n  bundleMajorVersion: i32,\n  bundleMinorVersion: i32,\n  bundlePatchVersion: i32,\n): void {\n  options.bundleMajorVersion = bundleMajorVersion;\n  options.bundleMinorVersion = bundleMinorVersion;\n  options.bundlePatchVersion = bundlePatchVersion;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n/** Garbage collection. */\nexport const FEATURE_GC = Feature.GC;\n/** Memory64. */\nexport const FEATURE_MEMORY64 = Feature.MEMORY64;\n/** Function references. */\nexport const FEATURE_FUNCTION_REFERENCES = Feature.FUNCTION_REFERENCES;\n/** Relaxed SIMD. */\nexport const FEATURE_RELAXED_SIMD = Feature.RELAXED_SIMD;\n/** Extended const expressions. */\nexport const FEATURE_EXTENDED_CONST = Feature.EXTENDED_CONST;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Gives the compiler a hint of the emitted module's basename. */\nexport function setBasenameHint(options: Options, basename: string): void {\n  options.basenameHint = basename;\n}\n\n/** Gives the compiler a hint that bindings will be generated. */\nexport function setBindingsHint(options: Options, bindings: bool): void {\n  options.bindingsHint = bindings;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\nexport function setDebugInfo(options: Options, debug: bool): void {\n  options.debugInfo = debug;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Gets the code of a diagnostic message. */\nexport function getDiagnosticCode(diagnostic: DiagnosticMessage): i32 {\n  return diagnostic.code;\n}\n\n/** Gets the category of a diagnostic message. */\nexport function getDiagnosticCategory(diagnostic: DiagnosticMessage): DiagnosticCategory {\n  return diagnostic.category;\n}\n\n/** Gets the textual message of a diagnostic message. */\nexport function getDiagnosticMessage(diagnostic: DiagnosticMessage): string {\n  return diagnostic.message;\n}\n\n/** Gets the primary range, if any, of a diagnostic message. */\nexport function getDiagnosticRange(diagnostic: DiagnosticMessage): Range | null {\n  return diagnostic.range;\n}\n\n/** Gets the related range, if any, of a diagnostic message. */\nexport function getDiagnosticRelatedRange(diagnostic: DiagnosticMessage): Range | null {\n  return diagnostic.relatedRange;\n}\n\n/** Gets a range's start offset. */\nexport function getRangeStart(range: Range): i32 {\n  return range.start;\n}\n\n/** Gets a range's end offsset. */\nexport function getRangeEnd(range: Range): i32 {\n  return range.end;\n}\n\n/** Gets a range's relevant source. */\nexport function getRangeSource(range: Range): Source {\n  return range.source;\n}\n\n/** Gets a source's normalized path. */\nexport function getSourceNormalizedPath(source: Source): string {\n  return source.normalizedPath;\n}\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file, or `null` to indicate not found. */\n  text: string | null,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program): void {\n  program.initialize();\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program, esm: bool): string {\n  return TSDBuilder.build(program, esm);\n}\n\n/** Builds JavaScript glue code for the specified program. */\nexport function buildJS(program: Program, esm: bool): string {\n  return JSBuilder.build(program, esm);\n}\n\n/** Gets the Binaryen module reference of a module. */\nexport function getBinaryenModuleRef(module: Module): usize {\n  return module.ref;\n}\n\n/** Validates a module. */\nexport function validate(module: Module): bool {\n  return module.validate();\n}\n\n/** Optimizes a module. */\nexport function optimize(\n  module: Module,\n  optimizeLevel: i32,\n  shrinkLevel: i32,\n  debugInfo: bool = false,\n  zeroFilledMemory: bool = false\n): void {\n  module.optimize(optimizeLevel, shrinkLevel, debugInfo, zeroFilledMemory);\n}\n", "/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  TemplateLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n  ModuleDeclaration,\n\n  DeclarationStatement,\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  IndexSignatureNode,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent,\n  escapeString\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n      case NodeKind.MODULE: {\n        this.visitModuleDeclaration(<ModuleDeclaration>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATURE: {\n        this.visitIndexSignature(<IndexSignatureNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name == value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.TEMPLATE: {\n        this.visitTemplateLiteralExpression(<TemplateLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    var range = node.range;\n    var hasExplicitSign = range.source.text.startsWith(\"-\", range.start);\n    this.sb.push(i64_to_string(node.value, !hasExplicitSign));\n  }\n\n  visitStringLiteral(str: string): void {\n    var sb = this.sb;\n    sb.push(\"\\\"\");\n    sb.push(escapeString(str, CharCode.DOUBLEQUOTE));\n    sb.push(\"\\\"\");\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitTemplateLiteralExpression(node: TemplateLiteralExpression): void {\n    var sb = this.sb;\n    var tag = node.tag;\n    var parts = node.parts;\n    var expressions = node.expressions;\n    if (tag) this.visitNode(tag);\n    sb.push(\"`\");\n    sb.push(escapeString(parts[0], CharCode.BACKTICK));\n    assert(parts.length == expressions.length + 1);\n    for (let i = 0, k = expressions.length; i < k; ++i) {\n      sb.push(\"${\");\n      this.visitNode(expressions[i]);\n      sb.push(\"}\");\n      sb.push(escapeString(parts[i + 1], CharCode.BACKTICK));\n    }\n    sb.push(\"`\");\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(node: Node): void {\n    this.visitNode(node);\n    var sb = this.sb;\n    if (\n      !sb.length ||                     // leading EmptyStatement\n      node.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      node.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var indexSignature = node.indexSignature;\n    var members = node.members;\n    var numMembers = members.length;\n    if (indexSignature || numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      if (indexSignature) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(indexSignature);\n      }\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n    /* nop */\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members == null) {\n      sb.push(\"export *\");\n    } else if (members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignature(node: IndexSignatureNode): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitModuleDeclaration(node: ModuleDeclaration): void {\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DECLARE) {\n      sb.push(\"declare \");\n    }\n    sb.push(\"module \\\"\");\n    sb.push(escapeString(node.moduleName, CharCode.DOUBLEQUOTE));\n    sb.push(\"\\\"\");\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.args;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL && !initializer) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nexport * from \"./index-js\";\nimport * as assemblyscript from \"./index-js\";\nexport default assemblyscript;\n"],
  "mappings": "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AM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAC5C,EACME,GAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM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",
  "names": ["index_js_exports", "__export", "ASTBuilder", "ArrayLiteralExpression", "ArrowKind", "AssertionExpression", "AssertionKind", "AtomicRMWOp", "BinaryExpression", "BinaryModule", "BinaryOp", "BlockStatement", "BrOnOp", "BreakStatement", "CallExpression", "Class", "ClassDeclaration", "ClassExpression", "ClassPrototype", "CommaExpression", "CommentKind", "CommentNode", "CommonFlags", "CommonNames", "CompiledExpression", "Compiler", "ConditionKind", "ConstantValueKind", "Constraints", "ConstructorExpression", "ContinueStatement", "DEFAULT_STACK_SIZE", "DeclarationStatement", "DeclaredElement", "DecoratorFlags", "DecoratorKind", "DecoratorNode", "DiagnosticCategory", "DiagnosticCode", "DiagnosticEmitter", "DiagnosticMessage", "DoStatement", "Element", "ElementAccessExpression", "ElementKind", "EmptyStatement", "Enum", "EnumDeclaration", "EnumValue", "EnumValueDeclaration", "ExportDefaultStatement", "ExportImportStatement", "ExportMember", "ExportNames", "ExportStatement", "Expression", "ExpressionId", "ExpressionRunnerFlags", "ExpressionStatement", "ExternalKind", "FEATURE_BULK_MEMORY", "FEATURE_EXCEPTION_HANDLING", "FEATURE_EXTENDED_CONST", "FEATURE_FUNCTION_REFERENCES", "FEATURE_GC", "FEATURE_MEMORY64", "FEATURE_MULTI_VALUE", "FEATURE_MUTABLE_GLOBALS", "FEATURE_NONTRAPPING_F2I", "FEATURE_REFERENCE_TYPES", "FEATURE_RELAXED_SIMD", "FEATURE_SIGN_EXTENSION", "FEATURE_SIMD", "FEATURE_TAIL_CALLS", "FEATURE_THREADS", "FalseExpression", "Feature", "FeatureFlags", "Field", "FieldDeclaration", "FieldFlags", "FieldPrototype", "File", "FloatLiteralExpression", "Flow", "FlowFlags", "ForOfStatement", "ForStatement", "Function", "FunctionDeclaration", "FunctionExpression", "FunctionPrototype", "FunctionTypeNode", "GETTER_PREFIX", "Global", "HeapTypeRef", "INDEX_SUFFIX", "INNER_DELIMITER", "INSTANCE_DELIMITER", "IdentifierExpression", "IdentifierHandling", "IfStatement", "ImportDeclaration", "ImportNames", "ImportStatement", "IndexSignature", "IndexSignatureNode", "InstanceOfExpression", "IntegerLiteralExpression", "Interface", "InterfaceDeclaration", "InterfacePrototype", "JSBuilder", "LIBRARY_PREFIX", "LIBRARY_SUBST", "LiteralExpression", "LiteralKind", "Local", "LocalFlags", "MemorySegment", "MethodDeclaration", "Module", "ModuleDeclaration", "NamedTypeNode", "Namespace", "NamespaceDeclaration", "NewExpression", "Node", "NodeKind", "NullExpression", "ObjectLiteralExpression", "OmittedExpression", "OperatorKind", "Options", "PARENT_SUBST", "PATH_DELIMITER", "Parameter", "ParameterKind", "ParameterNode", "ParenthesizedExpression", "Parser", "Precedence", "Program", "Property", "PropertyAccessExpression", "PropertyPrototype", "Range", "RefAsOp", "RefIsOp", "RegexpLiteralExpression", "Relooper", "ReportMode", "Resolver", "ReturnStatement", "Runtime", "RuntimeFeatures", "SETTER_PREFIX", "SIMDExtractOp", "SIMDLoadOp", "SIMDLoadStoreLaneOp", "SIMDReplaceOp", "SIMDShiftOp", "SIMDTernaryOp", "STATIC_DELIMITER", "STUB_DELIMITER", "SideEffects", "Signature", "Source", "SourceKind", "State", "Statement", "StringAsOp", "StringEncodeOp", "StringIterMoveOp", "StringLiteralExpression", "StringMeasureOp", "StringNewOp", "StringSliceWTFOp", "SuperExpression", "SwitchBuilder", "SwitchCase", "SwitchStatement", "TSDBuilder", "Target", "TemplateLiteralExpression", "TernaryExpression", "ThisExpression", "ThrowStatement", "Token", "Tokenizer", "TrueExpression", "TryStatement", "Type", "TypeDeclaration", "TypeDefinition", "TypeFlags", "TypeKind", "TypeName", "TypeNode", "TypeParameterNode", "TypeRef", "TypedElement", "Typeinfo", "TypeinfoFlags", "UnaryExpression", "UnaryOp", "UnaryPostfixExpression", "UnaryPrefixExpression", "VariableDeclaration", "VariableLikeDeclarationStatement", "VariableLikeElement", "VariableStatement", "VoidStatement", "WhileStatement", "addGlobalAlias", "allocPtrArray", "buildJS", "buildTSD", "compile", "createType", "diagnosticCategoryToColor", "diagnosticCategoryToString", "diagnosticCodeToString", "disableFeature", "enableFeature", "expandType", "featureToString", "findDecorator", "findUsedLocals", "formatDiagnosticMessage", "getBinaryLeft", "getBinaryOp", "getBinaryRight", "getBinaryenModuleRef", "getBlockChildAt", "getBlockChildCount", "getBlockName", "getBreakCondition", "getBreakName", "getCallOperandAt", "getCallOperandCount", "getCallTarget", "getConstValueF32", "getConstValueF64", "getConstValueI32", "getConstValueI64High", "getConstValueI64Low", "getConstValueV128", "getDefaultParameterName", "getDependee", "getDiagnosticCategory", "getDiagnosticCode", "getDiagnosticMessage", "getDiagnosticRange", "getDiagnosticRelatedRange", "getDropValue", "getExpressionId", "getExpressionType", "getFunctionBody", "getFunctionName", "getFunctionParams", "getFunctionResults", "getFunctionVars", "getGlobalGetName", "getGlobalInit", "getGlobalName", "getGlobalType", "getIfCondition", "getIfFalse", "getIfTrue", "getLoadBytes", "getLoadOffset", "getLoadPtr", "getLocalGetIndex", "getLocalSetIndex", "getLocalSetValue", "getLoopBody", "getLoopName", "getMemoryGrowDelta", "getRangeEnd", "getRangeSource", "getRangeStart", "getReturnValue", "getSelectCondition", "getSelectElse", "getSelectThen", "getSideEffects", "getSource", "getSourceNormalizedPath", "getStoreBytes", "getStoreOffset", "getStorePtr", "getStoreValue", "getTagName", "getTagParams", "getTagResults", "getUnaryOp", "getUnaryValue", "initializeProgram", "isConstExpressionNaN", "isConstNaN", "isConstNegZero", "isConstNonZero", "isConstZero", "isDeclaredElement", "isError", "isGlobalMutable", "isIllegalVariableIdentifier", "isInfo", "isLoadSigned", "isLocalTee", "isNullableType", "isTypeOmitted", "isTypedElement", "isWarning", "mangleInternalName", "mangleInternalPath", "mustPreserveSideEffects", "needsExplicitUnreachable", "newOptions", "newProgram", "nextDiagnostic", "nextFile", "operatorTokenToString", "optimize", "parse", "readString", "removeGlobalAlias", "setBasenameHint", "setBindingsHint", "setBundleVersion", "setDebugInfo", "setExportMemory", "setExportRuntime", "setExportStart", "setExportTable", "setImportMemory", "setImportTable", "setInitialMemory", "setLowMemoryLimit", "setMaximumMemory", "setMemoryBase", "setNoAssert", "setNoUnsafe", "setOptimizeLevelHints", "setPedantic", "setRuntime", "setSharedMemory", "setSourceMap", "setStackSize", "setTableBase", "setTarget", "tokenFromKeyword", "tokenIsAlsoIdentifier", "typesToRefs", "typesToString", "util_exports", "validate", "globalScope", "UnreachableError", "AssertionError", "message", "defaultComparator", "a", "b", "nanA", "nanB", "F64", "U64", "value", "shift", "y", "ifTrue", "ifFalse", "condition", "x", "isTrueish", "arr", "len", "index", "parts", "search", "replacment", "res", "arraySort", "comparator", "Ctr", "fn", "i", "buffer", "byteOffset", "length", "arg", "expr", "n", "binaryen_exports", "__export", "default", "__reExport", "binaryen_star", "_BinaryenTypeCreate", "_BinaryenTypeArity", "_BinaryenTypeExpand", "_BinaryenTypeGetHeapType", "_BinaryenTypeFromHeapType", "_BinaryenTypeIsNullable", "_BinaryenTypeFuncref", "_BinaryenTypeExternref", "_BinaryenTypeAnyref", "_BinaryenTypeEqref", "_BinaryenTypeI31ref", "_BinaryenTypeDataref", "_BinaryenTypeStringref", "_BinaryenTypeStringviewWTF8", "_BinaryenTypeStringviewWTF16", "_BinaryenTypeStringviewIter", "_BinaryenHeapTypeFunc", "_BinaryenHeapTypeExt", "_BinaryenHeapTypeAny", "_BinaryenHeapTypeEq", "_BinaryenHeapTypeI31", "_BinaryenHeapTypeData", "_BinaryenHeapTypeString", "_BinaryenHeapTypeStringviewWTF8", "_BinaryenHeapTypeStringviewWTF16", "_BinaryenHeapTypeStringviewIter", "_BinaryenModuleCreate", "_BinaryenModuleDispose", "_BinaryenSizeofLiteral", "_BinaryenLiteralInt32", "_BinaryenLiteralInt64", "_BinaryenLiteralFloat32", "_BinaryenLiteralFloat64", "_BinaryenLiteralVec128", "_BinaryenLiteralFloat32Bits", "_BinaryenLiteralFloat64Bits", "_BinaryenExpressionGetId", "_BinaryenExpressionGetType", "_BinaryenExpressionSetType", "_BinaryenExpressionPrint", "_BinaryenExpressionCopy", "_BinaryenExpressionFinalize", "_BinaryenBlock", "_BinaryenBlockGetName", "_BinaryenBlockSetName", "_BinaryenBlockGetNumChildren", "_BinaryenBlockGetChildAt", "_BinaryenBlockSetChildAt", "_BinaryenBlockAppendChild", "_BinaryenBlockInsertChildAt", "_BinaryenBlockRemoveChildAt", "_BinaryenIf", "_BinaryenIfGetCondition", "_BinaryenIfSetCondition", "_BinaryenIfGetIfTrue", "_BinaryenIfSetIfTrue", "_BinaryenIfGetIfFalse", "_BinaryenIfSetIfFalse", "_BinaryenLoop", "_BinaryenLoopGetName", "_BinaryenLoopSetName", "_BinaryenLoopGetBody", "_BinaryenLoopSetBody", "_BinaryenBreak", "_BinaryenBreakGetName", "_BinaryenBreakSetName", "_BinaryenBreakGetCondition", "_BinaryenBreakSetCondition", "_BinaryenBreakGetValue", "_BinaryenBreakSetValue", "_BinaryenSwitch", "_BinaryenSwitchGetNumNames", "_BinaryenSwitchGetNameAt", "_BinaryenSwitchSetNameAt", "_BinaryenSwitchAppendName", "_BinaryenSwitchInsertNameAt", "_BinaryenSwitchRemoveNameAt", "_BinaryenSwitchGetDefaultName", "_BinaryenSwitchSetDefaultName", "_BinaryenSwitchGetCondition", "_BinaryenSwitchSetCondition", "_BinaryenSwitchGetValue", "_BinaryenSwitchSetValue", "_BinaryenCall", "_BinaryenCallGetTarget", "_BinaryenCallSetTarget", "_BinaryenCallGetNumOperands", "_BinaryenCallGetOperandAt", "_BinaryenCallSetOperandAt", "_BinaryenCallAppendOperand", "_BinaryenCallInsertOperandAt", "_BinaryenCallRemoveOperandAt", "_BinaryenCallIsReturn", "_BinaryenCallSetReturn", "_BinaryenReturnCall", "_BinaryenCallIndirect", "_BinaryenCallIndirectGetTable", "_BinaryenCallIndirectSetTable", "_BinaryenCallIndirectGetTarget", "_BinaryenCallIndirectSetTarget", "_BinaryenCallIndirectGetNumOperands", "_BinaryenCallIndirectGetOperandAt", "_BinaryenCallIndirectSetOperandAt", "_BinaryenCallIndirectAppendOperand", "_BinaryenCallIndirectInsertOperandAt", "_BinaryenCallIndirectRemoveOperandAt", "_BinaryenCallIndirectIsReturn", "_BinaryenCallIndirectSetReturn", "_BinaryenReturnCallIndirect", "_BinaryenLocalGet", "_BinaryenLocalGetGetIndex", "_BinaryenLocalGetSetIndex", "_BinaryenLocalSet", "_BinaryenLocalSetIsTee", "_BinaryenLocalSetGetIndex", "_BinaryenLocalSetSetIndex", "_BinaryenLocalSetGetValue", "_BinaryenLocalSetSetValue", "_BinaryenLocalTee", "_BinaryenGlobalGet", "_BinaryenGlobalGetGetName", "_BinaryenGlobalGetSetName", "_BinaryenGlobalSet", "_BinaryenGlobalSetGetName", "_BinaryenGlobalSetSetName", "_BinaryenGlobalSetGetValue", "_BinaryenGlobalSetSetValue", "_BinaryenMemorySize", "_BinaryenMemoryGrow", "_BinaryenMemoryGrowGetDelta", "_BinaryenMemoryGrowSetDelta", "_BinaryenLoad", "_BinaryenLoadIsAtomic", "_BinaryenLoadSetAtomic", "_BinaryenLoadIsSigned", "_BinaryenLoadSetSigned", "_BinaryenLoadGetOffset", "_BinaryenLoadSetOffset", "_BinaryenLoadGetBytes", "_BinaryenLoadSetBytes", "_BinaryenLoadGetAlign", "_BinaryenLoadSetAlign", "_BinaryenLoadGetPtr", "_BinaryenLoadSetPtr", "_BinaryenAtomicLoad", "_BinaryenStore", "_BinaryenStoreIsAtomic", "_BinaryenStoreSetAtomic", "_BinaryenStoreGetBytes", "_BinaryenStoreSetBytes", "_BinaryenStoreGetOffset", "_BinaryenStoreSetOffset", "_BinaryenStoreGetAlign", "_BinaryenStoreSetAlign", "_BinaryenStoreGetPtr", "_BinaryenStoreSetPtr", "_BinaryenStoreGetValue", "_BinaryenStoreSetValue", "_BinaryenStoreGetValueType", "_BinaryenStoreSetValueType", "_BinaryenAtomicStore", "_BinaryenConst", "_BinaryenConstGetValueI32", "_BinaryenConstSetValueI32", "_BinaryenConstGetValueI64Low", "_BinaryenConstSetValueI64Low", "_BinaryenConstGetValueI64High", "_BinaryenConstSetValueI64High", "_BinaryenConstGetValueF32", "_BinaryenConstSetValueF32", "_BinaryenConstGetValueF64", "_BinaryenConstSetValueF64", "_BinaryenConstGetValueV128", "_BinaryenConstSetValueV128", "_BinaryenUnary", "_BinaryenUnaryGetOp", "_BinaryenUnarySetOp", "_BinaryenUnaryGetValue", "_BinaryenUnarySetValue", "_BinaryenBinary", "_BinaryenBinaryGetOp", "_BinaryenBinarySetOp", "_BinaryenBinaryGetLeft", "_BinaryenBinarySetLeft", "_BinaryenBinaryGetRight", "_BinaryenBinarySetRight", "_BinaryenSelect", "_BinaryenSelectGetIfTrue", "_BinaryenSelectSetIfTrue", "_BinaryenSelectGetIfFalse", "_BinaryenSelectSetIfFalse", "_BinaryenSelectGetCondition", "_BinaryenSelectSetCondition", "_BinaryenDrop", "_BinaryenDropGetValue", "_BinaryenDropSetValue", "_BinaryenReturn", "_BinaryenReturnGetValue", "_BinaryenReturnSetValue", "_BinaryenNop", "_BinaryenUnreachable", "_BinaryenAtomicRMW", "_BinaryenAtomicRMWGetOp", "_BinaryenAtomicRMWSetOp", "_BinaryenAtomicRMWGetBytes", "_BinaryenAtomicRMWSetBytes", "_BinaryenAtomicRMWGetOffset", "_BinaryenAtomicRMWSetOffset", "_BinaryenAtomicRMWGetPtr", "_BinaryenAtomicRMWSetPtr", "_BinaryenAtomicRMWGetValue", "_BinaryenAtomicRMWSetValue", "_BinaryenAtomicCmpxchg", "_BinaryenAtomicCmpxchgGetBytes", "_BinaryenAtomicCmpxchgSetBytes", "_BinaryenAtomicCmpxchgGetOffset", "_BinaryenAtomicCmpxchgSetOffset", "_BinaryenAtomicCmpxchgGetPtr", "_BinaryenAtomicCmpxchgSetPtr", "_BinaryenAtomicCmpxchgGetExpected", "_BinaryenAtomicCmpxchgSetExpected", "_BinaryenAtomicCmpxchgGetReplacement", "_BinaryenAtomicCmpxchgSetReplacement", "_BinaryenAtomicWait", "_BinaryenAtomicWaitGetPtr", "_BinaryenAtomicWaitSetPtr", "_BinaryenAtomicWaitGetExpected", "_BinaryenAtomicWaitSetExpected", "_BinaryenAtomicWaitGetTimeout", "_BinaryenAtomicWaitSetTimeout", "_BinaryenAtomicWaitGetExpectedType", "_BinaryenAtomicWaitSetExpectedType", "_BinaryenAtomicNotify", "_BinaryenAtomicNotifyGetPtr", "_BinaryenAtomicNotifySetPtr", "_BinaryenAtomicNotifyGetNotifyCount", "_BinaryenAtomicNotifySetNotifyCount", "_BinaryenAtomicFence", "_BinaryenAtomicFenceGetOrder", "_BinaryenAtomicFenceSetOrder", "_BinaryenSIMDExtract", "_BinaryenSIMDExtractGetOp", "_BinaryenSIMDExtractSetOp", "_BinaryenSIMDExtractGetVec", "_BinaryenSIMDExtractSetVec", "_BinaryenSIMDExtractGetIndex", "_BinaryenSIMDExtractSetIndex", "_BinaryenSIMDReplace", "_BinaryenSIMDReplaceGetOp", "_BinaryenSIMDReplaceSetOp", "_BinaryenSIMDReplaceGetVec", "_BinaryenSIMDReplaceSetVec", "_BinaryenSIMDReplaceGetIndex", "_BinaryenSIMDReplaceSetIndex", "_BinaryenSIMDReplaceGetValue", "_BinaryenSIMDReplaceSetValue", "_BinaryenSIMDShuffle", "_BinaryenSIMDShuffleGetLeft", "_BinaryenSIMDShuffleSetLeft", "_BinaryenSIMDShuffleGetRight", "_BinaryenSIMDShuffleSetRight", "_BinaryenSIMDShuffleGetMask", "_BinaryenSIMDShuffleSetMask", "_BinaryenSIMDTernary", "_BinaryenSIMDTernaryGetOp", "_BinaryenSIMDTernarySetOp", "_BinaryenSIMDTernaryGetA", "_BinaryenSIMDTernarySetA", "_BinaryenSIMDTernaryGetB", "_BinaryenSIMDTernarySetB", "_BinaryenSIMDTernaryGetC", "_BinaryenSIMDTernarySetC", "_BinaryenSIMDShift", "_BinaryenSIMDShiftGetOp", "_BinaryenSIMDShiftSetOp", "_BinaryenSIMDShiftGetVec", "_BinaryenSIMDShiftSetVec", "_BinaryenSIMDShiftGetShift", "_BinaryenSIMDShiftSetShift", "_BinaryenSIMDLoad", "_BinaryenSIMDLoadGetOp", "_BinaryenSIMDLoadSetOp", "_BinaryenSIMDLoadGetOffset", "_BinaryenSIMDLoadSetOffset", "_BinaryenSIMDLoadGetAlign", "_BinaryenSIMDLoadSetAlign", "_BinaryenSIMDLoadGetPtr", "_BinaryenSIMDLoadSetPtr", "_BinaryenSIMDLoadStoreLane", "_BinaryenSIMDLoadStoreLaneGetOp", "_BinaryenSIMDLoadStoreLaneSetOp", "_BinaryenSIMDLoadStoreLaneGetOffset", "_BinaryenSIMDLoadStoreLaneSetOffset", "_BinaryenSIMDLoadStoreLaneGetAlign", "_BinaryenSIMDLoadStoreLaneSetAlign", "_BinaryenSIMDLoadStoreLaneGetIndex", "_BinaryenSIMDLoadStoreLaneSetIndex", "_BinaryenSIMDLoadStoreLaneGetPtr", "_BinaryenSIMDLoadStoreLaneSetPtr", "_BinaryenSIMDLoadStoreLaneGetVec", "_BinaryenSIMDLoadStoreLaneSetVec", "_BinaryenSIMDLoadStoreLaneIsStore", "_BinaryenMemoryInit", "_BinaryenMemoryInitGetSegment", "_BinaryenMemoryInitSetSegment", "_BinaryenMemoryInitGetDest", "_BinaryenMemoryInitSetDest", "_BinaryenMemoryInitGetOffset", "_BinaryenMemoryInitSetOffset", "_BinaryenMemoryInitGetSize", "_BinaryenMemoryInitSetSize", "_BinaryenDataDrop", "_BinaryenDataDropGetSegment", "_BinaryenDataDropSetSegment", "_BinaryenMemoryCopy", "_BinaryenMemoryCopyGetDest", "_BinaryenMemoryCopySetDest", "_BinaryenMemoryCopyGetSource", "_BinaryenMemoryCopySetSource", "_BinaryenMemoryCopyGetSize", "_BinaryenMemoryCopySetSize", "_BinaryenMemoryFill", "_BinaryenMemoryFillGetDest", "_BinaryenMemoryFillSetDest", "_BinaryenMemoryFillGetValue", "_BinaryenMemoryFillSetValue", "_BinaryenMemoryFillGetSize", "_BinaryenMemoryFillSetSize", "_BinaryenRefNull", "_BinaryenRefIs", "_BinaryenRefIsGetOp", "_BinaryenRefIsSetOp", "_BinaryenRefIsGetValue", "_BinaryenRefIsSetValue", "_BinaryenRefAs", "_BinaryenRefAsGetOp", "_BinaryenRefAsSetOp", "_BinaryenRefAsGetValue", "_BinaryenRefAsSetValue", "_BinaryenRefFunc", "_BinaryenRefFuncGetFunc", "_BinaryenRefFuncSetFunc", "_BinaryenRefEq", "_BinaryenRefEqGetLeft", "_BinaryenRefEqSetLeft", "_BinaryenRefEqGetRight", "_BinaryenRefEqSetRight", "_BinaryenTableGet", "_BinaryenTableGetGetTable", "_BinaryenTableGetSetTable", "_BinaryenTableGetGetIndex", "_BinaryenTableGetSetIndex", "_BinaryenTableSet", "_BinaryenTableSetGetTable", "_BinaryenTableSetSetTable", "_BinaryenTableSetGetIndex", "_BinaryenTableSetSetIndex", "_BinaryenTableSetGetValue", "_BinaryenTableSetSetValue", "_BinaryenTableSize", "_BinaryenTableSizeGetTable", "_BinaryenTableSizeSetTable", "_BinaryenTableGrow", "_BinaryenTableGrowGetTable", "_BinaryenTableGrowSetTable", "_BinaryenTableGrowGetValue", "_BinaryenTableGrowSetValue", "_BinaryenTableGrowGetDelta", "_BinaryenTableGrowSetDelta", "_BinaryenTry", "_BinaryenTryGetName", "_BinaryenTrySetName", "_BinaryenTryGetBody", "_BinaryenTrySetBody", "_BinaryenTryGetNumCatchTags", "_BinaryenTryGetNumCatchBodies", "_BinaryenTryGetCatchTagAt", "_BinaryenTrySetCatchTagAt", "_BinaryenTryAppendCatchTag", "_BinaryenTryInsertCatchTagAt", "_BinaryenTryRemoveCatchTagAt", "_BinaryenTryGetCatchBodyAt", "_BinaryenTrySetCatchBodyAt", "_BinaryenTryAppendCatchBody", "_BinaryenTryInsertCatchBodyAt", "_BinaryenTryRemoveCatchBodyAt", "_BinaryenTryHasCatchAll", "_BinaryenTryGetDelegateTarget", "_BinaryenTrySetDelegateTarget", "_BinaryenTryIsDelegate", "_BinaryenThrow", "_BinaryenThrowGetTag", "_BinaryenThrowSetTag", "_BinaryenThrowGetNumOperands", "_BinaryenThrowGetOperandAt", "_BinaryenThrowSetOperandAt", "_BinaryenThrowAppendOperand", "_BinaryenThrowInsertOperandAt", "_BinaryenThrowRemoveOperandAt", "_BinaryenRethrow", "_BinaryenRethrowGetTarget", "_BinaryenRethrowSetDepth", "_BinaryenTupleMake", "_BinaryenTupleMakeGetNumOperands", "_BinaryenTupleMakeGetOperandAt", "_BinaryenTupleMakeSetOperandAt", "_BinaryenTupleMakeAppendOperand", "_BinaryenTupleMakeInsertOperandAt", "_BinaryenTupleMakeRemoveOperandAt", "_BinaryenTupleExtract", "_BinaryenTupleExtractGetTuple", "_BinaryenTupleExtractSetTuple", "_BinaryenTupleExtractGetIndex", "_BinaryenTupleExtractSetIndex", "_BinaryenPop", "_BinaryenI31New", "_BinaryenI31NewGetValue", "_BinaryenI31NewSetValue", "_BinaryenI31Get", "_BinaryenI31GetGetI31", "_BinaryenI31GetSetI31", "_BinaryenI31GetIsSigned", "_BinaryenI31GetSetSigned", "_BinaryenAddFunction", "_BinaryenGetFunction", "_BinaryenRemoveFunction", "_BinaryenGetNumFunctions", "_BinaryenGetFunctionByIndex", "_BinaryenFunctionGetName", "_BinaryenFunctionGetParams", "_BinaryenFunctionGetResults", "_BinaryenFunctionGetNumVars", "_BinaryenFunctionGetVar", "_BinaryenFunctionGetNumLocals", "_BinaryenFunctionHasLocalName", "_BinaryenFunctionGetLocalName", "_BinaryenFunctionSetLocalName", "_BinaryenFunctionGetBody", "_BinaryenFunctionSetBody", "_BinaryenFunctionOptimize", "_BinaryenFunctionRunPasses", "_BinaryenFunctionSetDebugLocation", "_BinaryenAddFunctionImport", "_BinaryenAddTableImport", "_BinaryenAddMemoryImport", "_BinaryenAddGlobalImport", "_BinaryenAddTagImport", "_BinaryenAddFunctionExport", "_BinaryenAddTableExport", "_BinaryenAddMemoryExport", "_BinaryenAddGlobalExport", "_BinaryenAddTagExport", "_BinaryenGetExport", "_BinaryenRemoveExport", "_BinaryenGetNumExports", "_BinaryenGetExportByIndex", "_BinaryenExportGetKind", "_BinaryenExportGetName", "_BinaryenExportGetValue", "_BinaryenAddGlobal", "_BinaryenGetGlobal", "_BinaryenRemoveGlobal", "_BinaryenGetNumGlobals", "_BinaryenGetGlobalByIndex", "_BinaryenGlobalGetName", "_BinaryenGlobalGetType", "_BinaryenGlobalIsMutable", "_BinaryenGlobalGetInitExpr", "_BinaryenAddTag", "_BinaryenGetTag", "_BinaryenRemoveTag", "_BinaryenTagGetName", "_BinaryenTagGetParams", "_BinaryenTagGetResults", "_BinaryenAddTable", "_BinaryenRemoveTable", "_BinaryenGetNumTables", "_BinaryenGetTable", "_BinaryenGetTableByIndex", "_BinaryenTableGetName", "_BinaryenTableSetName", "_BinaryenTableGetInitial", "_BinaryenTableSetInitial", "_BinaryenTableHasMax", "_BinaryenTableGetMax", "_BinaryenTableSetMax", "_BinaryenAddActiveElementSegment", "_BinaryenAddPassiveElementSegment", "_BinaryenRemoveElementSegment", "_BinaryenGetNumElementSegments", "_BinaryenGetElementSegment", "_BinaryenGetElementSegmentByIndex", "_BinaryenSetMemory", "_BinaryenGetNumMemorySegments", "_BinaryenGetMemorySegmentByteOffset", "_BinaryenGetMemorySegmentByteLength", "_BinaryenCopyMemorySegmentData", "_BinaryenSetStart", "_BinaryenModuleParse", "_BinaryenModulePrint", "_BinaryenModulePrintAsmjs", "_BinaryenModuleValidate", "_BinaryenModuleOptimize", "_BinaryenModuleRunPasses", "_BinaryenModuleAutoDrop", "_BinaryenSizeofAllocateAndWriteResult", "_BinaryenModuleAllocateAndWrite", "_BinaryenModuleAllocateAndWriteText", "_BinaryenModuleAllocateAndWriteStackIR", "_BinaryenModuleRead", "_BinaryenModuleInterpret", "_BinaryenModuleAddDebugInfoFileName", "_BinaryenModuleGetDebugInfoFileName", "_BinaryenModuleGetFeatures", "_BinaryenModuleSetFeatures", "_BinaryenAddCustomSection", "_BinaryenExpressionGetSideEffects", "_RelooperCreate", "_RelooperAddBlock", "_RelooperAddBranch", "_RelooperAddBlockWithSwitch", "_RelooperAddBranchForSwitch", "_RelooperRenderAndDispose", "_ExpressionRunnerCreate", "_ExpressionRunnerSetLocalValue", "_ExpressionRunnerSetGlobalValue", "_ExpressionRunnerRunAndDispose", "_BinaryenGetOptimizeLevel", "_BinaryenSetOptimizeLevel", "_BinaryenGetShrinkLevel", "_BinaryenSetShrinkLevel", "_BinaryenGetDebugInfo", "_BinaryenSetDebugInfo", "_BinaryenGetLowMemoryUnused", "_BinaryenSetLowMemoryUnused", "_BinaryenGetZeroFilledMemory", "_BinaryenSetZeroFilledMemory", "_BinaryenGetFastMath", "_BinaryenSetFastMath", "_BinaryenGetPassArgument", "_BinaryenSetPassArgument", "_BinaryenClearPassArguments", "_BinaryenGetAlwaysInlineMaxSize", "_BinaryenSetAlwaysInlineMaxSize", "_BinaryenGetFlexibleInlineMaxSize", "_BinaryenSetFlexibleInlineMaxSize", "_BinaryenGetOneCallerInlineMaxSize", "_BinaryenSetOneCallerInlineMaxSize", "_BinaryenGetAllowInliningFunctionsWithLoops", "_BinaryenSetAllowInliningFunctionsWithLoops", "_malloc", "_free", "__i32_store8", "__i32_store16", "__i32_store", "__f32_store", "__f64_store", "__i32_load8_s", "__i32_load8_u", "__i32_load16_s", "__i32_load16_u", "__i32_load", "__f32_load", "__f64_load", "default", "F64", "F32", "I32", "value", "Long", "value", "lo", "hi", "left", "right", "rightLo", "rightHi", "result", "alignment", "mask", "minSafeF32", "maxSafeF32", "minSafeF64", "maxSafeF64", "unsigned", "map", "set", "Feature", "featureToString", "feature", "Target", "Runtime", "Typeinfo", "TypeinfoFlags", "__decorateClass", "CommonFlags", "PATH_DELIMITER", "PARENT_SUBST", "GETTER_PREFIX", "SETTER_PREFIX", "INSTANCE_DELIMITER", "STATIC_DELIMITER", "INNER_DELIMITER", "LIBRARY_SUBST", "LIBRARY_PREFIX", "INDEX_SUFFIX", "STUB_DELIMITER", "CommonNames", "DiagnosticCode", "diagnosticCodeToString", "code", "util_exports", "__export", "BitSet", "COLOR_BLUE", "COLOR_CYAN", "COLOR_GRAY", "COLOR_GREEN", "COLOR_MAGENTA", "COLOR_RED", "COLOR_RESET", "COLOR_WHITE", "COLOR_YELLOW", "CharCode", "SURROGATE_HIGH", "SURROGATE_LOW", "accuratePow64", "cloneMap", "colorize", "combineSurrogates", "dirname", "escapeString", "indent", "isAlpha", "isAlphaOrDecimal", "isColorsEnabled", "isDecimal", "isHexBase", "isHexOrDecimal", "isHighSurrogate", "isIdentifier", "isIdentifierPart", "isIdentifierStart", "isLineBreak", "isLowSurrogate", "isOctal", "isPowerOf2", "isSurrogate", "isSurrogateHigh", "isSurrogateLow", "isWhiteSpace", "mergeMaps", "normalizePath", "readF32", "readF64", "readI16", "readI32", "readI64", "readI8", "readV128", "resolvePath", "setColorsEnabled", "v128_ones", "v128_zero", "writeF32", "writeF64", "writeI16", "writeI32", "writeI32AsI64", "writeI64", "writeI64AsI32", "writeI8", "writeV128", "readI8", "buffer", "offset", "writeI8", "value", "readI16", "writeI16", "readI32", "writeI32", "writeI32AsI64", "unsigned", "readI64", "lo", "hi", "writeI64", "writeI64AsI32", "readF32", "writeF32", "readF64", "writeF64", "valueI64", "readV128", "writeV128", "cloneMap", "map", "out", "_keys", "i", "k", "v", "mergeMaps", "map1", "map2", "BitSet", "count", "words", "len", "word", "index", "idx", "res", "p", "mask", "isPowerOf2", "x", "accuratePow64", "y", "CharCode", "isLineBreak", "c", "isWhiteSpace", "SURROGATE_HIGH", "SURROGATE_LOW", "isSurrogate", "isSurrogateHigh", "isSurrogateLow", "isHighSurrogate", "isLowSurrogate", "combineSurrogates", "hi", "lo", "isAlpha", "c0", "isDecimal", "isOctal", "isHexBase", "isHexOrDecimal", "isAlphaOrDecimal", "isIdentifierStart", "lookupInUnicodeMap", "unicodeIdentifierStart", "isIdentifierPart", "unicodeIdentifierPart", "isIdentifier", "str", "len", "i", "code", "map", "mid", "midVal", "indentX1", "indentX2", "indentX3", "indentX4", "indentCache", "indent", "sb", "level", "indents", "escapeString", "quote", "off", "k", "separator", "normalizePath", "path", "pos", "len", "atEnd", "ipos", "resolvePath", "normalizedPath", "origin", "dirname", "PATH_DELIMITER", "COLOR_GRAY", "COLOR_RED", "COLOR_GREEN", "COLOR_YELLOW", "COLOR_BLUE", "COLOR_MAGENTA", "COLOR_CYAN", "COLOR_WHITE", "COLOR_RESET", "colorsEnabled", "isColorsEnabled", "setColorsEnabled", "isEnabled", "wasEnabled", "colorize", "text", "color", "v128_zero", "v128_ones", "DiagnosticCategory", "Range", "start", "end", "a", "b", "range", "other", "diagnosticCategoryToString", "category", "diagnosticCategoryToColor", "COLOR_MAGENTA", "COLOR_CYAN", "COLOR_YELLOW", "COLOR_RED", "DiagnosticMessage", "code", "message", "arg0", "arg1", "arg2", "diagnosticCodeToString", "thisRange", "otherRange", "thisRelatedRange", "otherRelatedRange", "source", "path", "line", "column", "len", "formatDiagnosticMessage", "useColors", "showContext", "wasColorsEnabled", "setColorsEnabled", "sb", "isColorsEnabled", "COLOR_RESET", "formatDiagnosticContext", "relatedRange", "relatedSource", "text", "lineNumber", "lineSpace", "isLineBreak", "isWhiteSpace", "cc", "DiagnosticEmitter", "diagnostics", "seen", "seenInSource", "seenMessagesAtPos", "i", "k", "NodeKind", "Node", "kind", "range", "name", "TypeName", "typeArguments", "isNullable", "NamedTypeNode", "parameters", "returnType", "explicitThisType", "FunctionTypeNode", "extendsType", "defaultType", "TypeParameterNode", "parameterKind", "type", "initializer", "ParameterNode", "args", "DecoratorNode", "DecoratorKind", "commentKind", "text", "CommentNode", "isQuoted", "IdentifierExpression", "elementExpressions", "ArrayLiteralExpression", "assertionKind", "expression", "toType", "AssertionExpression", "operator", "left", "right", "BinaryExpression", "CallExpression", "declaration", "ClassExpression", "expressions", "CommaExpression", "ConstructorExpression", "elementExpression", "ElementAccessExpression", "FalseExpression", "value", "FloatLiteralExpression", "FunctionExpression", "isType", "InstanceOfExpression", "IntegerLiteralExpression", "typeName", "NewExpression", "NullExpression", "names", "values", "ObjectLiteralExpression", "OmittedExpression", "ParenthesizedExpression", "property", "PropertyAccessExpression", "pattern", "patternFlags", "RegexpLiteralExpression", "condition", "ifThen", "ifElse", "TernaryExpression", "StringLiteralExpression", "SuperExpression", "tag", "parts", "rawParts", "TemplateLiteralExpression", "ThisExpression", "TrueExpression", "operand", "UnaryPostfixExpression", "UnaryPrefixExpression", "expr", "CompiledExpression", "statements", "BlockStatement", "label", "BreakStatement", "decorators", "flags", "typeParameters", "implementsTypes", "members", "ClassDeclaration", "ContinueStatement", "statement", "DoStatement", "EmptyStatement", "EnumDeclaration", "EnumValueDeclaration", "path", "isDeclare", "ExportStatement", "ExportDefaultStatement", "externalName", "ExportImportStatement", "localName", "exportedName", "ExportMember", "ExpressionStatement", "ifTrue", "ifFalse", "IfStatement", "declarations", "ImportStatement", "namespaceName", "foreignName", "ImportDeclaration", "InterfaceDeclaration", "FieldDeclaration", "incrementor", "ForStatement", "variable", "iterable", "ForOfStatement", "signature", "body", "arrowKind", "FunctionDeclaration", "keyType", "valueType", "IndexSignatureNode", "MethodDeclaration", "NamespaceDeclaration", "ReturnStatement", "cases", "SwitchStatement", "SwitchCase", "ThrowStatement", "catchVariable", "catchStatements", "finallyStatements", "TryStatement", "TypeDeclaration", "ModuleDeclaration", "VariableStatement", "VariableDeclaration", "VoidStatement", "WhileStatement", "literalKind", "LiteralKind", "node", "TypeNode", "typeParameterNodes", "namedTypeNode", "typeArgumentNodes", "i", "k", "functionTypeNode", "parameterNodes", "identifier", "next", "ParameterKind", "flag", "fromNode", "nameNode", "nameStr", "propertyAccessNode", "propStr", "decoratorKind", "CommentKind", "Expression", "LiteralExpression", "AssertionKind", "numTypeArguments", "Range", "numArguments", "UnaryExpression", "Statement", "SourceKind", "Source", "sourceKind", "normalizedPath", "internalPath", "mangleInternalPath", "pos", "PATH_DELIMITER", "LIBRARY_SUBST", "lineCache", "off", "end", "l", "r", "m", "s", "DeclarationStatement", "VariableLikeDeclarationStatement", "normalizePath", "resolvePath", "LIBRARY_PREFIX", "parameterIndex", "ArrowKind", "moduleName", "findDecorator", "decorator", "isTypeOmitted", "Token", "IdentifierHandling", "tokenFromKeyword", "text", "len", "tokenIsAlsoIdentifier", "token", "isIllegalVariableIdentifier", "name", "operatorTokenToString", "Tokenizer", "DiagnosticEmitter", "source", "diagnostics", "end", "pos", "identifierHandling", "maxTokenLength", "c", "chr", "isDecimal", "commentStartPos", "commentKind", "closed", "isIdentifierStart", "posBefore", "isIdentifierPart", "maybeKeywordToken", "isWhiteSpace", "start", "isHighSurrogate", "isLowSurrogate", "checkOnNewLine", "maxCompoundLength", "tokenBefore", "tokenPosBefore", "nextToken", "isLineBreak", "state", "reusableState", "State", "range", "Range", "quote", "isTaggedTemplate", "result", "escaped", "flags", "isOctal", "value", "sepEnd", "i64_4", "nextValue", "overflowOccurred", "isHexBase", "i64_10", "i64_3", "sepCount", "allowLeadingZeroSep", "remain", "startIfTaggedTemplate", "value32", "invalid", "tokenPos", "TypeRef", "_BinaryenTypeFuncref", "_BinaryenTypeExternref", "_BinaryenTypeAnyref", "_BinaryenTypeEqref", "_BinaryenTypeI31ref", "_BinaryenTypeDataref", "_BinaryenTypeStringref", "_BinaryenTypeStringviewWTF8", "_BinaryenTypeStringviewWTF16", "_BinaryenTypeStringviewIter", "HeapTypeRef", "_BinaryenHeapTypeFunc", "_BinaryenHeapTypeExt", "_BinaryenHeapTypeAny", "_BinaryenHeapTypeEq", "_BinaryenHeapTypeI31", "_BinaryenHeapTypeData", "_BinaryenHeapTypeString", "_BinaryenHeapTypeStringviewWTF8", "_BinaryenHeapTypeStringviewWTF16", "_BinaryenHeapTypeStringviewIter", "FeatureFlags", "ExpressionId", "ExternalKind", "UnaryOp", "BinaryOp", "AtomicRMWOp", "SIMDExtractOp", "SIMDReplaceOp", "SIMDShiftOp", "SIMDLoadOp", "SIMDLoadStoreLaneOp", "SIMDTernaryOp", "RefIsOp", "RefAsOp", "BrOnOp", "StringNewOp", "StringMeasureOp", "StringEncodeOp", "StringAsOp", "StringIterMoveOp", "StringSliceWTFOp", "ExpressionRunnerFlags", "MemorySegment", "buffer", "offset", "_Module", "ref", "useShadowStack", "sizeType", "_malloc", "_BinaryenSizeofLiteral", "_BinaryenModuleCreate", "cArr", "allocU8Array", "module", "_BinaryenModuleRead", "_free", "value", "out", "_BinaryenLiteralInt32", "_BinaryenConst", "valueLow", "valueHigh", "_BinaryenLiteralInt64", "_BinaryenLiteralFloat32", "_BinaryenLiteralFloat64", "bytes", "i", "__i32_store8", "_BinaryenLiteralVec128", "type", "_BinaryenRefNull", "left", "right", "_BinaryenRefEq", "op", "isWam64", "_BinaryenUnary", "isWasm64", "_BinaryenBinary", "name", "CommonNames", "is64", "cStr", "_BinaryenMemorySize", "delta", "_BinaryenMemoryGrow", "_BinaryenTableSize", "_BinaryenTableGrow", "index", "_BinaryenLocalGet", "_BinaryenExpressionGetType", "BuiltinNames", "isManaged", "_BinaryenLocalTee", "_BinaryenGlobalGet", "_BinaryenTableGet", "signed", "ptr", "align", "_BinaryenLoad", "_BinaryenStore", "_BinaryenAtomicLoad", "_BinaryenAtomicStore", "_BinaryenAtomicRMW", "expected", "replacement", "_BinaryenAtomicCmpxchg", "timeout", "expectedType", "_BinaryenAtomicWait", "notifyCount", "_BinaryenAtomicNotify", "_BinaryenAtomicFence", "_BinaryenLocalSet", "_BinaryenGlobalSet", "_BinaryenTableSet", "label", "children", "allocPtrArray", "ret", "_BinaryenBlock", "stmts", "length", "single", "getExpressionId", "singleType", "getExpressionType", "condition", "_BinaryenBreak", "expression", "_BinaryenDrop", "result", "getSideEffects", "SideEffects", "body", "_BinaryenLoop", "ifTrue", "ifFalse", "_BinaryenIf", "_BinaryenNop", "_BinaryenReturn", "_BinaryenSelect", "names", "defaultName", "numNames", "strs", "_BinaryenSwitch", "target", "operands", "returnType", "isReturn", "_BinaryenReturnCall", "_BinaryenCall", "tableName", "params", "results", "_BinaryenReturnCallIndirect", "_BinaryenCallIndirect", "_BinaryenUnreachable", "dest", "source", "size", "destName", "sourceName", "cStr1", "cStr2", "_BinaryenMemoryCopy", "_BinaryenMemoryFill", "catchTags", "catchBodies", "delegateTarget", "numCatchTags", "cArr1", "cArr2", "_BinaryenTry", "tagName", "_BinaryenThrow", "_BinaryenRethrow", "_BinaryenPop", "_BinaryenTupleMake", "tuple", "_BinaryenTupleExtract", "vec", "idx", "_BinaryenSIMDExtract", "_BinaryenSIMDReplace", "vec1", "vec2", "mask", "_BinaryenSIMDShuffle", "a", "b", "c", "_BinaryenSIMDTernary", "shift", "_BinaryenSIMDShift", "_BinaryenSIMDLoad", "_BinaryenSIMDLoadStoreLane", "expr", "_BinaryenRefIs", "isNullableType", "_BinaryenRefAs", "_BinaryenRefFunc", "_BinaryenI31New", "_BinaryenI31Get", "mutable", "initializer", "_BinaryenAddGlobal", "_BinaryenGetGlobal", "_BinaryenRemoveGlobal", "_BinaryenAddTag", "_BinaryenGetTag", "_BinaryenRemoveTag", "varTypes", "_BinaryenAddFunction", "funcRef", "_BinaryenFunctionSetLocalName", "_BinaryenGetFunction", "_BinaryenRemoveFunction", "paramTypes", "tempName", "createType", "func", "_BinaryenSetStart", "internalName", "externalName", "_BinaryenAddFunctionExport", "_BinaryenAddTableExport", "_BinaryenAddMemoryExport", "_BinaryenAddGlobalExport", "_BinaryenAddTagExport", "_BinaryenRemoveExport", "_BinaryenGetExport", "externalModuleName", "externalBaseName", "cStr3", "_BinaryenAddFunctionImport", "_BinaryenAddTableImport", "shared", "_BinaryenAddMemoryImport", "globalType", "_BinaryenAddGlobalImport", "_BinaryenAddTagImport", "initial", "maximum", "segments", "exportName", "k", "segs", "psvs", "offs", "sizs", "segment", "cArr3", "cArr4", "allocU32Array", "_BinaryenSetMemory", "funcs", "tableRef", "_BinaryenGetTable", "_BinaryenTableSetInitial", "_BinaryenTableSetMax", "_BinaryenAddTable", "_BinaryenAddActiveElementSegment", "contents", "_BinaryenAddCustomSection", "_BinaryenGetOptimizeLevel", "level", "_BinaryenSetOptimizeLevel", "_BinaryenGetShrinkLevel", "_BinaryenSetShrinkLevel", "_BinaryenGetDebugInfo", "on", "_BinaryenSetDebugInfo", "_BinaryenGetLowMemoryUnused", "_BinaryenSetLowMemoryUnused", "_BinaryenGetZeroFilledMemory", "_BinaryenSetZeroFilledMemory", "_BinaryenGetFastMath", "_BinaryenSetFastMath", "key", "_BinaryenGetPassArgument", "readString", "_BinaryenSetPassArgument", "_BinaryenClearPassArguments", "_BinaryenGetAlwaysInlineMaxSize", "_BinaryenSetAlwaysInlineMaxSize", "_BinaryenGetFlexibleInlineMaxSize", "_BinaryenSetFlexibleInlineMaxSize", "_BinaryenGetOneCallerInlineMaxSize", "_BinaryenSetOneCallerInlineMaxSize", "_BinaryenGetAllowInliningFunctionsWithLoops", "enabled", "_BinaryenSetAllowInliningFunctionsWithLoops", "_BinaryenModuleGetFeatures", "featureFlags", "_BinaryenModuleSetFeatures", "passes", "cStrs", "allocString", "_BinaryenFunctionRunPasses", "_BinaryenModuleRunPasses", "optimizeLevel", "shrinkLevel", "debugInfo", "zeroFilledMemory", "_BinaryenModuleValidate", "_BinaryenModuleInterpret", "sourceMapUrl", "_BinaryenSizeofAllocateAndWriteResult", "resPtr", "urlPtr", "_BinaryenModuleAllocateAndWrite", "binaryPtr", "__i32_load", "binaryLen", "srcMapPtr", "binary", "BinaryModule", "readBuffer", "watFormat", "textPtr", "_BinaryenModuleAllocateAndWriteStackIR", "_BinaryenModuleAllocateAndWriteText", "text", "str", "cached", "_values", "_BinaryenModuleDispose", "Relooper", "_BinaryenExpressionGetId", "_BinaryenExpressionCopy", "flags", "maxDepth", "maxLoopIterations", "runner", "_ExpressionRunnerCreate", "precomp", "_ExpressionRunnerRunAndDispose", "getBinaryOp", "getBinaryLeft", "getBinaryRight", "_BinaryenModuleAddDebugInfoFileName", "_BinaryenModuleGetDebugInfoFileName", "fileIndex", "lineNumber", "columnNumber", "_BinaryenFunctionSetDebugLocation", "Module", "types", "_BinaryenTypeCreate", "expandType", "arity", "_BinaryenTypeArity", "_BinaryenTypeExpand", "_BinaryenTypeIsNullable", "getConstValueI32", "_BinaryenConstGetValueI32", "getConstValueI64Low", "_BinaryenConstGetValueI64Low", "getConstValueI64High", "_BinaryenConstGetValueI64High", "getConstValueF32", "_BinaryenConstGetValueF32", "getConstValueF64", "_BinaryenConstGetValueF64", "getConstValueV128", "_BinaryenConstGetValueV128", "__i32_load8_u", "isConstZero", "isConstNonZero", "isConstNegZero", "d", "isConstNaN", "isConstExpressionNaN", "id", "getLocalGetIndex", "_BinaryenLocalGetGetIndex", "getLocalSetIndex", "_BinaryenLocalSetGetIndex", "getLocalSetValue", "_BinaryenLocalSetGetValue", "isLocalTee", "_BinaryenLocalSetIsTee", "getGlobalGetName", "_BinaryenGlobalGetGetName", "_BinaryenBinaryGetOp", "_BinaryenBinaryGetLeft", "_BinaryenBinaryGetRight", "getUnaryOp", "_BinaryenUnaryGetOp", "getUnaryValue", "_BinaryenUnaryGetValue", "getLoadBytes", "_BinaryenLoadGetBytes", "getLoadOffset", "_BinaryenLoadGetOffset", "getLoadPtr", "_BinaryenLoadGetPtr", "isLoadSigned", "_BinaryenLoadIsSigned", "getStoreBytes", "_BinaryenStoreGetBytes", "getStoreOffset", "_BinaryenStoreGetOffset", "getStorePtr", "_BinaryenStoreGetPtr", "getStoreValue", "_BinaryenStoreGetValue", "getBlockName", "_BinaryenBlockGetName", "getBlockChildCount", "_BinaryenBlockGetNumChildren", "getBlockChildAt", "_BinaryenBlockGetChildAt", "getIfCondition", "_BinaryenIfGetCondition", "getIfTrue", "_BinaryenIfGetIfTrue", "getIfFalse", "_BinaryenIfGetIfFalse", "getLoopName", "_BinaryenLoopGetName", "getLoopBody", "_BinaryenLoopGetBody", "getBreakName", "_BinaryenBreakGetName", "getBreakCondition", "_BinaryenBreakGetCondition", "getSelectThen", "_BinaryenSelectGetIfTrue", "getSelectElse", "_BinaryenSelectGetIfFalse", "getSelectCondition", "_BinaryenSelectGetCondition", "getDropValue", "_BinaryenDropGetValue", "getReturnValue", "_BinaryenReturnGetValue", "getCallTarget", "_BinaryenCallGetTarget", "getCallOperandCount", "_BinaryenCallGetNumOperands", "getCallOperandAt", "_BinaryenCallGetOperandAt", "getMemoryGrowDelta", "_BinaryenMemoryGrowGetDelta", "getFunctionBody", "_BinaryenFunctionGetBody", "getFunctionName", "_BinaryenFunctionGetName", "getFunctionParams", "_BinaryenFunctionGetParams", "getFunctionResults", "_BinaryenFunctionGetResults", "getFunctionVars", "count", "_BinaryenFunctionGetNumVars", "_BinaryenFunctionGetVar", "getGlobalName", "global", "_BinaryenGlobalGetName", "getGlobalType", "_BinaryenGlobalGetType", "isGlobalMutable", "_BinaryenGlobalIsMutable", "getGlobalInit", "_BinaryenGlobalGetInitExpr", "getTagName", "tag", "_BinaryenTagGetName", "getTagParams", "_BinaryenTagGetParams", "getTagResults", "_BinaryenTagGetResults", "_RelooperCreate", "code", "_RelooperAddBlock", "from", "to", "_RelooperAddBranch", "_RelooperAddBlockWithSwitch", "indexes", "allocI32Array", "_RelooperAddBranchForSwitch", "entry", "labelHelper", "_RelooperRenderAndDispose", "SwitchBuilder", "cases", "localIndex", "labelPostfix", "numCases", "values", "numValues", "labels", "defaultIndex", "defaultLabel", "current", "block", "lastCase", "_BinaryenExpressionGetSideEffects", "mustPreserveSideEffects", "u8s", "len", "i32s", "val", "__i32_store", "u32s", "ptrs", "stringLengthUTF8", "c1", "isHighSurrogate", "isLowSurrogate", "u", "c2", "combineSurrogates", "arr", "cp", "u1", "u2", "u3", "ch", "SURROGATE_HIGH", "SURROGATE_LOW", "output", "sourceMap", "needsExplicitUnreachable", "numChildren", "Visitor", "currentExpression", "stack", "length", "expr", "name", "index", "previousExpression", "_BinaryenExpressionGetId", "_BinaryenBlockGetName", "i", "n", "_BinaryenBlockGetNumChildren", "_BinaryenBlockGetChildAt", "_BinaryenIfGetCondition", "_BinaryenIfGetIfTrue", "ifFalse", "_BinaryenIfGetIfFalse", "_BinaryenLoopGetName", "_BinaryenLoopGetBody", "_BinaryenBreakGetName", "condition", "_BinaryenBreakGetCondition", "value", "_BinaryenBreakGetValue", "defaultName", "_BinaryenSwitchGetDefaultName", "numNames", "_BinaryenSwitchGetNumNames", "_BinaryenSwitchGetNameAt", "_BinaryenSwitchGetCondition", "_BinaryenSwitchGetValue", "_BinaryenCallGetTarget", "numOperands", "_BinaryenCallGetNumOperands", "_BinaryenCallGetOperandAt", "_BinaryenCallIndirectGetTarget", "k", "_BinaryenCallIndirectGetNumOperands", "_BinaryenCallIndirectGetOperandAt", "_BinaryenLocalGetGetIndex", "_BinaryenLocalSetGetIndex", "_BinaryenLocalSetGetValue", "_BinaryenGlobalGetGetName", "_BinaryenGlobalSetGetName", "_BinaryenGlobalSetGetValue", "_BinaryenLoadGetPtr", "_BinaryenStoreGetPtr", "_BinaryenStoreGetValue", "_BinaryenUnaryGetValue", "_BinaryenBinaryGetLeft", "_BinaryenBinaryGetRight", "_BinaryenSelectGetIfTrue", "_BinaryenSelectGetIfFalse", "_BinaryenSelectGetCondition", "_BinaryenDropGetValue", "_BinaryenReturnGetValue", "_BinaryenMemoryGrowGetDelta", "_BinaryenAtomicRMWGetPtr", "_BinaryenAtomicRMWGetValue", "_BinaryenAtomicCmpxchgGetPtr", "_BinaryenAtomicCmpxchgGetExpected", "_BinaryenAtomicCmpxchgGetReplacement", "_BinaryenAtomicWaitGetPtr", "_BinaryenAtomicWaitGetExpected", "_BinaryenAtomicWaitGetTimeout", "_BinaryenAtomicNotifyGetPtr", "_BinaryenAtomicNotifyGetNotifyCount", "_BinaryenSIMDExtractGetVec", "_BinaryenSIMDReplaceGetVec", "_BinaryenSIMDReplaceGetValue", "_BinaryenSIMDShuffleGetLeft", "_BinaryenSIMDShuffleGetRight", "_BinaryenSIMDTernaryGetA", "_BinaryenSIMDTernaryGetB", "_BinaryenSIMDTernaryGetC", "_BinaryenSIMDShiftGetVec", "_BinaryenSIMDShiftGetShift", "_BinaryenSIMDLoadGetPtr", "_BinaryenSIMDLoadStoreLaneGetPtr", "_BinaryenSIMDLoadStoreLaneGetVec", "_BinaryenMemoryInitGetDest", "_BinaryenMemoryInitGetOffset", "_BinaryenMemoryInitGetSize", "_BinaryenMemoryCopyGetDest", "_BinaryenMemoryCopyGetSource", "_BinaryenMemoryCopyGetSize", "_BinaryenMemoryFillGetDest", "_BinaryenMemoryFillGetValue", "_BinaryenMemoryFillGetSize", "_BinaryenRefIsGetValue", "_BinaryenRefFuncGetFunc", "_BinaryenRefEqGetLeft", "_BinaryenRefEqGetRight", "_BinaryenTryGetBody", "numCatchBodies", "_BinaryenTryGetNumCatchBodies", "_BinaryenTryGetCatchBodyAt", "_BinaryenThrowGetTag", "_BinaryenThrowGetNumOperands", "_BinaryenThrowGetOperandAt", "_BinaryenTupleMakeGetNumOperands", "_BinaryenTupleMakeGetOperandAt", "_BinaryenTupleExtractGetTuple", "_BinaryenI31NewGetValue", "_BinaryenI31GetGetI31", "_BinaryenRefAsGetValue", "Pass", "module", "currentFunction", "currentGlobal", "moduleRef", "_BinaryenGetNumFunctions", "_BinaryenGetFunctionByIndex", "func", "body", "_BinaryenFunctionGetBody", "_BinaryenGetNumGlobals", "_BinaryenGetGlobalByIndex", "global", "init", "_BinaryenGlobalGetInitExpr", "replacement", "search", "_BinaryenFunctionSetBody", "parent", "replaced", "replaceChild", "_BinaryenExpressionFinalize", "numChildren", "child", "_BinaryenBlockSetChildAt", "_BinaryenIfSetCondition", "ifTrue", "_BinaryenIfSetIfTrue", "_BinaryenIfSetIfFalse", "_BinaryenLoopSetBody", "_BinaryenBreakSetCondition", "_BinaryenBreakSetValue", "_BinaryenSwitchSetCondition", "_BinaryenSwitchSetValue", "operand", "_BinaryenCallSetOperandAt", "target", "_BinaryenCallIndirectSetTarget", "_BinaryenCallIndirectSetOperandAt", "_BinaryenLocalSetSetValue", "_BinaryenGlobalSetSetValue", "ptr", "_BinaryenLoadSetPtr", "_BinaryenStoreSetPtr", "_BinaryenStoreSetValue", "_BinaryenUnarySetValue", "left", "_BinaryenBinarySetLeft", "right", "_BinaryenBinarySetRight", "_BinaryenSelectSetIfTrue", "_BinaryenSelectSetIfFalse", "_BinaryenSelectSetCondition", "_BinaryenDropSetValue", "_BinaryenReturnSetValue", "delta", "_BinaryenMemoryGrowSetDelta", "_BinaryenAtomicRMWSetPtr", "_BinaryenAtomicRMWSetValue", "_BinaryenAtomicCmpxchgSetPtr", "expected", "_BinaryenAtomicCmpxchgSetExpected", "repl", "_BinaryenAtomicCmpxchgSetReplacement", "_BinaryenAtomicWaitSetPtr", "_BinaryenAtomicWaitSetExpected", "timeout", "_BinaryenAtomicWaitSetTimeout", "_BinaryenAtomicNotifySetPtr", "notifyCount", "_BinaryenAtomicNotifySetNotifyCount", "vec", "_BinaryenSIMDExtractSetVec", "_BinaryenSIMDReplaceSetVec", "_BinaryenSIMDReplaceSetValue", "_BinaryenSIMDShuffleSetLeft", "_BinaryenSIMDShuffleSetRight", "a", "_BinaryenSIMDTernarySetA", "b", "_BinaryenSIMDTernarySetB", "c", "_BinaryenSIMDTernarySetC", "_BinaryenSIMDShiftSetVec", "shift", "_BinaryenSIMDShiftSetShift", "_BinaryenSIMDLoadSetPtr", "_BinaryenSIMDLoadStoreLaneSetPtr", "_BinaryenSIMDLoadStoreLaneSetVec", "dest", "_BinaryenMemoryInitSetDest", "offset", "_BinaryenMemoryInitSetOffset", "size", "_BinaryenMemoryInitSetSize", "_BinaryenMemoryCopySetDest", "source", "_BinaryenMemoryCopySetSource", "_BinaryenMemoryCopySetSize", "_BinaryenMemoryFillSetDest", "_BinaryenMemoryFillSetValue", "_BinaryenMemoryFillSetSize", "_BinaryenRefIsSetValue", "_BinaryenRefEqSetLeft", "_BinaryenRefEqSetRight", "_BinaryenTrySetBody", "catchBody", "_BinaryenTrySetCatchBodyAt", "_BinaryenThrowSetOperandAt", "_BinaryenTupleMakeSetOperandAt", "tuple", "_BinaryenTupleExtractSetTuple", "_BinaryenI31NewSetValue", "i31Expr", "_BinaryenI31GetSetI31", "FindUsedLocalsVisitor", "Visitor", "used", "BitSet", "localGet", "_BinaryenLocalGetGetIndex", "localSet", "_BinaryenLocalSetGetIndex", "singleton", "findUsedLocals", "expr", "visitor", "FlowFlags", "LocalFlags", "FieldFlags", "ConditionKind", "Flow", "parentFunction", "flow", "inlineFunction", "flag", "condiFlags", "resetBreakContext", "branch", "thisFieldFlags", "cloneMap", "type", "except", "temps", "TypeRef", "local", "i", "k", "tempI32s", "tempI64s", "tempF32s", "tempF64s", "tempV128s", "tempFuncrefs", "tempExternrefs", "tempAnyrefs", "tempEqrefs", "tempI31refs", "tempDatarefs", "name", "scopedLocals", "scopedLocal", "declarationNode", "scopedDummy", "Local", "index", "reportNode", "existingLocal", "scopedAlias", "_values", "current", "scope", "localsByName", "element", "defaultIfInlined", "localFlags", "flags", "actualFunction", "actualParent", "actualClass", "members", "member", "field", "fieldFlags", "id", "stack", "label", "length", "other", "otherFlags", "conditionKind", "thisFlags", "newFlags", "thisLocalFlags", "numThisLocalFlags", "otherLocalFlags", "numOtherLocalFlags", "maxLocalFlags", "left", "right", "leftFlags", "rightFlags", "rightLocalFlags", "leftLocalFlags", "numLeftLocalFlags", "numRightLocalFlags", "leftFieldFlags", "newFieldFlags", "rightFieldFlags", "_keys", "key", "before", "after", "localsByIndex", "expr", "getExpressionId", "isLocalTee", "getLocalSetIndex", "getLocalGetIndex", "iff", "getLocalSetValue", "ifFalse", "getIfFalse", "isConstZero", "getIfCondition", "getIfTrue", "getUnaryOp", "getUnaryValue", "getBinaryOp", "getBinaryLeft", "getBinaryRight", "isConstNonZero", "getCallTarget", "BuiltinNames", "getCallOperandCount", "getCallOperandAt", "ifTrue", "operand", "canConversionOverflow", "global", "getGlobalGetName", "getConstValueI32", "Type", "shift", "value", "getExpressionType", "getConstValueI64Low", "getConstValueF32", "getConstValueF64", "fromType", "signed", "isLoadSigned", "getLoadBytes", "getBlockName", "size", "getBlockChildCount", "last", "getBlockChildAt", "getSelectThen", "getSelectElse", "instancesByName", "instanceName", "instance", "functionInstance", "returnType", "levels", "parent", "sb", "toType", "ReportMode", "Resolver", "DiagnosticEmitter", "program", "node", "ctxElement", "ctxTypes", "reportMode", "nameNode", "typeArgumentNodes", "isSimpleType", "simpleName", "type", "element", "shadowType", "Type", "instance", "cloneMap", "typeDefinition", "text", "CommonNames", "typeParameterNodes", "typeArguments", "explicitThisType", "thisType", "parameterNodes", "numParameters", "parameterTypes", "requiredParameters", "hasRest", "i", "parameterNode", "parameterTypeNode", "isTypeOmitted", "parameterType", "returnTypeNode", "returnType", "signature", "Signature", "typeArgumentNode", "typeArgument", "classReference", "overload", "signatureReference", "prev", "next", "typeParameters", "alternativeReportNode", "minParameterCount", "maxParameterCount", "k", "argumentCount", "Range", "oldCtxTypes", "prototype", "ctxFlow", "contextualTypeArguments", "numTypeParameters", "typeParameterNames", "name", "argumentNodes", "numArguments", "argumentExpression", "typeNode", "resolvedTypeArguments", "typeParameterNode", "inferredType", "defaultType", "parent", "defaultTypeContextualTypeArguments", "resolvedDefaultType", "namedTypeNode", "classPrototype", "currentType", "functionTypeNode", "kind", "isTypedElement", "wrappedType", "ctxType", "resolvingExpressions", "resolved", "outerFlow", "global", "targetNode", "target", "propertyName", "variableLikeElement", "propertyInstance", "classInstance", "elementExpression", "indexedGet", "resolvedType", "functionInstance", "wrapper", "member", "basePrototype", "baseInstance", "targetExpression", "targetType", "indexSignature", "expr", "negate", "intValue", "range", "operatorTokenToString", "operand", "operator", "OperatorKind", "left", "right", "leftType", "rightType", "commonType", "thisLocal", "superLocal", "base", "intType", "fltType", "expressions", "length", "elementType", "numNullLiterals", "expression", "functionPrototype", "BuiltinNames", "varType", "varElement", "ftype", "thenType", "elseType", "declaration", "body", "functionType", "tempFlow", "Flow", "parameters", "parameter", "actualParent", "instanceKey", "typesToString", "resolvedInstance", "classTypeArguments", "classTypeParameters", "numClassTypeArguments", "classTypeParameterName", "signatureNode", "numFunctionTypeArguments", "signatureParameters", "numSignatureParameters", "parameterDeclaration", "nameInclTypeParameters", "Function", "methodOrPropertyName", "baseClass", "baseMembers", "reportNode", "overloadPrototypes", "parentClassInstance", "overloads", "_values", "unboundOverloadPrototype", "unboundOverloadParent", "isProperty", "classInstances", "propertyParent", "j", "l", "overloadInstance", "boundProperty", "boundPropertyInstance", "boundPrototype", "Interface", "Class", "pendingClasses", "numTypeArguments", "anyPending", "current", "extendsNode", "interfacePrototypes", "interfacePrototype", "implementsNode", "iface", "members", "unimplemented", "interfaces", "ifaceMembers", "_keys", "memberName", "existing", "memoryOffset", "instanceMemberPrototypes", "properties", "fieldPrototype", "fieldTypeNode", "fieldType", "existingField", "baseField", "fieldInstance", "Field", "isPowerOf2", "mask", "property", "propertyGetter", "propertySetter", "ctorPrototype", "ctorInstance", "overloadKind", "overloadPrototype", "operatorInstance", "index", "IndexSignature", "pending", "dependsOnInstance", "_values2", "Property", "getterPrototype", "getterInstance", "setterPrototype", "setterInstance", "Dependee", "source", "reportNode", "Parser", "DiagnosticEmitter", "diagnostics", "sources", "text", "path", "isEntry", "normalizedPath", "normalizePath", "internalPath", "mangleInternalPath", "dependees", "dependee", "Source", "LIBRARY_PREFIX", "PATH_DELIMITER", "tn", "Tokenizer", "statements", "statement", "namespace", "flags", "startPos", "decorators", "decorator", "exportStart", "exportEnd", "defaultStart", "defaultEnd", "declareStart", "declareEnd", "contextIsAmbient", "first", "state", "abstractStart", "abstractEnd", "next", "i", "k", "Node", "backlog", "dependent", "current", "acceptParenthesized", "suppressErrors", "token", "type", "isNullableSignature", "signature", "innerType", "name", "parameters", "parameter", "notNullStart", "notNull", "bracketStart", "bracketRange", "nullable", "thisType", "isSignature", "firstParamNameNoType", "firstParamKind", "paramStart", "kind", "param", "returnType", "expression", "args", "isFor", "declarations", "declaration", "ret", "parentFlags", "parentDecorators", "identifier", "isIllegalVariableIdentifier", "initializer", "Precedence", "range", "Range", "members", "member", "value", "expr", "typeParameters", "seenOptional", "start", "typeParameter", "extendsType", "defaultType", "isConstructor", "seenRest", "reportedRest", "isRest", "isOptional", "startRange", "accessFlags", "signatureStart", "isSetter", "body", "arrowKind", "explicitThis", "bodyExpression", "isInterface", "implementsTypes", "DeclarationStatement", "parent", "accessStart", "accessEnd", "staticStart", "staticEnd", "overrideStart", "overrideEnd", "readonlyStart", "readonlyEnd", "isGetter", "getStart", "getEnd", "setStart", "setEnd", "isGetterOrSetter", "retIndex", "typeParametersStart", "implicitFieldDeclaration", "retMethod", "retField", "keyType", "valueType", "isDeclare", "currentSource", "exportPaths", "asIdentifier", "namespaceName", "skipFrom", "topLevel", "condition", "incrementor", "variable", "iterable", "elseStatement", "switchCases", "switchCase", "label", "stmt", "catchVariable", "catchStatements", "finallyStatements", "identifierName", "depth", "typeArguments", "res", "fnType", "params", "moduleName", "operand", "typeName", "arguments_", "again", "inner", "elementExpressions", "names", "values", "toType", "identifierText", "regexpPattern", "end", "precedence", "nextPrecedence", "determinePrecedence", "isType", "ifThen", "ifElse", "commaExprs", "tag", "parts", "rawParts", "exprs", "call", "callee", "potentiallyGeneric", "nextToken", "AL_SIZE", "AL_MASK", "QueuedImport", "localFile", "localIdentifier", "foreignIdentifier", "foreignPath", "foreignPathAlt", "QueuedExport", "QueuedExportStar", "pathLiteral", "OperatorKind", "fromDecorator", "decoratorKind", "arg", "fromBinaryToken", "token", "fromUnaryPrefixToken", "fromUnaryPostfixToken", "Program", "DiagnosticEmitter", "options", "diagnostics", "nativeSource", "Source", "LIBRARY_PREFIX", "Parser", "Resolver", "nativeFile", "File", "cached", "CommonNames", "ElementKind", "prototype", "internalPath", "sources", "i", "source", "currentOffset", "blockOverhead", "payloadSize", "isManaged", "blockSize", "blockMinsize", "blockMaxsize", "tagsMask", "name", "flags", "range", "Node", "identifier", "signature", "parent", "decoratorFlags", "DecoratorFlags", "Function", "FunctionPrototype", "declaration", "elementsByDeclaration", "Type", "TypeDefinition", "queuedImports", "queuedExports", "queuedExportsStar", "queuedExtends", "queuedImplements", "k", "file", "statements", "j", "l", "statement", "_keys", "starExports", "exportStar", "foreignFile", "madeProgress", "queuedImport", "element", "localName", "exports", "exportNames", "exportName", "queuedExport", "globalElement", "isDeclaredElement", "resolver", "thisPrototype", "extendsNode", "baseElement", "basePrototype", "Range", "implementsNodes", "implementsNode", "interfaceElement", "interfacePrototype", "interfacePrototypes", "globalAliases", "BuiltinNames", "alias", "firstChar", "elementsByName", "_values", "thisInstanceMembers", "baseInstanceMembers", "thisMember", "baseMember", "thisMethod", "baseMethod", "overloads", "baseMethodInstances", "a", "thisProperty", "baseProperty", "baseGetter", "thisGetter", "baseGetterInstances", "b", "baseSetter", "thisSetter", "baseSetterInstances", "nextPrototype", "elements", "kind", "resolved", "typeArguments", "exportsStar", "instanceMembers", "member", "propertyPrototype", "getterPrototype", "setterPrototype", "staticMembers", "moduleName", "moduleImports", "module", "type", "className", "wrapperClasses", "classElement", "value", "global", "Global", "existing", "merged", "tryMerge", "filesByName", "foreignName", "fileQueuedExports", "queuedExportForeignPath", "otherFile", "decorators", "acceptedFlags", "decorator", "DecoratorKind", "flag", "ClassPrototype", "implementsTypes", "numImplementsTypes", "memberDeclarations", "memberDeclaration", "methodDeclaration", "method", "FieldPrototype", "isStatic", "classPrototype", "args", "numArgs", "firstArg", "text", "parentMembers", "PropertyPrototype", "property", "isGetter", "GETTER_PREFIX", "SETTER_PREFIX", "Enum", "values", "EnumValue", "members", "queued", "INDEX_SUFFIX", "declarations", "namespaceName", "validDecorators", "InterfacePrototype", "typeNode", "original", "Namespace", "copyMembers", "fromKind", "Element", "internalName", "program", "current", "isType", "localIdentifierIfImport", "originalDeclaration", "reportedIdentifier", "other", "vis", "declaredElements", "DeclaredElement", "identifierNode", "signatureNode", "base", "self", "selfProperty", "selfGetter", "selfSetter", "typedElements", "isTypedElement", "TypedElement", "startFunction", "Signature", "ns", "memberName", "mangleInternalName", "ConstantValueKind", "VariableLikeElement", "Parameter", "initializer", "Local", "index", "parentKind", "classInstance", "boundPrototypes", "bound", "instanceKey", "instances", "instance", "nameInclTypeParameters", "contextualTypeArguments", "localIndex", "thisType", "local", "parameterTypes", "parameterType", "parameterName", "Flow", "registerConcreteElement", "parameters", "getDefaultParameterName", "postfix", "stub", "STUB_DELIMITER", "locals", "ref", "breakStack", "debugLocations", "localNameMap", "localsByIndex", "repeat", "Field", "INSTANCE_DELIMITER", "firstDeclaration", "Property", "IndexSignature", "isUnchecked", "_isInterface", "arrayBufferViewInstance", "basePtototype", "seen", "Class", "usizeType", "id", "typeParameters", "numTypeArguments", "lengthField", "extendees", "inheritedTypeArguments", "baseName", "baseType", "iface", "interfaces", "implementers", "target", "unchecked", "uncheckedOverload", "fieldName", "overhead", "buffer", "OBJECT", "baseOffset", "fieldInstance", "offset", "typeKind", "writeI8", "writeI16", "writeI32", "writeI64", "writeI32AsI64", "writeI64AsI32", "writeF32", "writeF64", "extendedPrototype", "arrayPrototype", "staticArrayPrototype", "abvInstance", "exceptIfMember", "out", "extendee", "Interface", "older", "newer", "olderIsExport", "newerIsExport", "src", "dest", "srcMembers", "destMembers", "isInstance", "asGlobal", "PATH_DELIMITER", "INNER_DELIMITER", "STATIC_DELIMITER", "cachedDefaultParameterNames", "TypeKind", "TypeFlags", "_Type", "kind", "flags", "size", "program", "classReference", "signatureReference", "type", "wrapper", "wrapperClasses", "targetType", "nullableType", "other", "target", "signednessIsRelevant", "currentClass", "targetClass", "currentFunction", "targetFunction", "left", "right", "signednessIsImportant", "validWat", "nullablePostfix", "TypeRef", "Type", "typesToRefs", "types", "numTypes", "ret", "i", "typesToString", "sb", "Signature", "parameterTypes", "returnType", "thisType", "usizeType", "signatureTypes", "length", "compare", "numParameterTypes", "typeRefs", "createType", "thisThisType", "otherThisType", "thisParameterTypes", "otherParameterTypes", "numParameters", "thisParameterType", "otherParameterType", "targetThisType", "thisReturnType", "targetReturnType", "targetParameterTypes", "targetParameterType", "k", "indices", "index", "parameters", "optionalStart", "restIndex", "cloneParameterTypes", "BuiltinNames", "BuiltinContext", "compiler", "prototype", "typeArguments", "operands", "thisOperand", "contextualType", "reportNode", "contextIsExact", "builtins", "function_builtins", "builtin_isBoolean", "ctx", "module", "type", "checkConstantType", "Type", "reifyConstantType", "builtin_isInteger", "builtin_isSigned", "builtin_isFloat", "builtin_isVector", "builtin_isReference", "builtin_isString", "classReference", "builtin_isArray", "builtin_isArrayLike", "builtin_isFunction", "builtin_isNullable", "builtin_isDefined", "checkTypeAbsent", "checkArgsRequired", "element", "builtin_isConstant", "expr", "mustPreserveSideEffects", "getExpressionType", "builtin_isManaged", "builtin_isVoid", "builtin_lengthof", "signatureReference", "builtin_sizeof", "checkTypeRequired", "byteSize", "contextualUsize", "builtin_alignof", "isPowerOf2", "builtin_offsetof", "checkArgsOptional", "firstOperand", "fieldName", "classMembers", "member", "builtin_nameof", "resultType", "value", "builtin_idof", "builtin_bswap", "checkTypeOptional", "arg0", "flow", "temp", "res", "TypeRef", "temp1", "temp2", "builtin_clz", "builtin_ctz", "builtin_popcnt", "builtin_rotl", "arg1", "findUsedLocals", "ret", "builtin_rotr", "builtin_abs", "options", "builtin_max", "left", "op", "typeRef", "builtin_min", "builtin_ceil", "builtin_floor", "builtin_copysign", "builtin_nearest", "builtin_reinterpret", "isWasm64", "builtin_sqrt", "builtin_trunc", "builtin_isNaN", "getExpressionId", "getLocalGetIndex", "builtin_isFinite", "builtin_load", "outType", "numOperands", "immOffset", "immAlign", "evaluateImmediateOffset", "evaluateImmediateAlign", "builtin_store", "inType", "builtin_rem", "builtin_add", "builtin_sub", "builtin_mul", "builtin_div", "builtin_eq", "builtin_ne", "builtin_atomic_load", "checkFeatureEnabled", "builtin_atomic_store", "builtin_atomic_binary", "opName", "builtin_atomic_add", "builtin_atomic_sub", "builtin_atomic_and", "builtin_atomic_or", "builtin_atomic_xor", "builtin_atomic_xchg", "builtin_atomic_cmpxchg", "arg2", "builtin_atomic_wait", "builtin_atomic_notify", "builtin_atomic_fence", "builtin_select", "builtin_unreachable", "builtin_memory_size", "builtin_memory_grow", "builtin_memory_copy", "instance", "usizeType", "builtin_memory_fill", "builtin_memory_data", "offset", "elementType", "valuesOperand", "expressions", "numElements", "exprs", "isStatic", "i", "elementExpression", "precomp", "align", "buf", "size", "getConstValueI32", "builtin_i31_new", "builtin_i31_get", "builtin_changetype", "toType", "fromType", "builtin_assert", "evaled", "getConstValueI64Low", "getConstValueI64High", "getConstValueF32", "getConstValueF64", "abort", "builtin_unchecked", "alreadyUnchecked", "builtin_call_indirect", "returnType", "indexArg", "operandExprs", "paramTypeRefs", "createType", "builtin_instantiate", "typeArgument", "classInstance", "ctor", "builtin_diagnostic", "category", "builtin_error", "builtin_warning", "builtin_info", "builtin_function_call", "parent", "ftype", "signature", "functionArg", "thisType", "thisArg", "builtin_string_raw", "builtin_conversion", "builtin_i8", "builtin_i16", "builtin_i32", "builtin_i64", "builtin_isize", "builtin_u8", "builtin_u16", "builtin_u32", "builtin_u64", "builtin_usize", "builtin_bool", "builtin_f32", "builtin_f64", "builtin_v128", "builtin_i8x16", "bytes", "vars", "numVars", "writeI8", "vec", "fullVars", "builtin_i16x8", "writeI16", "builtin_i32x4", "writeI32", "builtin_i64x2", "off", "builtin_f32x4", "writeF32", "builtin_f64x2", "writeF64", "builtin_v128_splat", "builtin_v128_extract_lane", "idx", "maxIdx", "builtin_v128_replace_lane", "builtin_v128_shuffle", "laneWidth", "laneCount", "mask", "operand", "argN", "off8", "idx8", "builtin_v128_swizzle", "builtin_v128_load_splat", "builtin_v128_load_ext", "builtin_v128_load_zero", "builtin_v128_load_lane", "builtin_v128_store_lane", "builtin_v128_add", "builtin_v128_sub", "builtin_v128_mul", "builtin_v128_div", "builtin_v128_add_sat", "builtin_v128_sub_sat", "builtin_v128_min", "builtin_v128_max", "builtin_v128_pmin", "builtin_v128_pmax", "builtin_v128_dot", "builtin_v128_avgr", "builtin_v128_eq", "builtin_v128_ne", "builtin_v128_lt", "builtin_v128_le", "builtin_v128_gt", "builtin_v128_ge", "builtin_v128_narrow", "builtin_v128_neg", "builtin_v128_abs", "builtin_v128_sqrt", "builtin_v128_ceil", "builtin_v128_floor", "builtin_v128_trunc", "builtin_v128_nearest", "builtin_v128_convert", "builtin_v128_convert_low", "builtin_v128_trunc_sat", "builtin_v128_trunc_sat_zero", "builtin_v128_extend_low", "builtin_v128_extend_high", "builtin_v128_shl", "builtin_v128_shr", "builtin_v128_bitwise_binary", "builtin_v128_and", "builtin_v128_or", "builtin_v128_xor", "builtin_v128_andnot", "builtin_v128_bitwise_unary", "builtin_v128_not", "builtin_v128_bitwise_ternary", "builtin_v128_bitselect", "builtin_v128_any_true", "builtin_v128_all_true", "builtin_v128_bitmask", "builtin_v128_popcnt", "builtin_v128_extadd_pairwise", "builtin_v128_demote_zero", "builtin_v128_promote_low", "builtin_v128_q15mulr_sat", "builtin_v128_extmul_low", "builtin_v128_extmul_high", "builtin_visit_globals", "builtin_visit_members", "builtin_i32_clz", "builtin_i64_clz", "builtin_i32_ctz", "builtin_i64_ctz", "builtin_i32_popcnt", "builtin_i64_popcnt", "builtin_i32_rotl", "builtin_i64_rotl", "builtin_i32_rotr", "builtin_i64_rotr", "builtin_f32_abs", "builtin_f64_abs", "builtin_f32_max", "builtin_f64_max", "builtin_f32_min", "builtin_f64_min", "builtin_f32_ceil", "builtin_f64_ceil", "builtin_f32_floor", "builtin_f64_floor", "builtin_f32_copysign", "builtin_f64_copysign", "builtin_f32_nearest", "builtin_f64_nearest", "builtin_i32_reinterpret_f32", "builtin_i64_reinterpret_f64", "builtin_f32_reinterpret_i32", "builtin_f64_reinterpret_i64", "builtin_f32_sqrt", "builtin_f64_sqrt", "builtin_f32_trunc", "builtin_f64_trunc", "builtin_i32_rem_s", "builtin_i32_rem_u", "builtin_i64_rem_s", "builtin_i64_rem_u", "builtin_i32_add", "builtin_i64_add", "builtin_f32_add", "builtin_f64_add", "builtin_i32_sub", "builtin_i64_sub", "builtin_f32_sub", "builtin_f64_sub", "builtin_i32_mul", "builtin_i64_mul", "builtin_f32_mul", "builtin_f64_mul", "builtin_i32_div_s", "builtin_i32_div_u", "builtin_i64_div_s", "builtin_i64_div_u", "builtin_f32_div", "builtin_f64_div", "builtin_i32_eq", "builtin_i64_eq", "builtin_f32_eq", "builtin_f64_eq", "builtin_i32_ne", "builtin_i64_ne", "builtin_f32_ne", "builtin_f64_ne", "builtin_i32_load8_s", "builtin_i32_load8_u", "builtin_i32_load16_s", "builtin_i32_load16_u", "builtin_i32_load", "builtin_i64_load8_s", "builtin_i64_load8_u", "builtin_i64_load16_s", "builtin_i64_load16_u", "builtin_i64_load32_s", "builtin_i64_load32_u", "builtin_i64_load", "builtin_f32_load", "builtin_f64_load", "builtin_i32_store8", "builtin_i32_store16", "builtin_i32_store", "builtin_i64_store8", "builtin_i64_store16", "builtin_i64_store32", "builtin_i64_store", "builtin_f32_store", "builtin_f64_store", "builtin_i32_atomic_load8_u", "builtin_i32_atomic_load16_u", "builtin_i32_atomic_load", "builtin_i64_atomic_load8_u", "builtin_i64_atomic_load16_u", "builtin_i64_atomic_load32_u", "builtin_i64_atomic_load", "builtin_i32_atomic_store8", "builtin_i32_atomic_store16", "builtin_i32_atomic_store", "builtin_i64_atomic_store8", "builtin_i64_atomic_store16", "builtin_i64_atomic_store32", "builtin_i64_atomic_store", "builtin_i32_atomic_rmw8_add_u", "builtin_i32_atomic_rmw16_add_u", "builtin_i32_atomic_rmw_add", "builtin_i64_atomic_rmw8_add_u", "builtin_i64_atomic_rmw16_add_u", "builtin_i64_atomic_rmw32_add_u", "builtin_i64_atomic_rmw_add", "builtin_i32_atomic_rmw8_sub_u", "builtin_i32_atomic_rmw16_sub_u", "builtin_i32_atomic_rmw_sub", "builtin_i64_atomic_rmw8_sub_u", "builtin_i64_atomic_rmw16_sub_u", "builtin_i64_atomic_rmw32_sub_u", "builtin_i64_atomic_rmw_sub", "builtin_i32_atomic_rmw8_and_u", "builtin_i32_atomic_rmw16_and_u", "builtin_i32_atomic_rmw_and", "builtin_i64_atomic_rmw8_and_u", "builtin_i64_atomic_rmw16_and_u", "builtin_i64_atomic_rmw32_and_u", "builtin_i64_atomic_rmw_and", "builtin_i32_atomic_rmw8_or_u", "builtin_i32_atomic_rmw16_or_u", "builtin_i32_atomic_rmw_or", "builtin_i64_atomic_rmw8_or_u", "builtin_i64_atomic_rmw16_or_u", "builtin_i64_atomic_rmw32_or_u", "builtin_i64_atomic_rmw_or", "builtin_i32_atomic_rmw8_xor_u", "builtin_i32_atomic_rmw16_xor_u", "builtin_i32_atomic_rmw_xor", "builtin_i64_atomic_rmw8_xor_u", "builtin_i64_atomic_rmw16_xor_u", "builtin_i64_atomic_rmw32_xor_u", "builtin_i64_atomic_rmw_xor", "builtin_i32_atomic_rmw8_xchg_u", "builtin_i32_atomic_rmw16_xchg_u", "builtin_i32_atomic_rmw_xchg", "builtin_i64_atomic_rmw8_xchg_u", "builtin_i64_atomic_rmw16_xchg_u", "builtin_i64_atomic_rmw32_xchg_u", "builtin_i64_atomic_rmw_xchg", "builtin_i32_atomic_rmw8_cmpxchg_u", "builtin_i32_atomic_rmw16_cmpxchg_u", "builtin_i32_atomic_rmw_cmpxchg", "builtin_i64_atomic_rmw8_cmpxchg_u", "builtin_i64_atomic_rmw16_cmpxchg_u", "builtin_i64_atomic_rmw32_cmpxchg_u", "builtin_i64_atomic_rmw_cmpxchg", "builtin_i32_wait", "builtin_i64_wait", "builtin_v128_load", "builtin_v128_load8x8_s", "builtin_v128_load8x8_u", "builtin_v128_load16x4_s", "builtin_v128_load16x4_u", "builtin_v128_load32x2_s", "builtin_v128_load32x2_u", "builtin_v128_load8_splat", "builtin_v128_load16_splat", "builtin_v128_load32_splat", "builtin_v128_load64_splat", "builtin_v128_load32_zero", "builtin_v128_load64_zero", "builtin_v128_load8_lane", "builtin_v128_load16_lane", "builtin_v128_load32_lane", "builtin_v128_load64_lane", "builtin_v128_store8_lane", "builtin_v128_store16_lane", "builtin_v128_store32_lane", "builtin_v128_store64_lane", "builtin_v128_store", "builtin_i8x16_splat", "builtin_i8x16_extract_lane_s", "builtin_i8x16_extract_lane_u", "builtin_i8x16_replace_lane", "builtin_i8x16_add", "builtin_i8x16_sub", "builtin_i8x16_min_s", "builtin_i8x16_min_u", "builtin_i8x16_max_s", "builtin_i8x16_max_u", "builtin_i8x16_avgr_u", "builtin_i8x16_abs", "builtin_i8x16_neg", "builtin_i8x16_add_sat_s", "builtin_i8x16_add_sat_u", "builtin_i8x16_sub_sat_s", "builtin_i8x16_sub_sat_u", "builtin_i8x16_shl", "builtin_i8x16_shr_s", "builtin_i8x16_shr_u", "builtin_i8x16_all_true", "builtin_i8x16_bitmask", "builtin_i8x16_popcnt", "builtin_i8x16_eq", "builtin_i8x16_ne", "builtin_i8x16_lt_s", "builtin_i8x16_lt_u", "builtin_i8x16_le_s", "builtin_i8x16_le_u", "builtin_i8x16_gt_s", "builtin_i8x16_gt_u", "builtin_i8x16_ge_s", "builtin_i8x16_ge_u", "builtin_i8x16_narrow_i16x8_s", "builtin_i8x16_narrow_i16x8_u", "builtin_i8x16_shuffle", "builtin_i8x16_swizzle", "builtin_i16x8_splat", "builtin_i16x8_extract_lane_s", "builtin_i16x8_extract_lane_u", "builtin_i16x8_replace_lane", "builtin_i16x8_add", "builtin_i16x8_sub", "builtin_i16x8_mul", "builtin_i16x8_min_s", "builtin_i16x8_min_u", "builtin_i16x8_max_s", "builtin_i16x8_max_u", "builtin_i16x8_avgr_u", "builtin_i16x8_abs", "builtin_i16x8_neg", "builtin_i16x8_add_sat_s", "builtin_i16x8_add_sat_u", "builtin_i16x8_sub_sat_s", "builtin_i16x8_sub_sat_u", "builtin_i16x8_shl", "builtin_i16x8_shr_s", "builtin_i16x8_shr_u", "builtin_i16x8_all_true", "builtin_i16x8_bitmask", "builtin_i16x8_eq", "builtin_i16x8_ne", "builtin_i16x8_lt_s", "builtin_i16x8_lt_u", "builtin_i16x8_le_s", "builtin_i16x8_le_u", "builtin_i16x8_gt_s", "builtin_i16x8_gt_u", "builtin_i16x8_ge_s", "builtin_i16x8_ge_u", "builtin_i16x8_narrow_i32x4_s", "builtin_i16x8_narrow_i32x4_u", "builtin_i16x8_extend_low_i8x16_s", "builtin_i16x8_extend_low_i8x16_u", "builtin_i16x8_extend_high_i8x16_s", "builtin_i16x8_extend_high_i8x16_u", "builtin_i16x8_extadd_pairwise_i8x16_s", "builtin_i16x8_extadd_pairwise_i8x16_u", "builtin_i16x8_q15mulr_sat_s", "builtin_i16x8_extmul_low_i8x16_s", "builtin_i16x8_extmul_low_i8x16_u", "builtin_i16x8_extmul_high_i8x16_s", "builtin_i16x8_extmul_high_i8x16_u", "builtin_i16x8_shuffle", "builtin_i16x8_swizzle", "builtin_i32x4_splat", "builtin_i32x4_extract_lane", "builtin_i32x4_replace_lane", "builtin_i32x4_add", "builtin_i32x4_sub", "builtin_i32x4_mul", "builtin_i32x4_min_s", "builtin_i32x4_min_u", "builtin_i32x4_max_s", "builtin_i32x4_max_u", "builtin_i32x4_dot_i16x8_s", "builtin_i32x4_abs", "builtin_i32x4_neg", "builtin_i32x4_shl", "builtin_i32x4_shr_s", "builtin_i32x4_shr_u", "builtin_i32x4_all_true", "builtin_i32x4_bitmask", "builtin_i32x4_eq", "builtin_i32x4_ne", "builtin_i32x4_lt_s", "builtin_i32x4_lt_u", "builtin_i32x4_le_s", "builtin_i32x4_le_u", "builtin_i32x4_gt_s", "builtin_i32x4_gt_u", "builtin_i32x4_ge_s", "builtin_i32x4_ge_u", "builtin_i32x4_trunc_sat_f32x4_s", "builtin_i32x4_trunc_sat_f32x4_u", "builtin_i32x4_trunc_sat_f64x2_s_zero", "builtin_i32x4_trunc_sat_f64x2_u_zero", "builtin_i32x4_extend_low_i16x8_s", "builtin_i32x4_extend_low_i16x8_u", "builtin_i32x4_extend_high_i16x8_s", "builtin_i32x4_extend_high_i16x8_u", "builtin_i32x4_extadd_pairwise_i16x8_s", "builtin_i32x4_extadd_pairwise_i16x8_u", "builtin_i32x4_extmul_low_i16x8_s", "builtin_i32x4_extmul_low_i16x8_u", "builtin_i32x4_extmul_high_i16x8_s", "builtin_i32x4_extmul_high_i16x8_u", "builtin_i32x4_shuffle", "builtin_i32x4_swizzle", "builtin_i64x2_splat", "builtin_i64x2_extract_lane", "builtin_i64x2_replace_lane", "builtin_i64x2_add", "builtin_i64x2_sub", "builtin_i64x2_mul", "builtin_i64x2_abs", "builtin_i64x2_neg", "builtin_i64x2_shl", "builtin_i64x2_shr_s", "builtin_i64x2_shr_u", "builtin_i64x2_all_true", "builtin_i64x2_bitmask", "builtin_i64x2_eq", "builtin_i64x2_ne", "builtin_i64x2_lt_s", "builtin_i64x2_le_s", "builtin_i64x2_gt_s", "builtin_i64x2_ge_s", "builtin_i64x2_extend_low_i32x4_s", "builtin_i64x2_extend_low_i32x4_u", "builtin_i64x2_extend_high_i32x4_s", "builtin_i64x2_extend_high_i32x4_u", "builtin_i64x2_extmul_low_i32x4_s", "builtin_i64x2_extmul_low_i32x4_u", "builtin_i64x2_extmul_high_i32x4_s", "builtin_i64x2_extmul_high_i32x4_u", "builtin_i64x2_shuffle", "builtin_i64x2_swizzle", "builtin_f32x4_splat", "builtin_f32x4_extract_lane", "builtin_f32x4_replace_lane", "builtin_f32x4_add", "builtin_f32x4_sub", "builtin_f32x4_mul", "builtin_f32x4_div", "builtin_f32x4_neg", "builtin_f32x4_min", "builtin_f32x4_max", "builtin_f32x4_pmin", "builtin_f32x4_pmax", "builtin_f32x4_abs", "builtin_f32x4_sqrt", "builtin_f32x4_ceil", "builtin_f32x4_floor", "builtin_f32x4_trunc", "builtin_f32x4_nearest", "builtin_f32x4_eq", "builtin_f32x4_ne", "builtin_f32x4_lt", "builtin_f32x4_le", "builtin_f32x4_gt", "builtin_f32x4_ge", "builtin_f32x4_convert_i32x4_s", "builtin_f32x4_convert_i32x4_u", "builtin_f32x4_demote_f64x2_zero", "builtin_f32x4_shuffle", "builtin_f32x4_swizzle", "builtin_f64x2_splat", "builtin_f64x2_extract_lane", "builtin_f64x2_replace_lane", "builtin_f64x2_add", "builtin_f64x2_sub", "builtin_f64x2_mul", "builtin_f64x2_div", "builtin_f64x2_neg", "builtin_f64x2_min", "builtin_f64x2_max", "builtin_f64x2_pmin", "builtin_f64x2_pmax", "builtin_f64x2_abs", "builtin_f64x2_sqrt", "builtin_f64x2_ceil", "builtin_f64x2_floor", "builtin_f64x2_trunc", "builtin_f64x2_nearest", "builtin_f64x2_eq", "builtin_f64x2_ne", "builtin_f64x2_lt", "builtin_f64x2_le", "builtin_f64x2_gt", "builtin_f64x2_ge", "builtin_f64x2_convert_low_i32x4_s", "builtin_f64x2_convert_low_i32x4_u", "builtin_f64x4_promote_low_f32x4", "builtin_f64x2_shuffle", "builtin_f64x2_swizzle", "compileVisitGlobals", "sizeTypeRef", "visitInstance", "_values", "k", "global", "ensureVisitMembersOf", "program", "sizeTypeSize", "body", "base", "hasVisitImpl", "visitPrototype", "visitSignature", "visitThisType", "needsTempValue", "members", "j", "l", "fieldOffset", "compileVisitMembers", "managedClasses", "names", "cases", "nextId", "_keys", "instanceId", "current", "typeToRuntimeFlags", "flags", "compileRTTI", "count", "data", "abvInstance", "abvPrototype", "arrayPrototype", "setPrototype", "mapPrototype", "staticArrayPrototype", "lastId", "valueType", "segment", "compileClassInstanceOf", "instanceofInstance", "stmts", "instances", "checkConstantType_expr", "expression", "naturalAlign", "feature", "featureToString", "setCurrentTypeOnError", "numTypeArguments", "expected", "expectedMinimum", "expectedMaximum", "RtraceMemory", "Pass", "compiler", "functionName", "_BinaryenFunctionGetName", "store", "module", "ptr", "_BinaryenStoreGetPtr", "offset", "_BinaryenStoreGetOffset", "bytes", "_BinaryenStoreGetBytes", "_BinaryenStoreSetPtr", "createType", "TypeRef", "matchPattern", "module", "expr", "_BinaryenExpressionGetId", "_BinaryenCallGetTarget", "BuiltinNames", "_BinaryenCallGetNumOperands", "_BinaryenCallGetOperandAt", "needsSlot", "value", "isConstZero", "ShadowStackPass", "Pass", "compiler", "TypeRef", "func", "localIndex", "slotMap", "slotIndex", "name", "managedOperandIndices", "type", "tempMap", "_BinaryenFunctionGetNumLocals", "offset", "frameSize", "stmts", "remain", "operands", "numSlots", "i", "k", "operand", "match", "currentFunction", "numLocals", "temp", "call", "numOperands", "_BinaryenCallSetOperandAt", "callIndirect", "_BinaryenCallIndirectGetNumOperands", "_BinaryenCallIndirectGetOperandAt", "_BinaryenCallIndirectSetOperandAt", "localSet", "_BinaryenLocalSetGetValue", "_BinaryenLocalSetSetValue", "index", "_BinaryenLocalSetGetIndex", "_BinaryenLocalSetIsTee", "funcRef", "_BinaryenFunctionGetName", "params", "_BinaryenFunctionGetParams", "results", "_BinaryenFunctionGetResults", "body", "_BinaryenFunctionGetBody", "numVars", "_BinaryenFunctionGetNumVars", "vars", "_BinaryenFunctionGetVar", "tempMaps", "_keys", "moduleRef", "_BinaryenRemoveFunction", "cArr", "allocPtrArray", "_BinaryenAddFunction", "_free", "exportRef", "_BinaryenExportGetKind", "internalNameRef", "_BinaryenExportGetValue", "internalName", "externalNameRef", "_BinaryenExportGetName", "_BinaryenGetFunction", "paramTypes", "expandType", "numParams", "wrapperName", "wrapperNameRef", "forwardedOperands", "tempIndex", "_BinaryenRemoveExport", "_BinaryenAddFunctionExport", "instrumentReturns", "InstrumentReturns", "bodyType", "_BinaryenExpressionGetType", "_BinaryenFunctionSetBody", "exportMap", "exportName", "_BinaryenGetExport", "shadowStack", "ret", "_BinaryenReturnGetValue", "returnType", "_BinaryenReturnSetValue", "ExportsWalker", "program", "includePrivate", "_values", "i", "k", "file", "exports", "_keys", "memberName", "member", "exportsStar", "exportStar", "name", "element", "seen", "fieldInstance", "propertyInstance", "getterInstance", "setterInstance", "hasCompiledMember", "instances", "instance", "members", "j", "l", "JSBuilder", "ExportsWalker", "program", "esm", "includePrivate", "name", "element", "sb", "type", "isPlainValue", "Mode", "indent", "members", "_values", "i", "k", "value", "escapeString", "moduleName", "isIdentifier", "moduleId", "code", "signature", "isPlainFunction", "parameterTypes", "parameterNames", "expr", "indentText", "Type", "numReferences", "releases", "needsRetainRelease", "originalName", "decorator", "findDecorator", "args", "codeArg", "literal", "parts", "exports", "moduleImports", "options", "insertPos", "sbLengthBefore", "_keys", "module", "resetPos", "numInstrumented", "_keys2", "j", "l", "elem", "func", "global", "hasAdaptedImports", "mappings", "map", "hasAdaptedExports", "deferredCode", "objectInstance", "rtSizeOffset", "arrayBufferId", "chunkSize", "stringId", "dataStartOffset", "lengthOffset", "arrayBufferViewInstance", "arraySize", "bufferOffset", "byteLengthOffset", "size", "exportStart", "needsMaybeDefault", "importExpr", "importMap", "clazz", "valueType", "isPlainObject", "prevIndentLevel", "target", "targetName", "valueName", "skipTail", "memberName", "member", "field", "kind", "mode", "inverseMode", "text", "indentLevel", "butFirst", "lineStart", "length", "pos", "liftRequiresExportRuntime", "lowerRequiresExportRuntime", "Options", "Type", "TypeRef", "feature", "Constraints", "RuntimeFeatures", "ImportNames", "ExportNames", "runtimeFunctions", "runtimeGlobals", "Compiler", "DiagnosticEmitter", "program", "options", "module", "Module", "featureFlags", "startFunctionInstance", "BuiltinNames", "Signature", "ShadowStackPass", "resolver", "hasShadowStack", "startFunctionBody", "files", "_values", "i", "k", "file", "name", "instance", "lazyFunctions", "functionsToCompile", "prototype", "compileClassInstanceOf", "functionTable", "virtualStubs", "virtualStubsSeen", "overloadInstances", "compileRTTI", "compileVisitGlobals", "compileVisitMembers", "memoryOffset", "startIsEmpty", "exportStart", "signature", "funcRef", "typesToRefs", "isIdentifier", "RtraceMemory", "memorySegments", "initialPages", "maximumPages", "isSharedMemory", "lowMemoryLimit32", "lowMemoryLimit", "CommonNames", "tableBase", "functionTableNames", "initialTableSize", "maximumTableSize", "exports", "_keys", "elementName", "element", "exportsStar", "prefix", "functionPrototype", "functionInstance", "exportName", "thisType", "lowerRequiresExportRuntime", "liftRequiresExportRuntime", "parameterTypes", "global", "type", "members", "subPrefix", "STATIC_DELIMITER", "memberName", "member", "enumValue", "normalizedPathWithoutExtension", "reportNode", "filesByName", "pathWithIndex", "INDEX_SUFFIX", "startFunction", "startSignature", "previousBody", "previousFlow", "flow", "statements", "locals", "numLocals", "varTypes", "pendingElements", "initExpr", "typeNode", "initializerNode", "resolvedType", "internalName", "typeRef", "isDeclaredConstant", "isDeclaredInline", "mangleImportName", "mangleImportName_moduleName", "mangleImportName_elementName", "initializeInStart", "precomp", "getExpressionId", "fromName", "getGlobalGetName", "isGlobalMutable", "elementsByName", "getExpressionType", "getConstValueI32", "getConstValueI64Low", "getConstValueI64High", "getConstValueF32", "getConstValueF64", "findDecorator", "previousParent", "previousValue", "previousValueIsMut", "isInline", "initInStart", "valueNode", "value", "forceStdAlternative", "parameters", "numParameters", "visited", "paramIdentifier", "paramName", "previousType", "bodyNode", "declarationNode", "decoratorNodes", "decorator", "stmts", "range", "fnTypeNode", "firstIndex", "returnType", "thisLocal", "bodyStartIndex", "expr", "parent", "classInstance", "allocStmts", "valueType", "valueTypeRef", "thisTypeRef", "bodyExpr", "linkInstance", "createType", "buffer", "alignment", "isPowerOf2", "segment", "MemorySegment", "stringValue", "ptr", "totalOverhead", "stringInstance", "stringSegment", "segments", "len", "buf", "writeI16", "pos", "elementType", "values", "length", "byteSize", "elementTypeRef", "writeI8", "writeI32", "writeI64", "writeF32", "writeF64", "writeV128", "getConstValueV128", "id", "arrayBufferInstance", "bufferSegment", "arrayInstance", "bufferLength", "readI32", "arrayLength", "bufferAddress", "memorySegment", "index", "rtInstance", "statement", "body", "memberStatements", "declaration", "declarations", "exportStatement", "internalPath", "importStatement", "stmt", "isLastInBody", "isBody", "numStatements", "getBlockName", "j", "getBlockChildCount", "getBlockChildAt", "needsExplicitUnreachable", "outerFlow", "innerFlow", "labelNode", "breakLabel", "label", "continueLabel", "flowAfter", "flowBefore", "loopLabel", "bodyFlow", "bodyStmts", "possiblyContinues", "condFlow", "condExpr", "condKind", "Flow", "initializer", "condition", "tcond", "loopStmts", "ifStmts", "incrementor", "incrFlow", "ifTrue", "ifFalse", "thenStmts", "thenFlow", "thenTerminates", "elseStmts", "elseFlow", "valueExpression", "constraints", "cases", "numCases", "context", "tempLocal", "tempLocalIndex", "breaks", "breakIndex", "defaultIndex", "currentBlock", "commonCategorical", "commonConditional", "isLast", "nextLabel", "count", "terminates", "message", "newArgs", "numDeclarations", "initializers", "cloneMap", "dummy", "temp", "isConst", "isStatic", "local", "Local", "scopedLocals", "existing", "existingLocal", "contextualType", "shift", "mask", "expression", "compiled", "currentType", "wrap", "fromType", "toType", "explicit", "saturating", "inheritedConstraints", "left", "right", "leftExpr", "leftType", "rightExpr", "rightType", "commonType", "compound", "operator", "classReference", "overload", "operatorTokenToString", "isConstExpressionNaN", "isConstNegZero", "rightFlow", "target", "targetType", "leftValue", "rightValue", "result", "isWasm64", "accuratePow64", "namespace", "namespaceMembers", "operatorInstance", "valueExpr", "thisExpression", "elementExpression", "propertyPrototype", "propertyInstance", "setterInstance", "isUnchecked", "indexedSet", "indexExpression", "tee", "fieldInstance", "isConstructor", "fieldParent", "thisExpr", "getterInstance", "returnTypeRef", "tempThis", "ret", "setterIndexType", "getterIndexType", "elementExpr", "tempTarget", "tempElement", "localIndex", "field", "fieldType", "fieldTypeRef", "actualFunction", "baseClassInstance", "sizeTypeRef", "baseCtorInstance", "superCall", "functionArg", "thisArg", "inlinedValue", "usizeType", "typeArguments", "ftype", "args", "call", "Node", "typeParameterNodes", "typeArgumentNodes", "callee", "ctx", "BuiltinContext", "builtins", "methodName", "function_builtins", "numArguments", "hasThis", "hasRest", "minimum", "maximum", "relatedReportNode", "argumentExpressions", "inlineStack", "numArgumentsInclThis", "operands", "paramType", "paramExpr", "immediatelyDropped", "usedLocals", "BitSet", "argumentLocal", "findUsedLocals", "base", "initType", "original", "stub", "originalSignature", "originalParameterTypes", "originalParameterDeclarations", "isInstance", "minArguments", "minOperands", "maxArguments", "maxOperands", "numOptional", "forwardedOperands", "operandIndex", "numNames", "names", "ofN", "argumentsLength", "table", "tempIndex", "builder", "SwitchBuilder", "overloadInstance", "overloadType", "originalType", "overloadSignature", "overloadParameterTypes", "overloadNumParameters", "paramExprs", "n", "needsVarargsStub", "calledName", "extendees", "a", "b", "extendee", "ref", "operand", "isConstZero", "parameterIndex", "theOperands", "numOperands", "parameterNodes", "allOptionalsAreConstant", "resolved", "lastOperand", "getSideEffects", "lastOperandType", "expressions", "numExpressions", "exprs", "targetExpression", "indexedGet", "isNamed", "isSemanticallyAnonymous", "FunctionPrototype", "contextualTypeArguments", "contextualSignature", "signatureNode", "numPresentParameters", "parameterNode", "isTypeOmitted", "thisTypeNode", "Function", "worked", "offset", "fname", "enclosingFile", "signatureReference", "scopedThis", "superType", "currentParent", "localType", "globalType", "isType", "namedType", "expectedType", "actualType", "instanceofInstance", "implicitlyNegate", "floatValue", "intValue", "sign", "tag", "parts", "numParts", "stringType", "lhsLen", "rhsLen", "hasPrefix", "lhs", "rhs", "concatMethod", "exprA", "exprB", "expressionPositions", "joinInstance", "indexedSetInstance", "temps", "tsaArrayInstance", "first", "rawParts", "partExprs", "arraySegment", "rawExprs", "rawHeaderSegment", "contextualClass", "arrayType", "tempDataStart", "arrayAddress", "arrayTypeRef", "dataStartMember", "source", "bufferSize", "classType", "ctorPrototype", "isManaged", "hasErrors", "classTypeRef", "omittedFields", "memberKey", "l", "ctor", "classPrototype", "baseClass", "baseCtor", "relatedNode", "ctorInstance", "ctxType", "parentEnum", "ifThen", "ifElse", "ifThenFlow", "ifThenExpr", "ifThenType", "ifElseFlow", "ifElseExpr", "ifElseType", "getValue", "getLocalSetValue", "setValue", "typeString", "parentFunction", "featureToString", "supported", "explicitThisType", "parameterReportNode", "evaled", "v128_zero", "v128_ones", "toStringInstance", "toStringSignature", "toStringReturnType", "allocInstance", "newInstance", "thisIndex", "thisLocalIndex", "nonParameterFields", "fieldPrototype", "codeLocation", "abortInstance", "messageArg", "messageExpr", "filenameExpr", "staticAbortCallExpr", "nonNullExpr", "mangleInternalName", "overriddenModuleName", "arg", "TSDBuilder", "ExportsWalker", "program", "esm", "includePrivate", "name", "element", "sb", "type", "tsType", "Mode", "indent", "members", "_keys", "i", "k", "memberName", "signature", "parameterTypes", "numParameters", "returnType", "Type", "requiredParameters", "originalName", "deferredTypes", "moduleImports", "moduleName", "isIdentifier", "escapeString", "clazz", "_values", "member", "mode", "valueType", "seenObjectTypes", "typeName", "isPlain", "field", "base", "newOptions", "Options", "setTarget", "options", "target", "setRuntime", "runtime", "setNoAssert", "noAssert", "setExportMemory", "exportMemory", "setImportMemory", "importMemory", "setInitialMemory", "initialMemory", "setMaximumMemory", "maximumMemory", "setSharedMemory", "sharedMemory", "setImportTable", "importTable", "setExportTable", "exportTable", "setSourceMap", "sourceMap", "setMemoryBase", "memoryBase", "setTableBase", "tableBase", "addGlobalAlias", "alias", "name", "globalAliases", "removeGlobalAlias", "setExportStart", "exportStart", "setNoUnsafe", "noUnsafe", "setLowMemoryLimit", "lowMemoryLimit", "setExportRuntime", "exportRuntime", "DEFAULT_STACK_SIZE", "setStackSize", "stackSize", "setBundleVersion", "bundleMajorVersion", "bundleMinorVersion", "bundlePatchVersion", "FEATURE_SIGN_EXTENSION", "FEATURE_MUTABLE_GLOBALS", "FEATURE_NONTRAPPING_F2I", "FEATURE_BULK_MEMORY", "FEATURE_SIMD", "FEATURE_THREADS", "FEATURE_EXCEPTION_HANDLING", "FEATURE_TAIL_CALLS", "FEATURE_REFERENCE_TYPES", "FEATURE_MULTI_VALUE", "FEATURE_GC", "FEATURE_MEMORY64", "FEATURE_FUNCTION_REFERENCES", "FEATURE_RELAXED_SIMD", "FEATURE_EXTENDED_CONST", "enableFeature", "feature", "disableFeature", "setOptimizeLevelHints", "optimizeLevel", "shrinkLevel", "setBasenameHint", "basename", "setBindingsHint", "bindings", "setPedantic", "pedantic", "setDebugInfo", "debug", "newProgram", "Program", "nextDiagnostic", "program", "getSource", "internalPath", "getDiagnosticCode", "diagnostic", "getDiagnosticCategory", "getDiagnosticMessage", "getDiagnosticRange", "getDiagnosticRelatedRange", "getRangeStart", "range", "getRangeEnd", "getRangeSource", "getSourceNormalizedPath", "source", "isInfo", "message", "isWarning", "isError", "parse", "program", "text", "path", "isEntry", "nextFile", "getDependee", "file", "initializeProgram", "compile", "Compiler", "buildTSD", "esm", "TSDBuilder", "buildJS", "JSBuilder", "getBinaryenModuleRef", "module", "validate", "optimize", "optimizeLevel", "shrinkLevel", "debugInfo", "zeroFilledMemory", "ASTBuilder", "node", "builder", "source", "statements", "i", "k", "sb", "current", "typeArguments", "numTypeArguments", "isNullable", "explicitThisType", "parameters", "numParameters", "returnType", "extendsType", "defaultType", "elements", "numElements", "element", "names", "values", "indent", "name", "value", "operatorTokenToString", "args", "numArgs", "declaration", "expressions", "numExpressions", "range", "hasExplicitSign", "str", "escapeString", "tag", "parts", "last", "lastCharPos", "numStatements", "indentLevel", "label", "isDefault", "decorators", "typeParameters", "implementsTypes", "numImplementsTypes", "indexSignature", "members", "numMembers", "member", "numValues", "initializer", "path", "type", "condition", "incrementor", "signature", "numTypeParameters", "body", "isTypeOmitted", "ifTrue", "ifFalse", "externalName", "declarations", "namespaceName", "numDeclarations", "cases", "catchVariable", "catchStatements", "finallyStatements", "firstDeclaration", "statement", "kind", "implicitFieldDeclaration", "ret", "src_default", "index_js_exports"]
}
